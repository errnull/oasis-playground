{"version":3,"file":"module.js","sources":["../src/DRACOWorker.ts","../src/worker/worker.js","../src/decoder.ts"],"sourcesContent":["import { Logger } from \"@oasis-engine/core\";\n\nexport class DRACOWorker {\n  // Worker instance.\n  private _worker: Worker;\n  // Record byteLength of each task.\n  private _costs: { [taskId: number]: number } = {};\n  // The sum of bytelength that the worker is currently dealing with, in order to sort the workers.\n  private _currentLoad: number = 0;\n  private _callbacks: { [taskId: number]: IResolveReject } = {};\n  get currentLoad(): number {\n    return this._currentLoad;\n  }\n\n  constructor(workerSourceURL: string, decoderWASMBinary?: ArrayBuffer) {\n    this._worker = new Worker(workerSourceURL);\n    this._worker.onmessage = (e) => {\n      const message = e.data;\n      switch (message.type) {\n        case \"decode\":\n          this._callbacks[message.id].resolve(message.geometry);\n          break;\n\n        case \"error\":\n          this._callbacks[message.id].reject(message);\n          break;\n        default:\n          Logger.error('DRACOWorker: Unexpected message, \"' + message.type + '\"');\n      }\n    };\n    if (decoderWASMBinary) {\n      this._worker.postMessage({ type: \"init\", decoderConfig: { wasmBinary: decoderWASMBinary } });\n    } else {\n      this._worker.postMessage({ type: \"init\", decoderConfig: {} });\n    }\n  }\n\n  setCosts(taskId: number, cost: number) {\n    this._costs[taskId] = cost;\n  }\n\n  addCurrentLoad(cost: number) {\n    this._currentLoad += cost;\n  }\n\n  setCallback(taskId: number, resolve: (any) => void, reject: (any) => void) {\n    this._callbacks[taskId] = { resolve, reject };\n  }\n\n  decode(taskId: number, taskConfig: ITaskConfig, buffer: ArrayBuffer) {\n    this._worker.postMessage({ type: \"decode\", id: taskId, taskConfig, buffer }, [buffer]);\n  }\n\n  releaseTask(taskId: number) {\n    this._currentLoad -= this._costs[taskId];\n    delete this._callbacks[taskId];\n    delete this._costs[taskId];\n  }\n}\n\ninterface IResolveReject {\n  resolve: (any) => void;\n  reject: (any) => void;\n}\n\nexport interface ITaskConfig {\n  attributeIDs: { [attribute: string]: number };\n  attributeTypes: { [attribute: string]: string };\n  useUniqueIDs: boolean;\n  indexType: string;\n}\n","export default `let decoderPending;\nlet decoderConfig;\n\nonmessage = function(e) {\n  const message = e.data;\n\n  switch (message.type) {\n    case \"init\":\n      decoderConfig = message.decoderConfig;\n      decoderPending = new Promise(function(resolve /*, reject*/) {\n        decoderConfig.onModuleLoaded = function(draco) {\n          // Module is Promise-like. Wrap before resolving to avoid loop.\n          resolve({ draco: draco });\n        };\n        DracoDecoderModule(decoderConfig);\n      });\n      break;\n\n    case \"decode\":\n      const buffer = message.buffer;\n      const taskConfig = message.taskConfig;\n      decoderPending.then(module => {\n        const draco = module.draco;\n        const decoder = new draco.Decoder();\n        const decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n        try {\n          const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n          const buffers = geometry.attributes.map(attr => attr.array.buffer);\n          if (geometry.index) buffers.push(geometry.index.array.buffer);\n          self.postMessage({ type: \"decode\", id: message.id, geometry }, buffers);\n        } catch (error) {\n          console.error(error);\n          self.postMessage({ type: \"error\", id: message.id, error: error.message });\n        } finally {\n          draco.destroy(decoderBuffer);\n          draco.destroy(decoder);\n        }\n      });\n      break;\n  }\n};\n\nfunction decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n  const attributeIDs = taskConfig.attributeIDs;\n  const attributeTypes = taskConfig.attributeTypes;\n\n  let dracoGeometry;\n  let decodingStatus;\n\n  const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    dracoGeometry = new draco.Mesh();\n    decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n  } else {\n    throw new Error(\"DRACODecoder worker: Unexpected geometry type.\");\n  }\n\n  if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n    throw new Error(\"DRACODecoder worker: Decoding failed: \" + decodingStatus.error_msg());\n  }\n\n  const geometry = { index: null, attributes: [] };\n\n  // Gather all vertex attributes.\n  for (let attributeName in attributeIDs) {\n    const attributeType = self[attributeTypes[attributeName]];\n\n    let attribute;\n    let attributeID;\n\n    // A Draco file may be created with default vertex attributes, whose attribute IDs\n    // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n    // a Draco file may contain a custom set of attributes, identified by known unique\n    // IDs. glTF files always do the latter, and .drc files typically do the former.\n    if (taskConfig.useUniqueIDs) {\n      attributeID = attributeIDs[attributeName];\n      attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n    } else {\n      attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n      if (attributeID === -1) continue;\n      attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n    }\n    geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n  }\n  // Add index.\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    // Generate mesh faces.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    let dataSize;\n    let ptr;\n    let index;\n    const indexType = self[taskConfig.indexType];\n\n    switch (indexType) {\n      case Uint16Array:\n        dataSize = numIndices * 2;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt16Array(dracoGeometry, dataSize, ptr);\n        index = new Uint16Array(draco.HEAPU16.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      case Uint32Array:\n        dataSize = numIndices * 4;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt32Array(dracoGeometry, dataSize, ptr);\n        index = new Uint32Array(draco.HEAPU32.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      default:\n        throw new Error(\"DRACODecoder: Unexpected index type.\");\n    }\n    geometry.index = { array: index, itemSize: 1 };\n  }\n  draco.destroy(dracoGeometry);\n  return geometry;\n}\n\nfunction decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n  const numComponents = attribute.num_components();\n  const numPoints = dracoGeometry.num_points();\n  const numValues = numPoints * numComponents;\n  let ptr;\n  let array;\n  let dataSize;\n  switch (attributeType) {\n    case Float32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr);\n      array = new Float32Array(draco.HEAPF32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT8, numValues, ptr);\n      array = new Int8Array(draco.HEAP8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr);\n      array = new Int16Array(draco.HEAP16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr);\n      array = new Int32Array(draco.HEAP32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr);\n      array = new Uint8Array(draco.HEAPU8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr);\n      array = new Uint16Array(draco.HEAPU16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr);\n      array = new Uint32Array(draco.HEAPU32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    default:\n      throw new Error(\"DRACODecoder: Unexpected attribute type.\");\n  }\n\n  return {\n    name: attributeName,\n    array: array,\n    itemSize: numComponents\n  };\n}\n`;","import { Logger, request } from \"@oasis-engine/core\";\n\nimport { DRACOWorker, ITaskConfig } from \"./DRACOWorker\";\n\nimport workerString from \"./worker/worker.js\";\n\nconst LIB_PATH = \"https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/\";\nconst JS_FILE = \"draco_decoder_gltf.js\";\n\nconst WASM_FILE = \"draco_decoder_gltf.r3bin\";\nconst WASM_WRAPPER_FILE = \"draco_wasm_wrapper_gltf.js\";\n\nexport class DRACODecoder {\n  private pool: DRACOWorker[] = [];\n  private workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4);\n  private useJS: boolean;\n  private currentTaskId: number = 1;\n  private taskCache = new WeakMap();\n  private loadLibPromise: Promise<any>;\n\n  constructor(config: IDecoderConfig = { type: \"wasm\", workerLimit: 4 }) {\n    if (config.workerLimit > this.workerLimit) {\n      Logger.warn(\"DRACOWorkerPool: Can not initialize worker pool with limit:\" + config.workerLimit);\n    } else {\n      this.workerLimit = config.workerLimit ?? 4;\n    }\n    this.useJS = typeof WebAssembly !== \"object\" || config.type === \"js\";\n    this.loadLibPromise = this.preloadLib();\n  }\n\n  private preloadLib(): Promise<any> {\n    if (this.loadLibPromise) {\n      return this.loadLibPromise;\n    }\n\n    return new Promise((resolve, reject) => {\n      if (this.useJS) {\n        request(`${LIB_PATH}${JS_FILE}`, { type: \"text\" })\n          .then((jsSource) => {\n            const body = [jsSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary: null });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      } else {\n        Promise.all([\n          request(`${LIB_PATH}${WASM_WRAPPER_FILE}`, { type: \"text\" }),\n          request(`${LIB_PATH}${WASM_FILE}`, { type: \"arraybuffer\" })\n        ])\n          .then((resources) => {\n            const [wrapperSource, decoderWASMBinary] = resources;\n            const body = [wrapperSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      }\n    });\n  }\n\n  private getWorker(): Promise<DRACOWorker> {\n    return this.preloadLib().then((worderResources) => {\n      if (this.pool.length < this.workerLimit) {\n        const dracoWorker = new DRACOWorker(worderResources.workerSourceURL, worderResources.decoderWASMBinary);\n        this.pool.push(dracoWorker);\n      } else {\n        this.pool.sort(function (a, b) {\n          return a.currentLoad > b.currentLoad ? -1 : 1;\n        });\n      }\n      return this.pool[this.pool.length - 1];\n    });\n  }\n\n  decode(buffer: ArrayBuffer, taskConfig: ITaskConfig): Promise<any> {\n    const taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred.\n    // again from this thread.\n    if (this.taskCache.has(buffer)) {\n      const cachedTask = this.taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // After using transferable to transfer data, the data in the original environment will be cleared, so it is judged that byteLength is 0, which means it has been transferred.\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error(\n          \"DRACODecoder: Unable to re-decode a buffer with different \" +\n            \"settings. Buffer has already been transferred.\"\n        );\n      }\n    }\n\n    const taskId = this.currentTaskId++;\n    const cost = buffer.byteLength;\n    let taskWorker;\n    const task = new Promise((resolve, reject) => {\n      this.getWorker()\n        .then((worker) => {\n          taskWorker = worker;\n          worker.setCosts(taskId, cost);\n          worker.addCurrentLoad(cost);\n\n          worker.setCallback(taskId, resolve, reject);\n          worker.decode(taskId, taskConfig, buffer);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n    task.finally(() => {\n      if (taskWorker && taskId) {\n        taskWorker.releaseTask(taskId);\n      }\n    });\n\n    this.taskCache.set(buffer, {\n      key: taskKey,\n      promise: task\n    });\n    return task;\n  }\n}\n\ninterface IDecoderConfig {\n  type?: \"js\" | \"wasm\";\n  workerLimit?: number;\n}\n"],"names":["DRACOWorker","workerSourceURL","decoderWASMBinary","_worker","_costs","_currentLoad","_callbacks","Worker","onmessage","e","message","data","type","id","resolve","geometry","reject","Logger","error","postMessage","decoderConfig","wasmBinary","setCosts","taskId","cost","addCurrentLoad","setCallback","decode","taskConfig","buffer","releaseTask","LIB_PATH","JS_FILE","WASM_FILE","WASM_WRAPPER_FILE","DRACODecoder","config","workerLimit","pool","Math","min","navigator","hardwareConcurrency","useJS","currentTaskId","taskCache","WeakMap","loadLibPromise","warn","WebAssembly","preloadLib","Promise","request","then","jsSource","body","workerString","join","URL","createObjectURL","Blob","catch","reason","all","resources","wrapperSource","getWorker","worderResources","length","dracoWorker","push","sort","a","b","currentLoad","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","taskWorker","task","worker","finally","set"],"mappings":"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"}