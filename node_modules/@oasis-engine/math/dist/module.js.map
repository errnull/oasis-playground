{"version":3,"file":"module.js","sources":["../src/enums/ContainmentType.ts","../src/enums/PlaneIntersectionType.ts","../src/MathUtil.ts","../src/Vector3.ts","../src/BoundingSphere.ts","../src/BoundingBox.ts","../src/CollisionUtil.ts","../src/Plane.ts","../src/BoundingFrustum.ts","../src/Matrix3x3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Ray.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Color.ts","../src/Rect.ts","../src/SphericalHarmonics3.ts"],"sourcesContent":["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n","/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n","/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone {\n  /** @internal */\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left.x;\n    const ay = left.y;\n    const az = left.z;\n    const bx = right.x;\n    const by = right.y;\n    const bz = right.z;\n\n    out.x = ay * bz - az * by;\n    out.y = az * bx - ax * bz;\n    out.z = ax * by - ay * bx;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y) && MathUtil.equals(left.z, right.z);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { x, y, z } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { x, y, z } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z);\n    if (len > 0) {\n      // TODO\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8];\n    out.y = x * e[1] + y * e[5] + z * e[9];\n    out.z = x * e[2] + y * e[6] + z * e[10];\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + e[15];\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    let w = x * e[3] + y * e[7] + z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out.x = (x * e[0] + y * e[4] + z * e[8] + e[12]) * w;\n    out.y = (x * e[1] + y * e[5] + z * e[9] + e[13]) * w;\n    out.z = (x * e[2] + y * e[6] + z * e[10] + e[14]) * w;\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { x, y, z } = v;\n    const { x: qx, y: qy, z: qz, w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n  }\n\n  /** The x component of the vector.*/\n  x: number;\n  /** The y component of the vector.*/\n  y: number;\n  /** The z component of the vector.*/\n  z: number;\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number): Vector3 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z } = this;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector3): Vector3 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    return out;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @returns This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && center.cloneTo(this.center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Clones this sphere to the specified sphere.\n   * @param out - The specified sphere\n   * @returns The specified sphere\n   */\n  cloneTo(out: BoundingSphere): BoundingSphere {\n    this.center.cloneTo(out.center);\n    out.radius = this.radius;\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param sphere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(sphere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = sphere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && min.cloneTo(this.min);\n    max && max.cloneTo(this.max);\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Clones this box to the specified box.\n   * @param out - The specified box\n   * @returns The specified box\n   */\n  cloneTo(out: BoundingBox): BoundingBox {\n    this.min.cloneTo(out.min);\n    this.max.cloneTo(out.max);\n    return out;\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].setValue(minX, maxY, maxZ);\n    out[1].setValue(maxX, maxY, maxZ);\n    out[2].setValue(maxX, minY, maxZ);\n    out[3].setValue(minX, minY, maxZ);\n    out[4].setValue(minX, maxY, minZ);\n    out[5].setValue(maxX, maxY, minZ);\n    out[6].setValue(maxX, minY, minZ);\n    out[7].setValue(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Check whether the boxes intersect.\n   * @param boxA - The first box to check\n   * @param boxB - The second box to check\n   * @returns True if the boxes intersect, false otherwise\n   */\n  static intersectsBoxAndBox(boxA: BoundingBox, boxB: BoundingBox): boolean {\n    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {\n      return false;\n    }\n\n    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {\n      return false;\n    }\n\n    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);\n  }\n\n  /**\n   * Check whether the spheres intersect.\n   * @param sphereA - The first sphere to check\n   * @param sphereB - The second sphere to check\n   * @returns True if the spheres intersect, false otherwise\n   */\n  static intersectsSphereAndSphere(sphereA: BoundingSphere, sphereB: BoundingSphere): boolean {\n    const radiisum = sphereA.radius + sphereB.radius;\n    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;\n  }\n\n  /**\n   * Check whether the sphere and the box intersect.\n   * @param sphere - The sphere to check\n   * @param box - The box to check\n   * @returns True if the sphere and the box intersect, false otherwise\n   */\n  static intersectsSphereAndBox(sphere: BoundingSphere, box: BoundingBox): boolean {\n    const center = sphere.center;\n    const max = box.max;\n    const min = box.min;\n\n    const closestPoint = CollisionUtil._tempVec30;\n    closestPoint.setValue(\n      Math.max(min.x, Math.min(center.x, max.x)),\n      Math.max(min.y, Math.min(center.y, max.y)),\n      Math.max(min.z, Math.min(center.z, max.z))\n    );\n\n    const distance = Vector3.distanceSquared(center, closestPoint);\n    return distance <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const back = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      back.x = normal.x >= 0 ? min.x : max.x;\n      back.y = normal.y >= 0 ? min.y : max.y;\n      back.z = normal.z >= 0 ? min.z : max.z;\n      if (Vector3.dot(plane.normal, back) > -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        front.x = max.x;\n        back.x = min.x;\n      } else {\n        front.x = min.x;\n        back.x = max.x;\n      }\n      if (normal.y >= 0) {\n        front.y = max.y;\n        back.y = min.y;\n      } else {\n        front.y = min.y;\n        back.y = max.y;\n      }\n      if (normal.z >= 0) {\n        front.z = max.z;\n        back.z = min.z;\n      } else {\n        front.z = min.z;\n        back.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, back) === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, front) === PlaneIntersectionType.Front) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class Plane implements IClone {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n    const factor = 1.0 / normal.length();\n\n    const outNormal = out.normal;\n    outNormal.x = normal.x * factor;\n    outNormal.y = normal.y * factor;\n    outNormal.z = normal.z * factor;\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && normal.cloneTo(this.normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    this.cloneTo(out);\n    return out;\n  }\n\n  /**\n   * Clones this plane to the specified plane.\n   * @param out - The specified plane\n   * @returns The specified plane\n   */\n  cloneTo(out: Plane): Plane {\n    this.normal.cloneTo(out.normal);\n    out.distance = this.distance;\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const bf = new BoundingFrustum();\n    this.cloneTo(bf);\n    return bf;\n  }\n\n  /**\n   * Clones this frustum to the specified frustum.\n   * @param out - The specified frustum\n   * @returns The specified frustum\n   */\n  cloneTo(out: BoundingFrustum): BoundingFrustum {\n    this.near.cloneTo(out.near);\n    this.far.cloneTo(out.far);\n    this.left.cloneTo(out.left);\n    this.right.cloneTo(out.right);\n    this.top.cloneTo(out.top);\n    this.bottom.cloneTo(out.bottom);\n    return out;\n  }\n\n  /**\n   * Get the plane by the given index.\n   * 0: near\n   * 1: far\n   * 2: left\n   * 3: right\n   * 4: top\n   * 5: bottom\n   * @param index - The index\n   * @returns The plane get\n   */\n  getPlane(index: number): Plane {\n    switch (index) {\n      case 0:\n        return this.near;\n      case 1:\n        return this.far;\n      case 2:\n        return this.left;\n      case 3:\n        return this.right;\n      case 4:\n        return this.top;\n      case 5:\n        return this.bottom;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.x = -m14 - m13;\n    nearNormal.y = -m24 - m23;\n    nearNormal.z = -m34 - m33;\n    this.near.distance = -m44 - m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.x = m13 - m14;\n    farNormal.y = m23 - m24;\n    farNormal.z = m33 - m34;\n    this.far.distance = m43 - m44;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.x = -m14 - m11;\n    leftNormal.y = -m24 - m21;\n    leftNormal.z = -m34 - m31;\n    this.left.distance = -m44 - m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.x = m11 - m14;\n    rightNormal.y = m21 - m24;\n    rightNormal.z = m31 - m34;\n    this.right.distance = m41 - m44;\n    this.right.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.x = m12 - m14;\n    topNormal.y = m22 - m24;\n    topNormal.z = m32 - m34;\n    this.top.distance = m42 - m44;\n    this.top.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.x = -m14 - m12;\n    bottomNormal.y = -m24 - m22;\n    bottomNormal.z = -m34 - m32;\n    this.bottom.distance = -m44 - m42;\n    this.bottom.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix3x3, end: Matrix3x3, t: number, out: Matrix3x3): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n\n    oe[3] = se[3] * inv + ee[3] * t;\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n    oe[8] = se[8] * inv + ee[8] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s.y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation.x;\n    oe[7] = translation.y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { x, y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { x, y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Set the value of this 3x3 matrix by the specified 4x4 matrix.\n   * upper-left principle\n   * @param a - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  setValueByMatrix(a: Matrix): Matrix3x3 {\n    const ae = a.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n\n    oe[3] = e[3];\n    oe[4] = e[4];\n    oe[5] = e[5];\n\n    oe[6] = e[6];\n    oe[7] = e[7];\n    oe[8] = e[8];\n\n    return out;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n  /** @internal */\n  static readonly _tempQuat1 = new Quaternion();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left.x,\n      ay = left.y,\n      az = left.z,\n      aw = left.w;\n    const bx = right.x,\n      by = right.y,\n      bz = right.z,\n      bw = right.w;\n\n    out.x = ax * bw + aw * bx + ay * bz - az * by;\n    out.y = ay * bw + aw * by + az * bx - ax * bz;\n    out.z = az * bw + aw * bz + ax * by - ay * bx;\n    out.w = aw * bw - ax * bx - ay * by - az * bz;\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = a.w;\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out.x = normalAxis.x * s;\n    out.y = normalAxis.y * s;\n    out.z = normalAxis.z * s;\n    out.w = Math.cos(rad);\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out.z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out.w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out.w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out.x = (m23 - m32) * sqrt;\n      out.y = (m31 - m13) * sqrt;\n      out.z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = 0.5 * sqrt;\n      out.y = (m12 + m21) * half;\n      out.z = (m13 + m31) * half;\n      out.w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = (m21 + m12) * half;\n      out.y = 0.5 * sqrt;\n      out.z = (m32 + m23) * half;\n      out.w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out.x = (m13 + m31) * half;\n      out.y = (m23 + m32) * half;\n      out.z = 0.5 * sqrt;\n      out.w = (m12 - m21) * half;\n    }\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out.x = -x * invDot;\n      out.y = -y * invDot;\n      out.z = -z * invDot;\n      out.w = w * invDot;\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out.x = start.x * inv + end.x * t;\n      out.y = start.y * inv + end.y * t;\n      out.z = start.z * inv + end.z * t;\n      out.w = start.w * inv + end.w * t;\n    } else {\n      out.x = start.x * inv - end.x * t;\n      out.y = start.y * inv - end.y * t;\n      out.z = start.z * inv - end.z * t;\n      out.w = start.w * inv - end.w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const ax = start.x;\n    const ay = start.y;\n    const az = start.z;\n    const aw = start.w;\n    let bx = end.x;\n    let by = end.y;\n    let bz = end.z;\n    let bw = end.w;\n\n    let scale0, scale1;\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > MathUtil.zeroTolerance) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out.x = scale0 * ax + scale1 * bx;\n    out.y = scale0 * ay + scale1 * by;\n    out.z = scale0 * az + scale1 * bz;\n    out.w = scale0 * aw + scale1 * bw;\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = s;\n    out.y = 0;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = s;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = 0;\n    out.z = s;\n    out.w = c;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + w * bx;\n    out.y = y * bw + z * bx;\n    out.z = z * bw - y * bx;\n    out.w = w * bw - x * bx;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw - z * by;\n    out.y = y * bw + w * by;\n    out.z = z * bw + x * by;\n    out.w = w * bw - y * by;\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + y * bz;\n    out.y = y * bw - x * bz;\n    out.z = z * bw + w * bz;\n    out.w = w * bw - z * bz;\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /** The x component of the quaternion. */\n  x: number;\n  /** The y component of the quaternion. */\n  y: number;\n  /** The z component of the quaternion. */\n  z: number;\n  /** The w component of the quaternion. */\n  w: number;\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  setValue(x: number, y: number, z: number, w: number): Quaternion {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this quaternion by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { x, y, z } = this;\n    const length = x * x + y * y + z * z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out.x = 1;\n      out.y = 0;\n      out.z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out.x = this.x * inv;\n      out.y = this.y * inv;\n      out.z = this.z * inv;\n\n      return Math.acos(this.w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this.toYawPitchRoll(out);\n    const t = out.x;\n    out.x = out.y;\n    out.y = t;\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    const { x, y, z, w } = this;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const xy = x * y;\n    const zw = z * w;\n    const zx = z * x;\n    const yw = y * w;\n    const yz = y * z;\n    const xw = x * w;\n\n    out.y = Math.asin(2.0 * (xw - yz));\n    if (Math.cos(out.y) > MathUtil.zeroTolerance) {\n      out.z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));\n      out.x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));\n    } else {\n      out.z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));\n      out.x = 0.0;\n    }\n\n    return out;\n  }\n\n  /**\n   * Clone the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * Clones this quaternion to the specified quaternion.\n   * @param out - The specified quaternion\n   * @returns The specified quaternion\n   */\n  cloneTo(out: Quaternion): Quaternion {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotation around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion._tempQuat1.rotationAxisAngle(axis, rad);\n    this.multiply(Quaternion._tempQuat1);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2],\n      l14 = le[3];\n    const l21 = le[4],\n      l22 = le[5],\n      l23 = le[6],\n      l24 = le[7];\n    const l31 = le[8],\n      l32 = le[9],\n      l33 = le[10],\n      l34 = le[11];\n    const l41 = le[12],\n      l42 = le[13],\n      l43 = le[14],\n      l44 = le[15];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2],\n      r14 = re[3];\n    const r21 = re[4],\n      r22 = re[5],\n      r23 = re[6],\n      r24 = re[7];\n    const r31 = re[8],\n      r32 = re[9],\n      r33 = re[10],\n      r34 = re[11];\n    const r41 = re[12],\n      r42 = re[13],\n      r43 = re[14],\n      r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix, end: Matrix, t: number, out: Matrix): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n    oe[3] = se[3] * inv + ee[3] * t;\n\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n\n    oe[8] = se[8] * inv + ee[8] * t;\n    oe[9] = se[9] * inv + ee[9] * t;\n    oe[10] = se[10] * inv + ee[10] * t;\n    oe[11] = se[11] * inv + ee[11] * t;\n\n    oe[12] = se[12] * inv + ee[12] * t;\n    oe[13] = se[13] * inv + ee[13] * t;\n    oe[14] = se[14] * inv + ee[14] * t;\n    oe[15] = se[15] * inv + ee[15] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale.x;\n    let sy = scale.y;\n    let sz = scale.z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s.y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s.z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation.x;\n    oe[13] = translation.y;\n    oe[14] = translation.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis.x;\n    oe[1] = yAxis.x;\n    oe[2] = zAxis.x;\n    oe[3] = 0;\n\n    oe[4] = xAxis.y;\n    oe[5] = yAxis.y;\n    oe[6] = zAxis.y;\n    oe[7] = 0;\n\n    oe[8] = xAxis.z;\n    oe[9] = yAxis.z;\n    oe[10] = zAxis.z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovY - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovY: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovY / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitrary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Set the value of this matrix by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Clone the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Clones this matrix to the specified matrix.\n   * @param out - The specified matrix\n   * @returns The specified matrix\n   */\n  cloneTo(out: Matrix): Matrix {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n    oe[3] = e[3];\n\n    oe[4] = e[4];\n    oe[5] = e[5];\n    oe[6] = e[6];\n    oe[7] = e[7];\n\n    oe[8] = e[8];\n    oe[9] = e[9];\n    oe[10] = e[10];\n    oe[11] = e[11];\n\n    oe[12] = e[12];\n    oe[13] = e[13];\n    oe[14] = e[14];\n    oe[15] = e[15];\n\n    return out;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n\n    translation.x = e[12];\n    translation.y = e[13];\n    translation.z = e[14];\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    scale.x = sx;\n    scale.y = sy;\n    scale.z = sz;\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let S = Math.sqrt(trace + 1.0) * 2;\n      out.w = 0.25 * S;\n      out.x = (e[6] - e[9]) / S;\n      out.y = (e[8] - e[2]) / S;\n      out.z = (e[1] - e[4]) / S;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let S = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out.w = (e[6] - e[9]) / S;\n      out.x = 0.25 * S;\n      out.y = (e[1] + e[4]) / S;\n      out.z = (e[8] + e[2]) / S;\n    } else if (e[5] > e[10]) {\n      let S = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out.w = (e[8] - e[2]) / S;\n      out.x = (e[1] + e[4]) / S;\n      out.y = 0.25 * S;\n      out.z = (e[6] + e[9]) / S;\n    } else {\n      let S = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out.w = (e[1] - e[4]) / S;\n      out.x = (e[8] + e[2]) / S;\n      out.y = (e[6] + e[9]) / S;\n      out.z = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n\n    out.x = e[12];\n    out.y = e[13];\n    out.z = e[14];\n\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The normalized direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && origin.cloneTo(this.origin);\n    direction && direction.cloneTo(this.direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone {\n  /** @internal */\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left.x * right.x + left.y * right.y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { x, y } = left;\n    out.x = x + (right.x - x) * t;\n    out.y = y + (right.y - y) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out.x = -left.x;\n    out.y = -left.y;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { x, y } = left;\n    let len: number = Math.sqrt(x * x + y * y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out.x = left.x * s;\n    out.y = left.y * s;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number): Vector2 {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this.x += right.x;\n    this.y += right.y;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this.x -= right.x;\n    this.y -= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this.x *= right.x;\n    this.y *= right.y;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this.x /= right.x;\n    this.y /= right.y;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y } = this;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y } = this;\n    return x * x + y * y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this.x *= s;\n    this.y *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector2): Vector2 {\n    out.x = this.x;\n    out.y = this.y;\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone {\n  /** @internal */\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n    out.w = left.w - right.w;\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n    out.w = left.w * right.w;\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n    out.w = left.w / right.w;\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { x, y, z, w } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n    out.w = w + (end.w - w) * t;\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n    out.w = Math.max(left.w, right.w);\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n    out.w = Math.min(left.w, right.w);\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = -a.w;\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8] + w * e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + w * e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + w * e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + w * e[15];\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const qx = q.x;\n    const qy = q.y;\n    const qz = q.z;\n    const qw = q.w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out.w = w;\n  }\n\n  /** The x component of the vector. */\n  x: number;\n  /** The y component of the vector. */\n  y: number;\n  /** The z component of the vector. */\n  z: number;\n  /** The w component of the vector. */\n  w: number;\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  setValue(x: number, y: number, z: number, w: number): Vector4 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Set the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    this.w += right.w;\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    this.w -= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    this.w *= right.w;\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    this.w /= right.w;\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    this.w *= s;\n    return this;\n  }\n\n  /**\n   * Clone the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this.x, this.y, this.z, this.w);\n    return ret;\n  }\n\n  /**\n   * Clones this vector to the specified vector.\n   * @param out - The specified vector\n   * @returns The specified vector\n   */\n  cloneTo(out: Vector4): Vector4 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left.r, right.r) &&\n      MathUtil.equals(left.g, right.g) &&\n      MathUtil.equals(left.b, right.b) &&\n      MathUtil.equals(left.a, right.a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out.r = left.r + right.r;\n    out.g = left.g + right.g;\n    out.b = left.b + right.b;\n    out.a = left.a + right.a;\n\n    return out;\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out.r = left.r * s;\n    out.g = left.g * s;\n    out.b = left.b * s;\n    out.a = left.a * s;\n\n    return out;\n  }\n\n  /** The red component of the color, 0~1. */\n  public r: number;\n  /** The green component of the color, 0~1. */\n  public g: number;\n  /** The blue component of the color, 0~1. */\n  public b: number;\n  /** The alpha component of the color, 0~1. */\n  public a: number;\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  setValue(r: number, g: number, b: number, a: number): Color {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    this.a += color.a;\n\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    this.a *= s;\n\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this.r, this.g, this.b, this.a);\n    return ret;\n  }\n\n  /**\n   * Clones this color to the specified color.\n   * @param out - The specified color\n   * @returns The specified color\n   */\n  cloneTo(out: Color): Color {\n    out.r = this.r;\n    out.g = this.g;\n    out.b = this.b;\n    out.a = this.a;\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out.r = Color.gammaToLinearSpace(this.r);\n    out.g = Color.gammaToLinearSpace(this.g);\n    out.b = Color.gammaToLinearSpace(this.b);\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out.r = Color.linearToGammaSpace(this.r);\n    out.g = Color.linearToGammaSpace(this.g);\n    out.b = Color.linearToGammaSpace(this.b);\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\n\n// A 2d rectangle defined by x and y position, width and height.\nexport class Rect implements IClone {\n  /** The x coordinate of the rectangle. */\n  public x: number;\n  /** The y coordinate of the rectangle. */\n  public y: number;\n  /** The width of the rectangle, measured from the x position. */\n  public width: number;\n  /** The height of the rectangle, measured from the y position. */\n  public height: number;\n\n  /**\n   * Constructor of Rect.\n   * @param x - The x coordinate of the rectangle, default 0\n   * @param y - The y coordinate of the rectangle, default 0\n   * @param width - The width of the rectangle, measured from the x position, default 0\n   * @param height - The height of the rectangle, measured from the y position, default 0\n   */\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Set the value of this rectangle.\n   * @param x - The x coordinate of the rectangle\n   * @param y - The y coordinate of the rectangle\n   * @param width - The width of the rectangle, measured from the x position\n   * @param height - The height of the rectangle, measured from the y position\n   * @returns This rectangle\n   */\n  setValue(x: number, y: number, width: number, height: number): Rect {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /**\n   * Creates a clone of this rect.\n   * @returns A clone of this rect\n   */\n  clone(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Clones this rect to the specified rect.\n   * @param out - The specified rect\n   * @returns The specified rect\n   */\n  cloneTo(out: Rect): Rect {\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { Color } from \"./Color\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n * @remarks\n * https://graphics.stanford.edu/papers/envmap/envmap.pdf\n * http://www.ppsloan.org/publications/StupidSH36.pdf\n * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n */\nexport class SphericalHarmonics3 implements IClone {\n  /** The coefficients of SphericalHarmonics3. */\n  coefficients: Float32Array = new Float32Array(27);\n\n  /**\n   * Add light to SphericalHarmonics3.\n   * @param direction - Light direction\n   * @param color - Light color\n   * @param deltaSolidAngle - The delta solid angle of the light\n   */\n  addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void {\n    /**\n     * Implements `EvalSHBasis` from [Projection from Cube maps] in http://www.ppsloan.org/publications/StupidSH36.pdf.\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI))\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI))\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI))\n     */\n\n    color.scale(deltaSolidAngle);\n\n    const coe = this.coefficients;\n\n    const { x, y, z } = direction;\n    const { r, g, b } = color;\n\n    const bv0 = 0.282095; // basis0 = 0.886227\n    const bv1 = -0.488603 * y; // basis1 = -0.488603\n    const bv2 = 0.488603 * z; // basis2 = 0.488603\n    const bv3 = -0.488603 * x; // basis3 = -0.488603\n    const bv4 = 1.092548 * (x * y); // basis4 = 1.092548\n    const bv5 = -1.092548 * (y * z); // basis5 = -1.092548\n    const bv6 = 0.315392 * (3 * z * z - 1); // basis6 = 0.315392\n    const bv7 = -1.092548 * (x * z); // basis7 = -1.092548\n    const bv8 = 0.546274 * (x * x - y * y); // basis8 = 0.546274\n\n    (coe[0] += r * bv0), (coe[1] += g * bv0), (coe[2] += b * bv0);\n\n    (coe[3] += r * bv1), (coe[4] += g * bv1), (coe[5] += b * bv1);\n    (coe[6] += r * bv2), (coe[7] += g * bv2), (coe[8] += b * bv2);\n    (coe[9] += r * bv3), (coe[10] += g * bv3), (coe[11] += b * bv3);\n\n    (coe[12] += r * bv4), (coe[13] += g * bv4), (coe[14] += b * bv4);\n    (coe[15] += r * bv5), (coe[16] += g * bv5), (coe[17] += b * bv5);\n    (coe[18] += r * bv6), (coe[19] += g * bv6), (coe[20] += b * bv6);\n    (coe[21] += r * bv7), (coe[22] += g * bv7), (coe[23] += b * bv7);\n    (coe[24] += r * bv8), (coe[25] += g * bv8), (coe[26] += b * bv8);\n  }\n\n  /**\n   * Evaluates the color for the specified direction.\n   * @param direction - Specified direction\n   * @param out - Out color\n   */\n  evaluate(direction: Vector3, out: Color): Color {\n    /**\n     * Equations based on data from: http://ppsloan.org/publications/StupidSH36.pdf\n     *\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI)）\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI)）\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI)）\n     *\n     *\n     * Convolution kernel\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const coe = this.coefficients;\n    const { x, y, z } = direction;\n\n    const bv0 = 0.886227; // kernel0 * basis0 = 0.886227\n    const bv1 = -1.023327 * y; // kernel1 * basis1 = -1.023327\n    const bv2 = 1.023327 * z; // kernel1 * basis2 = 1.023327\n    const bv3 = -1.023327 * x; // kernel1 * basis3 = -1.023327\n    const bv4 = 0.858086 * y * x; // kernel2 * basis4 = 0.858086\n    const bv5 = -0.858086 * y * z; // kernel2 * basis5 = -0.858086\n    const bv6 = 0.247708 * (3 * z * z - 1); // kernel2 * basis6 = 0.247708\n    const bv7 = -0.858086 * z * x; // kernel2 * basis7 = -0.858086\n    const bv8 = 0.429042 * (x * x - y * y); // kernel2 * basis8 = 0.429042\n\n    // l0\n    let r = coe[0] * bv0;\n    let g = coe[1] * bv0;\n    let b = coe[2] * bv0;\n\n    // l1\n    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;\n    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;\n    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;\n\n    // l2\n    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;\n    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;\n    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;\n\n    out.setValue(r, g, b, 1.0);\n    return out;\n  }\n\n  /**\n   * Scale the coefficients.\n   * @param s - The amount by which to scale the SphericalHarmonics3\n   */\n  scale(s: number): void {\n    const src = this.coefficients;\n\n    (src[0] *= s), (src[1] *= s), (src[2] *= s);\n    (src[3] *= s), (src[4] *= s), (src[5] *= s);\n    (src[6] *= s), (src[7] *= s), (src[8] *= s);\n    (src[9] *= s), (src[10] *= s), (src[11] *= s);\n    (src[12] *= s), (src[13] *= s), (src[14] *= s);\n    (src[15] *= s), (src[16] *= s), (src[17] *= s);\n    (src[18] *= s), (src[19] *= s), (src[20] *= s);\n    (src[21] *= s), (src[22] *= s), (src[23] *= s);\n    (src[24] *= s), (src[25] *= s), (src[26] *= s);\n  }\n\n  /**\n   * Set the value of this spherical harmonics by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): void {\n    const s = this.coefficients;\n\n    (s[0] = array[offset]), (s[1] = array[1 + offset]), (s[2] = array[2 + offset]);\n    (s[3] = array[3 + offset]), (s[4] = array[4 + offset]), (s[5] = array[5 + offset]);\n    (s[6] = array[6 + offset]), (s[7] = array[7 + offset]), (s[8] = array[8 + offset]);\n    (s[9] = array[9 + offset]), (s[10] = array[10 + offset]), (s[11] = array[11 + offset]);\n    (s[12] = array[12 + offset]), (s[13] = array[13 + offset]), (s[14] = array[14 + offset]);\n    (s[15] = array[15 + offset]), (s[16] = array[16 + offset]), (s[17] = array[17 + offset]);\n    (s[18] = array[18 + offset]), (s[19] = array[19 + offset]), (s[20] = array[20 + offset]);\n    (s[21] = array[21 + offset]), (s[22] = array[22 + offset]), (s[23] = array[23 + offset]);\n    (s[24] = array[24 + offset]), (s[25] = array[25 + offset]), (s[26] = array[26 + offset]);\n  }\n\n  /**\n   * Clone the value of this spherical harmonics to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const s = this.coefficients;\n\n    (out[0 + outOffset] = s[0]), (out[1 + outOffset] = s[1]), (out[2 + outOffset] = s[2]);\n\n    (out[3 + outOffset] = s[3]), (out[4 + outOffset] = s[4]), (out[5 + outOffset] = s[5]);\n    (out[6 + outOffset] = s[6]), (out[7 + outOffset] = s[7]), (out[8 + outOffset] = s[8]);\n    (out[9 + outOffset] = s[9]), (out[10 + outOffset] = s[10]), (out[11 + outOffset] = s[11]);\n\n    (out[12 + outOffset] = s[12]), (out[13 + outOffset] = s[13]), (out[14 + outOffset] = s[14]);\n    (out[15 + outOffset] = s[15]), (out[16 + outOffset] = s[16]), (out[17 + outOffset] = s[17]);\n    (out[18 + outOffset] = s[18]), (out[19 + outOffset] = s[19]), (out[20 + outOffset] = s[20]);\n    (out[21 + outOffset] = s[21]), (out[22 + outOffset] = s[22]), (out[23 + outOffset] = s[23]);\n    (out[24 + outOffset] = s[24]), (out[25 + outOffset] = s[25]), (out[26 + outOffset] = s[26]);\n  }\n\n  /**\n   * Creates a clone of this SphericalHarmonics3.\n   * @returns A clone of this SphericalHarmonics3\n   */\n  clone(): SphericalHarmonics3 {\n    const v = new SphericalHarmonics3();\n    this.cloneTo(v);\n\n    return v;\n  }\n\n  /**\n   * Clones this SphericalHarmonics3 to the specified SphericalHarmonics3.\n   * @param out - The specified SphericalHarmonics3\n   * @returns The specified SphericalHarmonics3\n   */\n  cloneTo(out: SphericalHarmonics3): SphericalHarmonics3 {\n    this.toArray(out.coefficients);\n    return out;\n  }\n}\n"],"names":["ContainmentType","PlaneIntersectionType","MathUtil","clamp","v","min","max","Math","equals","a","b","abs","zeroTolerance","isPowerOf2","radianToDegree","r","radToDegreeFactor","degreeToRadian","d","degreeToRadFactor","PI","Vector3","add","left","right","out","x","y","z","subtract","multiply","divide","dot","cross","ax","ay","az","bx","by","bz","distance","sqrt","distanceSquared","lerp","start","end","t","negate","normalize","len","scale","s","transformNormal","m","e","elements","transformToVec3","transformToVec4","w","transformCoordinate","transformByQuat","quaternion","qx","qy","qz","qw","ix","iy","iz","iw","setValue","setValueByArray","array","offset","length","lengthSquared","toArray","outOffset","clone","cloneTo","_zero","_one","BoundingSphere","fromPoints","points","Error","center","_tempVec30","i","radius","fromBox","box","BoundingBox","fromCenterAndExtent","extent","Number","MAX_VALUE","l","point","fromSphere","sphere","transform","source","matrix","_tempVec31","getCenter","getExtent","merge","box1","box2","getCorners","minX","minY","minZ","maxX","maxY","maxZ","CollisionUtil","distancePlaneAndPoint","plane","normal","intersectsPlaneAndPoint","Front","Back","Intersecting","intersectsPlaneAndBox","front","back","intersectsPlaneAndSphere","intersectsRayAndPlane","ray","dir","direction","position","origin","intersectsRayAndBox","dirX","dirY","dirZ","oriX","oriY","oriZ","tmax","inverse","t1","t2","temp","intersectsRayAndSphere","c","discriminant","intersectsBoxAndBox","boxA","boxB","intersectsSphereAndSphere","sphereA","sphereB","radiisum","intersectsSphereAndBox","closestPoint","intersectsFrustumAndBox","frustum","getPlane","frustumContainsBox","result","Contains","Disjoint","Intersects","frustumContainsSphere","intersectionType","Plane","p","factor","outNormal","point0","point1","point2","x0","y0","z0","x1","y1","z1","x2","y2","z2","yz","xz","xy","invPyth","BoundingFrustum","near","far","top","bottom","calculateFromMatrix","bf","index","me","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","nearNormal","farNormal","leftNormal","rightNormal","topNormal","bottomNormal","intersectsBox","intersectsSphere","Matrix3x3","le","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","se","ee","inv","rotationQuaternion","xx","yx","yy","zx","zy","zz","wx","wy","wz","scaling","translation","invert","ae","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","det","normalMatrix","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","rotate","sin","cos","translate","transpose","Float32Array","srce","setValueByMatrix","ret","determinant","identity","Quaternion","aw","bw","conjugate","rotationAxisAngle","axis","rad","normalAxis","_tempVector3","rotationEuler","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","rotationMatrix3x3","half","invDot","slerp","scale0","scale1","cosom","omega","acos","sinom","rotationX","rotationY","rotationZ","rotateX","rotateY","rotateZ","getAxisAngle","toEuler","toYawPitchRoll","zw","yw","xw","asin","atan2","quat","rotateAxisAngle","_tempQuat1","Matrix","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","rotationTranslation","affineTransformation","rotation","sx","sy","sz","lookAt","eye","target","up","xAxis","yAxis","zAxis","_tempVec32","ortho","lr","bt","nf","perspective","fovY","aspect","f","tan","b13","b21","b23","b31","b33","decompose","rm","_tempMat30","rme","xs","sign","ys","zs","invSX","invSY","invSZ","getRotation","trace","S","getScaling","getTranslation","_identity","Ray","intersectPlane","intersectSphere","intersectBox","getPoint","Vector2","Vector4","q","Color","gammaToLinearSpace","value","pow","linearToGammaSpace","g","color","toLinear","toGamma","Rect","width","height","SphericalHarmonics3","coefficients","addLight","deltaSolidAngle","coe","bv0","bv1","bv2","bv3","bv4","bv5","bv6","bv7","bv8","evaluate","src"],"mappings":"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"}