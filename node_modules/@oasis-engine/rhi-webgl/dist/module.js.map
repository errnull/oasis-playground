{"version":3,"file":"module.js","sources":["../src/type.ts","../src/WebCanvas.ts","../src/GLCapability.ts","../src/GLExtensions.ts","../src/GLPrimitive.ts","../src/GLTexture.ts","../src/GLRenderColorTexture.ts","../src/GLRenderDepthTexture.ts","../src/GLRenderStates.ts","../src/GLRenderTarget.ts","../src/GLTexture2D.ts","../src/GLTextureCubeMap.ts","../src/WebGLRenderer.ts","../src/WebGLEngine.ts"],"sourcesContent":["/**\n * Smoothing plug-in.\n * */\nexport interface WebGLExtension {\n  MAX_DRAW_BUFFERS: GLenum;\n  UNSIGNED_INT_24_8: GLenum;\n  MAX_SAMPLES: GLenum;\n  RGBA8: GLenum;\n  RGBA16F: GLenum;\n  RGBA32F: GLenum;\n  DEPTH_COMPONENT32F: GLenum;\n  READ_FRAMEBUFFER: GLenum;\n  DRAW_FRAMEBUFFER: GLenum;\n\n  createVertexArray(): WebGLVertexArrayObject | null;\n  deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n  isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\n  bindVertexArray(array: WebGLVertexArrayObject | null): void;\n\n  renderbufferStorageMultisample(\n    target: GLenum,\n    samples: GLsizei,\n    internalformat: GLenum,\n    width: GLsizei,\n    height: GLsizei\n  ): void;\n  blitFramebuffer(\n    srcX0: GLint,\n    srcY0: GLint,\n    srcX1: GLint,\n    srcY1: GLint,\n    dstX0: GLint,\n    dstY0: GLint,\n    dstX1: GLint,\n    dstY1: GLint,\n    mask: GLbitfield,\n    filter: GLenum\n  ): void;\n\n  drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\n  drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\n  vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\n  drawBuffers(buffers: Iterable<GLenum>): void;\n}\n\nexport interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3\n}\n","import { Canvas } from \"@oasis-engine/core\";\nimport { Vector2 } from \"@oasis-engine/math\";\n\ntype OffscreenCanvas = any;\n\n/**\n * The canvas used on the web, which can support HTMLCanvasElement and OffscreenCanvas.\n */\nexport class WebCanvas implements Canvas {\n  _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _width: number;\n  private _height: number;\n  private _scale: Vector2 = new Vector2();\n\n  /**\n   * @inheritdoc\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._webCanvas.width = value;\n      this._width = value;\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._webCanvas.height = value;\n      this._height = value;\n    }\n  }\n\n  /**\n   * The scale of canvas, the value is visible width/height divide the render width/height.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector2 {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      this._scale.setValue(\n        (webCanvas.clientWidth * devicePixelRatio) / webCanvas.width,\n        (webCanvas.clientHeight * devicePixelRatio) / webCanvas.height\n      );\n    }\n    return this._scale;\n  }\n\n  set scale(value: Vector2) {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      webCanvas.style.transformOrigin = `left top`;\n      webCanvas.style.transform = `scale(${value.x}, ${value.y})`;\n    }\n  }\n\n  /**\n   * Resize the rendering size according to the clientWidth and clientHeight of the canvas.\n   * @param pixelRatio - Pixel ratio\n   */\n  resizeByClientSize(pixelRatio: number = window.devicePixelRatio): void {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      this.width = webCanvas.clientWidth * pixelRatio;\n      this.height = webCanvas.clientHeight * pixelRatio;\n    }\n  }\n\n  /**\n   * Create a web canvas.\n   * @param webCanvas - Web native canvas\n   */\n  constructor(webCanvas: HTMLCanvasElement | OffscreenCanvas) {\n    const width = webCanvas.width;\n    const height = webCanvas.height;\n    this._webCanvas = webCanvas;\n    this._width = width;\n    this._height = height;\n  }\n\n  /**\n   * Set scale.\n   * @param x - Scale along the X axis\n   * @param y - Scale along the Y axis\n   */\n  setScale(x: number, y: number): void {\n    this._scale.setValue(x, y);\n    this.scale = this._scale;\n  }\n}\n","import { GLCapabilityType } from \"@oasis-engine/core\";\nimport { GLCompressedTextureInternalFormat } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\ntype extensionKey = string;\n\n/**\n * GL capability.\n */\nexport class GLCapability {\n  private _maxDrawBuffers: number;\n  private _maxAnisoLevel: number;\n  private _maxAntiAliasing: number;\n\n  _rhi: WebGLRenderer;\n  capabilityList: Map<GLCapabilityType, boolean>;\n\n  get canUseFloatTextureBlendShape(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.shaderVertexID) &&\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  /**\n   * Whether can use more joints.\n   */\n  get canIUseMoreJoints(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  get maxDrawBuffers() {\n    if (!this._maxDrawBuffers) {\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);\n      } else {\n        this._maxDrawBuffers = 1;\n      }\n    }\n    return this._maxDrawBuffers;\n  }\n\n  /**\n   * Max anisoLevel.\n   */\n  get maxAnisoLevel(): number {\n    if (!this._maxAnisoLevel) {\n      const ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);\n      this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;\n    }\n    return this._maxAnisoLevel;\n  }\n\n  /**\n   * Max MSAA count.\n   */\n  get maxAntiAliasing(): number {\n    if (!this._maxAntiAliasing) {\n      const gl = this._rhi.gl;\n      const canMSAA = this.canIUse(GLCapabilityType.multipleSample);\n\n      this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;\n    }\n    return this._maxAntiAliasing;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  constructor(rhi: WebGLRenderer) {\n    this._rhi = rhi;\n    this.capabilityList = new Map();\n\n    this._init();\n    this._compatibleAllInterface();\n  }\n\n  /**\n   * Check device capabilities.\n   */\n  canIUse(capabilityType: GLCapabilityType): boolean {\n    return this.capabilityList.get(capabilityType);\n  }\n\n  /**\n   * Check if can use some compressed texture format.\n   */\n  canIUseCompressedTextureInternalFormat(internalType: GLCompressedTextureInternalFormat): boolean {\n    const {\n      // astc\n      RGBA_ASTC_4X4_KHR,\n      RGBA_ASTC_12X12_KHR,\n      SRGB8_ALPHA8_ASTC_4X4_KHR,\n      SRGB8_ALPHA8_ASTC_12X12_KHR,\n      // etc1\n      RGB_ETC1_WEBGL,\n      // etc\n      R11_EAC,\n      SRGB8_ALPHA8_ETC2_EAC,\n      // pvrtc\n      RGB_PVRTC_4BPPV1_IMG,\n      RGBA_PVRTC_2BPPV1_IMG,\n      // s3tc\n      RGB_S3TC_DXT1_EXT,\n      RGBA_S3TC_DXT5_EXT\n    } = GLCompressedTextureInternalFormat;\n    if (\n      (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR) ||\n      (internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR)\n    ) {\n      return this.canIUse(GLCapabilityType.astc);\n    } else if (internalType === RGB_ETC1_WEBGL) {\n      return this.canIUse(GLCapabilityType.etc1);\n    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {\n      return this.canIUse(GLCapabilityType.etc);\n    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {\n      return this.canIUse(GLCapabilityType.pvrtc);\n    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {\n      return this.canIUse(GLCapabilityType.s3tc);\n    }\n    return false;\n  }\n\n  /**\n   *  Init capabilities.\n   */\n  private _init() {\n    const cap = this.capabilityList;\n    const { isWebGL2 } = this.rhi;\n    const requireExtension = this.rhi.requireExtension.bind(this.rhi);\n\n    const {\n      shaderVertexID,\n      standardDerivatives,\n      shaderTextureLod,\n      elementIndexUint,\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      multipleSample,\n      drawBuffers,\n\n      astc,\n      astc_webkit,\n      etc,\n      etc_webkit,\n      etc1,\n      etc1_webkit,\n      pvrtc,\n      pvrtc_webkit,\n      s3tc,\n      s3tc_webkit,\n\n      textureFloat,\n      textureHalfFloat,\n      textureFloatLinear,\n      textureHalfFloatLinear,\n      WEBGL_colorBufferFloat,\n      colorBufferFloat,\n      colorBufferHalfFloat,\n      textureFilterAnisotropic\n    } = GLCapabilityType;\n    cap.set(shaderVertexID, isWebGL2);\n    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));\n    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));\n    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));\n    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));\n    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));\n    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));\n    cap.set(multipleSample, isWebGL2);\n    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));\n    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));\n    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));\n    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));\n    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));\n    cap.set(\n      colorBufferFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(WEBGL_colorBufferFloat)\n    );\n    cap.set(\n      colorBufferHalfFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(colorBufferHalfFloat)\n    );\n    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));\n\n    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));\n    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));\n    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));\n    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));\n    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));\n  }\n\n  /**\n   * If there are extensions that can supplement this ability, smooth out the difference.\n   * @example\n   * compatible(GLCapabilityType.depthTexture,{\n   *    UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n   * })\n   * gl.UNSIGNED_INT_24_8 = ext.UNSIGNED_INT_24_8_WEBGL\n   */\n  private _compatibleInterface(capabilityType: GLCapabilityType, flatItem: { [glKey: string]: extensionKey }) {\n    const rhi = this.rhi;\n    const gl = rhi.gl;\n    let ext = null;\n\n    if ((ext = rhi.requireExtension(capabilityType))) {\n      for (let glKey in flatItem) {\n        const extensionKey = flatItem[glKey];\n        const extensionVal = ext[extensionKey];\n\n        // Mini game hack the native function,use “.bind” to smooth out if is “Funcion”.\n        if (extensionVal?.bind) {\n          gl[glKey] = extensionVal.bind(ext);\n        } else {\n          gl[glKey] = extensionVal;\n        }\n      }\n    }\n  }\n\n  private _compatibleAllInterface() {\n    const {\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      drawBuffers,\n      textureFilterAnisotropic,\n      textureHalfFloat,\n      colorBufferHalfFloat,\n      WEBGL_colorBufferFloat\n    } = GLCapabilityType;\n    const { isWebGL2 } = this.rhi;\n\n    if (!isWebGL2) {\n      this._compatibleInterface(depthTexture, {\n        UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n      });\n      this._compatibleInterface(vertexArrayObject, {\n        createVertexArray: \"createVertexArrayOES\",\n        deleteVertexArray: \"deleteVertexArrayOES\",\n        isVertexArray: \"isVertexArrayOES\",\n        bindVertexArray: \"bindVertexArrayOES\"\n      });\n      this._compatibleInterface(instancedArrays, {\n        drawArraysInstanced: \"drawArraysInstancedANGLE\",\n        drawElementsInstanced: \"drawElementsInstancedANGLE\",\n        vertexAttribDivisor: \"vertexAttribDivisorANGLE\"\n      });\n      this._compatibleInterface(drawBuffers, {\n        MAX_DRAW_BUFFERS: \"MAX_DRAW_BUFFERS_WEBGL\"\n      });\n      const items = {};\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        const maxDrawBuffers = this.maxDrawBuffers;\n        for (let i = 0; i < maxDrawBuffers; i++) {\n          i != 0 && (items[`COLOR_ATTACHMENT${i}`] = `COLOR_ATTACHMENT${i}_WEBGL`);\n          items[`DRAW_BUFFER${i}`] = `DRAW_BUFFER${i}_WEBGL`;\n        }\n        this._compatibleInterface(drawBuffers, {\n          drawBuffers: \"drawBuffersWEBGL\",\n          ...items\n        });\n      }\n      this._compatibleInterface(textureHalfFloat, {\n        HAFL_FLOAT: \"HALF_FLOAT_OES\"\n      });\n      this._compatibleInterface(colorBufferHalfFloat, {\n        RGBA16F: \"RBGA16F_EXT\"\n      });\n      this._compatibleInterface(WEBGL_colorBufferFloat, {\n        RGBA32F: \"RBGA32F_EXT\"\n      });\n    }\n\n    this._compatibleInterface(textureFilterAnisotropic, {\n      TEXTURE_MAX_ANISOTROPY_EXT: \"TEXTURE_MAX_ANISOTROPY_EXT\"\n    });\n  }\n}\n","import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType } from \"@oasis-engine/core\";\n\n/**\n * GLContext extension.\n */\nexport class GLExtensions {\n  private rhi: WebGLRenderer;\n  private _requireResult;\n\n  constructor(rhi: WebGLRenderer) {\n    this.rhi = rhi;\n    this._requireResult = {};\n  }\n\n  /**\n   * Require an extension.\n   */\n  requireExtension(ext: GLCapabilityType) {\n    if (this._requireResult[ext] !== undefined) {\n      return this._requireResult[ext];\n    }\n\n    this._requireResult[ext] = this.rhi.gl.getExtension(ext);\n    return this._requireResult[ext];\n  }\n}\n","import { GLCapabilityType, Logger, Mesh, SubMesh } from \"@oasis-engine/core\";\nimport { IPlatformPrimitive } from \"@oasis-engine/design\";\nimport { WebGLExtension } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Improvement of VAO:\n * 1) WebGL2.0 must support VAO, almost all devices support vao extensions in webgl1.0, we can use PollyFill,only keep VAO mode.\n * 2) VAO implementation now has bugs, change IndexBuffer、VertexBuffer、VertexElements need to update VAO.\n */\n\n/**\n * @internal\n * GL platform primitive.\n */\nexport class GLPrimitive implements IPlatformPrimitive {\n  protected attribLocArray: number[];\n  protected readonly _primitive: Mesh;\n  protected readonly canUseInstancedArrays: boolean;\n\n  private gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private vao: Map<number, WebGLVertexArrayObject> = new Map();\n  private readonly _useVao: boolean;\n\n  constructor(rhi: WebGLRenderer, primitive: Mesh) {\n    this._primitive = primitive;\n    this.canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);\n    this._useVao = rhi.canIUse(GLCapabilityType.vertexArrayObject);\n    this.gl = rhi.gl;\n  }\n\n  /**\n   * Draw the primitive.\n   */\n  draw(shaderProgram: any, subMesh: SubMesh): void {\n    const gl = this.gl;\n    const primitive = this._primitive;\n\n    if (this._useVao) {\n      if (!this.vao.has(shaderProgram.id)) {\n        this.registerVAO(shaderProgram);\n      }\n      const vao = this.vao.get(shaderProgram.id);\n      gl.bindVertexArray(vao);\n    } else {\n      this.bindBufferAndAttrib(shaderProgram);\n    }\n\n    // @ts-ignore\n    const { _indexBufferBinding, _instanceCount, _glIndexType, _glIndexByteCount } = primitive;\n    const { topology, start, count } = subMesh;\n\n    if (!_instanceCount) {\n      if (_indexBufferBinding) {\n        if (this._useVao) {\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n        } else {\n          const { _nativeBuffer } = _indexBufferBinding.buffer;\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n      } else {\n        gl.drawArrays(topology, start, count);\n      }\n    } else {\n      if (this.canUseInstancedArrays) {\n        if (_indexBufferBinding) {\n          if (this._useVao) {\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);\n          } else {\n            const { _nativeBuffer } = _indexBufferBinding.buffer;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          }\n        } else {\n          gl.drawArraysInstanced(topology, start, count, _instanceCount);\n        }\n      } else {\n        Logger.error(\"ANGLE_instanced_arrays extension is not supported\");\n      }\n    }\n\n    // unbind\n    if (this._useVao) {\n      gl.bindVertexArray(null);\n    } else {\n      this.disableAttrib();\n    }\n  }\n\n  destroy() {\n    if (this._useVao) {\n      const gl = this.gl;\n      this.vao.forEach((vao) => {\n        gl.deleteVertexArray(vao);\n      });\n      this.vao.clear();\n    }\n  }\n\n  /**\n   * Bind buffer and attribute.\n   */\n  protected bindBufferAndAttrib(shaderProgram: any): void {\n    const gl = this.gl;\n    const primitive = this._primitive;\n    // @ts-ignore\n    const vertexBufferBindings = primitive._vertexBufferBindings;\n\n    this.attribLocArray = [];\n    const attributeLocation = shaderProgram.attributeLocation;\n    const attributes = primitive._vertexElementMap;\n\n    let vbo: WebGLBuffer;\n    let lastBoundVbo: WebGLBuffer;\n\n    for (const name in attributeLocation) {\n      const loc = attributeLocation[name];\n      if (loc === -1) continue;\n\n      const element = attributes[name];\n      if (element) {\n        const { buffer, stride } = vertexBufferBindings[element.bindingIndex];\n        vbo = buffer._nativeBuffer;\n        // prevent binding the vbo which already bound at the last loop, e.g. a buffer with multiple attributes.\n        if (lastBoundVbo !== vbo) {\n          lastBoundVbo = vbo;\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        }\n\n        gl.enableVertexAttribArray(loc);\n        const { size, type, normalized } = element._glElementInfo;\n        gl.vertexAttribPointer(loc, size, type, normalized, stride, element.offset);\n        if (this.canUseInstancedArrays) {\n          gl.vertexAttribDivisor(loc, element.instanceStepRate);\n        }\n        this.attribLocArray.push(loc);\n      } else {\n        Logger.warn(\"vertex attribute not found: \" + name);\n      }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  protected disableAttrib() {\n    const gl = this.gl;\n    for (let i = 0, l = this.attribLocArray.length; i < l; i++) {\n      gl.disableVertexAttribArray(this.attribLocArray[i]);\n    }\n  }\n\n  private registerVAO(shaderProgram: any): void {\n    const gl = this.gl;\n    const vao = gl.createVertexArray();\n\n    /** register VAO */\n    gl.bindVertexArray(vao);\n\n    // @ts-ignore\n    const { _indexBufferBinding } = this._primitive;\n    if (_indexBufferBinding) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _indexBufferBinding.buffer._nativeBuffer);\n    }\n    this.bindBufferAndAttrib(shaderProgram);\n\n    /** unbind */\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    this.disableAttrib();\n\n    this.vao.set(shaderProgram.id, vao);\n  }\n}\n","import {\n  GLCapabilityType,\n  IPlatformTexture,\n  Logger,\n  RenderBufferColorFormat,\n  RenderBufferDepthFormat,\n  Texture,\n  TextureCubeFace,\n  TextureFilterMode,\n  TextureFormat,\n  TextureWrapMode\n} from \"@oasis-engine/core\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Texture in WebGL platform.\n */\nexport class GLTexture implements IPlatformTexture {\n  /** @internal */\n  static _readFrameBuffer: WebGLFramebuffer = null;\n\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Get more texture info from TextureFormat.\n   * @internal\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.LuminanceAlpha:\n        return {\n          internalFormat: gl.LUMINANCE_ALPHA,\n          baseFormat: gl.LUMINANCE_ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.DXT1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.DXT5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getRenderBufferColorFormatDetail(\n    format: RenderBufferColorFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferColorFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R16G16B16A16:\n        return {\n          internalFormat: gl.RGBA16F,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      default:\n        throw new Error(`this RenderBufferColorFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * In WebGL 1, internalformat must be the same as baseFormat when call texImage2D.\n   * @internal\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: RenderBufferDepthFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferDepthFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this RenderBufferDepthFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * Check whether the corresponding texture format is supported.\n   * @internal\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi: WebGLRenderer): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: RenderBufferColorFormat, rhi: WebGLRenderer): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case RenderBufferColorFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case RenderBufferColorFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(\n    format: RenderBufferDepthFormat,\n    rhi: WebGLRenderer,\n    isTexture: boolean\n  ): boolean {\n    const isWebGL2: boolean = rhi.isWebGL2;\n    let isSupported = true;\n\n    if (isTexture && !rhi.canIUse(GLCapabilityType.depthTexture)) {\n      return false;\n    }\n\n    switch (format) {\n      case RenderBufferDepthFormat.Stencil:\n        {\n          isSupported = false;\n        }\n        break;\n      case RenderBufferDepthFormat.Depth24:\n      case RenderBufferDepthFormat.Depth32:\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        {\n          if (!isWebGL2) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /** @internal */\n  _texture: Texture;\n  /** @internal */\n  _glTexture: WebGLTexture;\n  /** @internal */\n  _rhi: WebGLRenderer;\n  /** @internal */\n  _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  /** @internal */\n  _isWebGL2: boolean;\n  /** @internal */\n  _target: GLenum; // gl.TEXTURE_2D | gl.TEXTURE_CUBE_MAP\n  /** @internal */\n  _formatDetail: TextureFormatDetail;\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  set wrapModeU(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_S);\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  set wrapModeV(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_T);\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  set filterMode(value: TextureFilterMode) {\n    const gl = this._gl;\n    const target = this._target;\n    /** @ts-ignore */\n    const { _mipmap } = this._texture;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  set anisoLevel(value: number) {\n    const gl = this._gl as WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n  }\n\n  /**\n   * Create texture in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, texture: Texture, target: GLenum) {\n    this._texture = texture;\n    this._rhi = rhi;\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n    this._glTexture = this._gl.createTexture();\n  }\n\n  /**\n   * Destroy texture.\n   */\n  destroy() {\n    this._gl.deleteTexture(this._glTexture);\n    this._texture = null;\n    this._glTexture = null;\n    this._formatDetail = null;\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    this._bind();\n    this._gl.generateMipmap(this._target);\n  }\n\n  protected _bind() {\n    this._rhi.bindTexture(this);\n  }\n\n  /**\n   * Pre-development mipmapping GPU memory.\n   */\n  protected _initMipmap(isCube: boolean): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n    const { mipmapCount, width, height } = this._texture;\n\n    this._bind();\n\n    if (isWebGL2 && !(baseFormat === gl.LUMINANCE_ALPHA || baseFormat === gl.ALPHA)) {\n      gl.texStorage2D(this._target, mipmapCount, internalFormat, width, height);\n    } else {\n      // In WebGL 1, internalformat must be the same as baseFormat\n      if (baseFormat !== internalFormat) {\n        internalFormat = baseFormat;\n      }\n\n      if (!isCube) {\n        for (let i = 0; i < mipmapCount; i++) {\n          const mipWidth = Math.max(1, width >> i);\n          const mipHeight = Math.max(1, height >> i);\n\n          gl.texImage2D(this._target, i, internalFormat, mipWidth, mipHeight, 0, baseFormat, dataType, null);\n        }\n      } else {\n        for (let i = 0; i < mipmapCount; i++) {\n          const size = Math.max(1, width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   * @param mipLevel - Set mip level the data want to get from\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    if (!GLTexture._readFrameBuffer) {\n      GLTexture._readFrameBuffer = gl.createFramebuffer();\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, GLTexture._readFrameBuffer);\n\n    if (mipLevel > 0 && !this._isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        mipLevel\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, mipLevel);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const target = this._target;\n    const { width, height } = this._texture;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n}\n","import {\n  IPlatformRenderColorTexture,\n  Logger,\n  RenderBufferColorFormat,\n  RenderColorTexture,\n  TextureCubeFace\n} from \"@oasis-engine/core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * The texture in WebGL platform is used for the output of color information in off-screen rendering.\n */\nexport class GLRenderColorTexture extends GLTexture implements IPlatformRenderColorTexture {\n  /**\n   * Create render color texture in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, texture: RenderColorTexture) {\n    super(rhi, texture, texture.isCube ? rhi.gl.TEXTURE_CUBE_MAP : rhi.gl.TEXTURE_2D);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width, height, isCube } = texture;\n\n    const isWebGL2 = this._isWebGL2;\n\n    if (!GLTexture._supportRenderBufferColorFormat(format, rhi)) {\n      throw new Error(`RenderBufferColorFormat is not supported:${RenderBufferColorFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n\n    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      texture._mipmap = false;\n      /** @ts-ignore */\n      texture._mipmapCount = texture._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getRenderBufferColorFormatDetail(format, this._gl, isWebGL2);\n    this._initMipmap(isCube);\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read if it's cube texture\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Set mip level the data want to get from\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    super._getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n","import { IPlatformRenderDepthTexture, Logger, RenderBufferDepthFormat, RenderDepthTexture } from \"@oasis-engine/core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * The texture in WebGL platform is used for the output of depth information in off-screen rendering.\n */\nexport class GLRenderDepthTexture extends GLTexture implements IPlatformRenderDepthTexture {\n  /**\n   * Create render depth texture in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, texture: RenderDepthTexture) {\n    super(rhi, texture, texture.isCube ? rhi.gl.TEXTURE_CUBE_MAP : rhi.gl.TEXTURE_2D);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width, height, isCube } = texture;\n    const isWebGL2 = this._isWebGL2;\n\n    if (!GLTexture._supportRenderBufferDepthFormat(format, rhi, true)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n\n    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      texture._mipmap = false;\n      /** @ts-ignore */\n      texture._mipmapCount = texture._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getRenderBufferDepthFormatDetail(format, this._gl, isWebGL2);\n    this._initMipmap(isCube);\n  }\n}\n","/**\n * @private\n */\nexport class GLRenderStates {\n  private _gl: WebGLRenderingContext;\n  private _parameters = {};\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this._gl = gl;\n    this._parameters = {}; // current gl state parameters\n\n    /** cache */\n    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_TEXTURE_SIZE] = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n    // init blend state same as BlendState default value.\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    gl.colorMask(true, true, true, true);\n    gl.blendColor(0, 0, 0, 0);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n    // init depth state same as DepthState default value.\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.depthMask(true);\n\n    // init stencil state same as StencilState default value.\n    gl.disable(gl.STENCIL_TEST);\n    gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 0, 0xff);\n    gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 0, 0xff);\n    gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilMask(0xff);\n\n    // init raster state same as RasterState default value.\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(0, 0);\n  }\n\n  /**\n   * Get a parameter.\n   */\n  getParameter(pname) {\n    return this._parameters[pname];\n  }\n}\n","import {\n  GLCapabilityType,\n  IPlatformRenderTarget,\n  Logger,\n  RenderBufferDepthFormat,\n  RenderColorTexture,\n  RenderDepthTexture,\n  RenderTarget,\n  TextureCubeFace\n} from \"@oasis-engine/core\";\nimport { GLRenderColorTexture } from \"./GLRenderColorTexture\";\nimport { GLRenderDepthTexture } from \"./GLRenderDepthTexture\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * The render target in WebGL platform is used for off-screen rendering.\n */\nexport class GLRenderTarget implements IPlatformRenderTarget {\n  private _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  private _isWebGL2: boolean;\n  private _target: RenderTarget;\n  private _frameBuffer: WebGLFramebuffer;\n  private _MSAAFrameBuffer: WebGLFramebuffer | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n  private _curMipLevel: number = 0;\n\n  /**\n   * Create render target in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, target: RenderTarget) {\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n\n    /** @ts-ignore */\n    const { _colorTextures, _depth, width, height } = target;\n\n    /** todo\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n\n    if (!(_depth instanceof RenderDepthTexture) && !GLTexture._supportRenderBufferDepthFormat(_depth, rhi, false)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[_depth]}`);\n    }\n\n    if (_colorTextures.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    if (_colorTextures.some((v: RenderColorTexture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"RenderColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (_depth instanceof RenderDepthTexture && (_depth.width !== width || _depth.height !== height)) {\n      throw new Error(\"RenderDepthTexture's size must as same as RenderTarget\");\n    }\n\n    // todo: necessary to support MRT + Cube + [,MSAA] ?\n    if (_colorTextures.length > 1 && _colorTextures.some((v: RenderColorTexture) => v.isCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (target.antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n\n      /** @ts-ignore */\n      target._antiAliasing = maxAntiAliasing;\n    }\n\n    this._frameBuffer = this._gl.createFramebuffer();\n\n    // bind main FBO\n    this._bindMainFBO();\n\n    // bind MSAA FBO\n    if (target.antiAliasing > 1) {\n      this._MSAAFrameBuffer = this._gl.createFramebuffer();\n      this._bindMSAAFBO();\n    }\n  }\n\n  /**\n   * Set which face and mipLevel of the cube texture to render to.\n   * @param faceIndex - Cube texture face\n   * @param mipLevel - Set mip level the data want to write\n   */\n  setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    const { _gl: gl, _target: target } = this;\n    const { depthTexture } = target;\n    const colorTexture = target.getColorTexture(0);\n    const mipChanged = mipLevel !== this._curMipLevel;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    if (colorTexture) {\n      const isCube = colorTexture.isCube;\n      if (mipChanged || isCube) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          /** @ts-ignore */\n          (colorTexture._platformTexture as GLRenderColorTexture)._glTexture,\n          mipLevel\n        );\n      }\n    }\n    if (depthTexture) {\n      const isCube = depthTexture.isCube;\n      if (mipChanged || isCube) {\n        /** @ts-ignore */\n        const { _platformTexture: platformTexture } = depthTexture;\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          platformTexture._formatDetail.attachment,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          platformTexture._glTexture,\n          mipLevel\n        );\n      }\n    } else {\n      if (mipChanged) {\n        // @ts-ignore\n        const { internalFormat } = GLTexture._getRenderBufferDepthFormatDetail(target._depth, gl, this._isWebGL2);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, target.width >> mipLevel, target.height >> mipLevel);\n      }\n    }\n    this._curMipLevel = mipLevel;\n\n    // revert current activated render target\n    this._activeRenderTarget();\n  }\n\n  /**\n   * Blit FBO.\n   */\n  blitRenderTarget(): void {\n    if (!this._MSAAFrameBuffer) return;\n\n    const gl = this._gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._target.depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const { colorTextureCount, width, height } = this._target;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureCount; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy(): void {\n    const gl = this._gl;\n\n    this._frameBuffer && gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._frameBuffer = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  /**\n   * Activate this RenderTarget.\n   * @internal\n   * @remarks\n   * If MSAA is turned on, MSAA FBO is activated, and then this._blitRenderTarget() is performed to exchange FBO.\n   * If MSAA is not turned on, activate the main FBO.\n   */\n  _activeRenderTarget(): void {\n    const gl = this._gl;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n    }\n  }\n\n  private _bindMainFBO(): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, width, height } = this._target;\n    const drawBuffers = new Array(colorTextureCount);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** color render buffer */\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._target.getColorTexture(i);\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      if (!colorTexture.isCube) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          attachment,\n          gl.TEXTURE_2D,\n          /** @ts-ignore */\n          (colorTexture._platformTexture as GLRenderColorTexture)._glTexture,\n          0\n        );\n      }\n    }\n\n    if (colorTextureCount > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** depth render buffer */\n    if (_depth !== null) {\n      if (_depth instanceof RenderDepthTexture) {\n        if (!_depth.isCube) {\n          gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            /** @ts-ignore */\n            (_depth._platformTexture as GLRenderDepthTexture)._formatDetail.attachment,\n            gl.TEXTURE_2D,\n            /** @ts-ignore */\n            (_depth._platformTexture as GLRenderDepthTexture)._glTexture,\n            0\n          );\n        }\n      } else if (this._target.antiAliasing <= 1) {\n        const { internalFormat, attachment } = GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _bindMSAAFBO(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, antiAliasing, width, height } = this._target;\n\n    this._blitDrawBuffers = new Array(colorTextureCount);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureCount; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        antiAliasing,\n        /** @ts-ignore */\n        (this._target.getColorTexture(i)._platformTexture as GLRenderColorTexture)._formatDetail.internalFormat,\n        width,\n        height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // prepare MSAA depth RBO\n    if (_depth !== null) {\n      const { internalFormat, attachment } =\n        _depth instanceof RenderDepthTexture\n          ? /** @ts-ignore */\n            (_depth._platformTexture as GLRenderDepthTexture)._formatDetail\n          : GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, antiAliasing, internalFormat, width, height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _checkFrameBuffer(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n","import { IPlatformTexture2D, Logger, Texture2D, TextureFormat } from \"@oasis-engine/core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Texture 2d in WebGL platform.\n */\nexport class GLTexture2D extends GLTexture implements IPlatformTexture2D {\n  /**\n   * Backward compatible with WebGL1.0.\n   */\n  private _compressedMipFilled: number = 0;\n\n  /**\n   * Create texture2D in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, texture2D: Texture2D) {\n    super(rhi, texture2D, rhi.gl.TEXTURE_2D);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width, height } = texture2D;\n    const isWebGL2 = this._isWebGL2;\n\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      texture2D._mipmap = false;\n      /** @ts-ignore */\n      texture2D._mipmapCount = texture2D._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._initMipmap(false);\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._texture.width >> mipLevel);\n    const mipHeight = Math.max(1, this._texture.height >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Set mip level the data want to get from\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, mipLevel, out);\n  }\n}\n","import { IPlatformTextureCubeMap, Logger, TextureCubeFace, TextureCubeMap, TextureFormat } from \"@oasis-engine/core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Cube texture in WebGL platform.\n */\nexport class GLTextureCubeMap extends GLTexture implements IPlatformTextureCubeMap {\n  /**\n   * Backward compatible with WebGL1.0.。\n   */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  /**\n   * Create cube texture in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, textureCube: TextureCubeMap) {\n    super(rhi, textureCube, rhi.gl.TEXTURE_CUBE_MAP);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width: size } = textureCube;\n    const isWebGL2 = this._isWebGL2;\n\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && !GLTexture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      textureCube._mipmap = false;\n      /** @ts-ignore */\n      textureCube._mipmapCount = textureCube._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._initMipmap(true);\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._texture.width >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Set mip level the data want to get from\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n","import {\n  Camera, CameraClearFlags, Canvas,\n  ColorWriteMask,\n  Engine,\n  GLCapabilityType,\n  IHardwareRenderer,\n  IPlatformRenderColorTexture,\n  IPlatformRenderDepthTexture,\n  IPlatformRenderTarget,\n  IPlatformTexture2D,\n  IPlatformTextureCubeMap,\n  Logger,\n  Mesh,\n  RenderColorTexture,\n  RenderDepthTexture,\n  RenderTarget,\n  SubMesh,\n  Texture2D,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\nimport { IPlatformPrimitive } from \"@oasis-engine/design\";\nimport { Color, Vector4 } from \"@oasis-engine/math\";\nimport { GLCapability } from \"./GLCapability\";\nimport { GLExtensions } from \"./GLExtensions\";\nimport { GLPrimitive } from \"./GLPrimitive\";\nimport { GLRenderColorTexture } from \"./GLRenderColorTexture\";\nimport { GLRenderDepthTexture } from \"./GLRenderDepthTexture\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLRenderTarget } from \"./GLRenderTarget\";\nimport { GLTexture } from \"./GLTexture\";\nimport { GLTexture2D } from \"./GLTexture2D\";\nimport { GLTextureCubeMap } from \"./GLTextureCubeMap\";\nimport { WebGLExtension } from \"./type\";\nimport { WebCanvas } from \"./WebCanvas\";\n\n/**\n * WebGL mode.\n */\nexport enum WebGLMode {\n  /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */\n  Auto = 0,\n  /** WebGL2.0. */\n  WebGL2 = 1,\n  /** WebGL1.0, */\n  WebGL1 = 2\n}\n\n/**\n * WebGL renderer options.\n */\nexport interface WebGLRendererOptions extends WebGLContextAttributes {\n  /** WebGL mode.*/\n  webGLMode?: WebGLMode;\n}\n\n/**\n * WebGL renderer, including WebGL1.0 and WebGL2.0.\n */\nexport class WebGLRenderer implements IHardwareRenderer {\n  _currentBind: any;\n\n  private _options: WebGLRendererOptions;\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _renderStates;\n  private _extensions;\n  private _capability: GLCapability;\n  private _isWebGL2: boolean;\n\n  private _activeTextureID: number;\n  private _activeTextures: GLTexture[] = new Array(32);\n\n  // cache value\n  private _lastViewport: Vector4 = new Vector4(null, null, null, null);\n  private _lastClearColor: Color = new Color(null, null, null, null);\n\n  get isWebGL2() {\n    return this._isWebGL2;\n  }\n\n  /**\n   * GL Context\n   * @member {WebGLRenderingContext}\n   */\n  get gl() {\n    return this._gl;\n  }\n\n  get renderStates(): GLRenderStates {\n    return this._renderStates;\n  }\n\n  get capability(): GLCapability {\n    return this._capability;\n  }\n\n  get canIUseMoreJoints() {\n    return this.capability.canIUseMoreJoints;\n  }\n\n  constructor(options: WebGLRendererOptions = {}) {\n    this._options = options;\n  }\n\n  init(canvas: Canvas) {\n    const option = this._options;\n    option.alpha === undefined && (option.alpha = false);\n    option.stencil === undefined && (option.stencil = true);\n\n    const webCanvas = (canvas as WebCanvas)._webCanvas;\n    const webGLMode = option.webGLMode || WebGLMode.Auto;\n    let gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n\n    if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL2) {\n      gl = webCanvas.getContext(\"webgl2\", option);\n      if (!gl && webCanvas instanceof HTMLCanvasElement) {\n        gl = <WebGL2RenderingContext>webCanvas.getContext(\"experimental-webgl2\", option);\n      }\n      this._isWebGL2 = true;\n\n      // Prevent weird browsers to lie (such as safari!)\n      if (gl && !(<WebGL2RenderingContext>gl).deleteQuery) {\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL1) {\n        gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"webgl\", option);\n        if (!gl && webCanvas instanceof HTMLCanvasElement) {\n          gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"experimental-webgl\", option);\n        }\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      throw new Error(\"Get GL Context FAILED.\");\n    }\n\n    this._gl = gl;\n    this._activeTextureID = gl.TEXTURE0;\n    this._renderStates = new GLRenderStates(gl);\n    this._extensions = new GLExtensions(this);\n    this._capability = new GLCapability(this);\n    // Make sure the active texture in gl context is on default, because gl context may be used in other webgl renderer.\n    gl.activeTexture(gl.TEXTURE0);\n\n    this._options = null;\n  }\n\n  createPlatformPrimitive(primitive: Mesh): IPlatformPrimitive {\n    return new GLPrimitive(this, primitive);\n  }\n\n  createPlatformTexture2D(texture2D: Texture2D): IPlatformTexture2D {\n    return new GLTexture2D(this, texture2D);\n  }\n\n  createPlatformTextureCubeMap(textureCube: TextureCubeMap): IPlatformTextureCubeMap {\n    return new GLTextureCubeMap(this, textureCube);\n  }\n\n  createPlatformRenderColorTexture(texture: RenderColorTexture): IPlatformRenderColorTexture {\n    return new GLRenderColorTexture(this, texture);\n  }\n\n  createPlatformRenderDepthTexture(texture: RenderDepthTexture): IPlatformRenderDepthTexture {\n    return new GLRenderDepthTexture(this, texture);\n  }\n\n  createPlatformRenderTarget(target: RenderTarget): IPlatformRenderTarget {\n    return new GLRenderTarget(this, target);\n  }\n\n  requireExtension(ext) {\n    return this._extensions.requireExtension(ext);\n  }\n\n  canIUse(capabilityType: GLCapabilityType) {\n    return this.capability.canIUse(capabilityType);\n  }\n\n  canIUseCompressedTextureInternalFormat(type: number) {\n    return this.capability.canIUseCompressedTextureInternalFormat(type);\n  }\n\n  viewport(x: number, y: number, width: number, height: number): void {\n    // gl.enable(gl.SCISSOR_TEST);\n    // gl.scissor(x, transformY, width, height);\n    const gl = this._gl;\n    const lv = this._lastViewport;\n\n    if (x !== lv.x || y !== lv.y || width !== lv.z || height !== lv.w) {\n      gl.viewport(x, y, width, height);\n      lv.setValue(x, y, width, height);\n    }\n  }\n\n  colorMask(r, g, b, a) {\n    this._gl.colorMask(r, g, b, a);\n  }\n\n  clearRenderTarget(\n    engine: Engine,\n    clearFlags: CameraClearFlags.Depth | CameraClearFlags.DepthColor,\n    clearColor: Color\n  ) {\n    const gl = this._gl;\n    const {\n      blendState: { targetBlendState },\n      depthState,\n      stencilState\n    } = engine._lastRenderState;\n\n    let clearFlag = gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT;\n\n    if (clearFlags === CameraClearFlags.DepthColor) {\n      clearFlag |= gl.COLOR_BUFFER_BIT;\n\n      const lc = this._lastClearColor;\n      const { r, g, b, a } = clearColor;\n\n      if (clearColor && (r !== lc.r || g !== lc.g || b !== lc.b || a !== lc.a)) {\n        gl.clearColor(r, g, b, a);\n        lc.setValue(r, g, b, a);\n      }\n\n      if (targetBlendState.colorWriteMask !== ColorWriteMask.All) {\n        gl.colorMask(true, true, true, true);\n        targetBlendState.colorWriteMask = ColorWriteMask.All;\n      }\n    }\n\n    if (depthState.writeEnabled !== true) {\n      gl.depthMask(true);\n      depthState.writeEnabled = true;\n    }\n\n    if (stencilState.writeMask !== 0xff) {\n      gl.stencilMask(0xff);\n      stencilState.writeMask = 0xff;\n    }\n\n    gl.clear(clearFlag);\n  }\n\n  drawPrimitive(primitive: Mesh, subPrimitive: SubMesh, shaderProgram: any) {\n    // todo: VAO not support morph animation\n    if (primitive) {\n      //@ts-ignore\n      primitive._draw(shaderProgram, subPrimitive);\n    } else {\n      Logger.error(\"draw primitive failed.\");\n    }\n  }\n\n  activeRenderTarget(renderTarget: RenderTarget, camera: Camera, mipLevel: number) {\n    const gl = this._gl;\n    if (renderTarget) {\n      /** @ts-ignore */\n      (renderTarget._platformRenderTarget as GLRenderTarget)?._activeRenderTarget();\n      const { width, height } = renderTarget;\n      this.viewport(0, 0, width >> mipLevel, height >> mipLevel);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const viewport = camera.viewport;\n      const { drawingBufferWidth, drawingBufferHeight } = gl;\n      const width = drawingBufferWidth * viewport.z;\n      const height = drawingBufferHeight * viewport.w;\n      const x = viewport.x * drawingBufferWidth;\n      const y = drawingBufferHeight - viewport.y * drawingBufferHeight - height;\n      this.viewport(x, y, width, height);\n    }\n  }\n\n  destroy() {}\n\n  activeTexture(textureID: number): void {\n    if (this._activeTextureID !== textureID) {\n      this._gl.activeTexture(textureID);\n      this._activeTextureID = textureID;\n    }\n  }\n\n  bindTexture(texture: GLTexture): void {\n    const index = this._activeTextureID - this._gl.TEXTURE0;\n    if (this._activeTextures[index] !== texture) {\n      this._gl.bindTexture(texture._target, texture._glTexture);\n      this._activeTextures[index] = texture;\n    }\n  }\n}\n","import { Engine } from \"@oasis-engine/core\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLRenderer, WebGLRendererOptions } from \"./WebGLRenderer\";\nimport { IPhysics } from \"@oasis-engine/design\";\n\ntype OffscreenCanvas = any;\n\n/**\n * WebGL platform engine,support includes WebGL1.0 and WebGL2.0.\n */\nexport class WebGLEngine extends Engine {\n  /**\n   * Create an engine suitable for the WebGL platform.\n   * @param canvas - Native web canvas\n   * @param physics - Physics Engine\n   * @param webGLRendererOptions - WebGL renderer options\n   */\n  constructor(\n    canvas: string | HTMLCanvasElement | OffscreenCanvas,\n    physics?: IPhysics,\n    webGLRendererOptions?: WebGLRendererOptions\n  ) {\n    const webCanvas = new WebCanvas(\n      <HTMLCanvasElement | OffscreenCanvas>(typeof canvas === \"string\" ? document.getElementById(canvas) : canvas)\n    );\n    const hardwareRenderer = new WebGLRenderer(webGLRendererOptions);\n    super(webCanvas, hardwareRenderer, physics);\n  }\n\n  /**\n   * Web canvas.\n   */\n  get canvas(): WebCanvas {\n    return this._canvas as WebCanvas;\n  }\n}\n"],"names":["GLCompressedTextureInternalFormat","WebCanvas","resizeByClientSize","pixelRatio","window","devicePixelRatio","webCanvas","_webCanvas","HTMLCanvasElement","width","clientWidth","height","clientHeight","_width","_height","_scale","Vector2","setScale","x","y","setValue","scale","value","style","transformOrigin","transform","GLCapability","rhi","_maxDrawBuffers","_maxAnisoLevel","_maxAntiAliasing","_rhi","capabilityList","Map","_init","_compatibleAllInterface","canIUse","capabilityType","get","canIUseCompressedTextureInternalFormat","internalType","RGBA_ASTC_4X4_KHR","RGBA_ASTC_12X12_KHR","SRGB8_ALPHA8_ASTC_4X4_KHR","SRGB8_ALPHA8_ASTC_12X12_KHR","RGB_ETC1_WEBGL","R11_EAC","SRGB8_ALPHA8_ETC2_EAC","RGB_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_IMG","RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT5_EXT","GLCapabilityType","astc","etc1","etc","pvrtc","s3tc","cap","isWebGL2","requireExtension","bind","shaderVertexID","standardDerivatives","shaderTextureLod","elementIndexUint","depthTexture","vertexArrayObject","instancedArrays","multipleSample","drawBuffers","astc_webkit","etc_webkit","etc1_webkit","pvrtc_webkit","s3tc_webkit","textureFloat","textureHalfFloat","textureFloatLinear","textureHalfFloatLinear","WEBGL_colorBufferFloat","colorBufferFloat","colorBufferHalfFloat","textureFilterAnisotropic","set","_compatibleInterface","flatItem","gl","ext","glKey","extensionKey","extensionVal","UNSIGNED_INT_24_8","createVertexArray","deleteVertexArray","isVertexArray","bindVertexArray","drawArraysInstanced","drawElementsInstanced","vertexAttribDivisor","MAX_DRAW_BUFFERS","items","maxDrawBuffers","i","_objectSpread","HAFL_FLOAT","RGBA16F","RGBA32F","TEXTURE_MAX_ANISOTROPY_EXT","renderStates","getParameter","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_MAX_ANISOTROPY_EXT","canMSAA","MAX_SAMPLES","GLExtensions","_requireResult","undefined","getExtension","GLPrimitive","primitive","attribLocArray","_primitive","canUseInstancedArrays","vao","_useVao","draw","shaderProgram","subMesh","has","id","registerVAO","bindBufferAndAttrib","_indexBufferBinding","_instanceCount","_glIndexType","_glIndexByteCount","topology","start","count","drawElements","_nativeBuffer","buffer","bindBuffer","ELEMENT_ARRAY_BUFFER","drawArrays","Logger","error","disableAttrib","destroy","forEach","clear","vertexBufferBindings","_vertexBufferBindings","attributeLocation","attributes","_vertexElementMap","vbo","lastBoundVbo","name","loc","element","bindingIndex","stride","ARRAY_BUFFER","enableVertexAttribArray","_glElementInfo","size","type","normalized","vertexAttribPointer","offset","instanceStepRate","push","warn","l","length","disableVertexAttribArray","GLTexture","_isPowerOf2","v","_getFormatDetail","format","TextureFormat","R8G8B8","internalFormat","RGB8","RGB","baseFormat","dataType","UNSIGNED_BYTE","isCompressed","R8G8B8A8","RGBA8","RGBA","R4G4B4A4","RGBA4","UNSIGNED_SHORT_4_4_4_4","R5G5B5A1","RGB5_A1","UNSIGNED_SHORT_5_5_5_1","R5G6B5","RGB565","UNSIGNED_SHORT_5_6_5","Alpha8","ALPHA","LuminanceAlpha","LUMINANCE_ALPHA","R32G32B32A32","FLOAT","DXT1","DXT5","ETC1_RGB","ETC2_RGB","RGB8_ETC2","ETC2_RGBA5","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA8","RGBA8_ETC2_EAC","PVRTC_RGB2","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","PVRTC_RGB4","PVRTC_RGBA4","RGBA_PVRTC_4BPPV1_IMG","ASTC_4x4","ASTC_5x5","RGBA_ASTC_5X5_KHR","ASTC_6x6","RGBA_ASTC_6X6_KHR","ASTC_8x8","RGBA_ASTC_8X8_KHR","ASTC_10x10","RGBA_ASTC_10X10_KHR","ASTC_12x12","Error","_getRenderBufferColorFormatDetail","RenderBufferColorFormat","R16G16B16A16","HALF_FLOAT","_getRenderBufferDepthFormatDetail","RenderBufferDepthFormat","Depth","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_COMPONENT","UNSIGNED_INT","attachment","DEPTH_ATTACHMENT","DepthStencil","DEPTH24_STENCIL8","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","Stencil","STENCIL_INDEX8","STENCIL_ATTACHMENT","Depth16","Depth24","DEPTH_COMPONENT24","Depth32","Depth24Stencil8","Depth32Stencil8","DEPTH32F_STENCIL8","FLOAT_32_UNSIGNED_INT_24_8_REV","_supportTextureFormat","isSupported","_supportRenderBufferColorFormat","_supportRenderBufferDepthFormat","isTexture","texture","target","_texture","_glTexture","_gl","_isWebGL2","_target","_formatDetail","createTexture","deleteTexture","generateMipmaps","_bind","generateMipmap","bindTexture","_initMipmap","isCube","mipmapCount","texStorage2D","mipWidth","Math","max","mipHeight","texImage2D","faceIndex","TEXTURE_CUBE_MAP_POSITIVE_X","_getPixelBuffer","face","mipLevel","out","_readFrameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","readPixels","_setWrapMode","pname","TextureWrapMode","Clamp","texParameteri","CLAMP_TO_EDGE","Repeat","REPEAT","Mirror","MIRRORED_REPEAT","TEXTURE_WRAP_S","TEXTURE_WRAP_T","_mipmap","TextureFilterMode","Point","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","NEAREST_MIPMAP_NEAREST","Bilinear","LINEAR","LINEAR_MIPMAP_NEAREST","Trilinear","LINEAR_MIPMAP_LINEAR","texParameterf","GLRenderColorTexture","TEXTURE_CUBE_MAP","_mipmapCount","_getMipmapCount","getPixelBuffer","GLRenderDepthTexture","GLRenderStates","_parameters","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_SIZE","blendFuncSeparate","ONE","ZERO","blendEquationSeparate","FUNC_ADD","colorMask","blendColor","disable","SAMPLE_ALPHA_TO_COVERAGE","enable","DEPTH_TEST","depthFunc","LESS","depthMask","STENCIL_TEST","stencilFuncSeparate","FRONT","ALWAYS","BACK","stencilOpSeparate","KEEP","stencilMask","CULL_FACE","cullFace","POLYGON_OFFSET_FILL","polygonOffset","GLRenderTarget","_frameBuffer","_MSAAFrameBuffer","_depthRenderBuffer","_MSAAColorRenderBuffers","_MSAADepthRenderBuffer","_oriDrawBuffers","_blitDrawBuffers","_curMipLevel","_colorTextures","_depth","RenderDepthTexture","some","maxAntiAliasing","capability","antiAliasing","_antiAliasing","_bindMainFBO","_bindMSAAFBO","setRenderTargetInfo","colorTexture","getColorTexture","mipChanged","_platformTexture","platformTexture","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","_activeRenderTarget","blitRenderTarget","mask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","colorTextureCount","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","textureIndex","readBuffer","blitFramebuffer","NONE","deleteFramebuffer","deleteRenderbuffer","Array","depthRenderBuffer","createRenderbuffer","framebufferRenderbuffer","MSAADepthRenderBuffer","MSAAColorRenderBuffer","renderbufferStorageMultisample","_checkFrameBuffer","e","checkFramebufferStatus","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","GLTexture2D","texture2D","_compressedMipFilled","setPixelBuffer","colorBuffer","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","mipBit","compressedTexSubImage2D","compressedTexImage2D","texSubImage2D","setImageSource","imageSource","flipY","premultiplyAlpha","GLTextureCubeMap","textureCube","_compressedFaceFilled","mipSize","WebGLMode","WebGLRenderer","options","_currentBind","_options","_renderStates","_extensions","_capability","_activeTextureID","_activeTextures","_lastViewport","Vector4","_lastClearColor","Color","init","canvas","option","alpha","stencil","webGLMode","Auto","WebGL2","getContext","deleteQuery","WebGL1","TEXTURE0","activeTexture","createPlatformPrimitive","createPlatformTexture2D","createPlatformTextureCubeMap","createPlatformRenderColorTexture","createPlatformRenderDepthTexture","createPlatformRenderTarget","viewport","lv","z","w","r","g","b","a","clearRenderTarget","engine","clearFlags","clearColor","_lastRenderState","targetBlendState","blendState","depthState","stencilState","clearFlag","STENCIL_BUFFER_BIT","CameraClearFlags","DepthColor","lc","colorWriteMask","ColorWriteMask","All","writeEnabled","writeMask","drawPrimitive","subPrimitive","_draw","activeRenderTarget","renderTarget","camera","_platformRenderTarget","drawingBufferWidth","drawingBufferHeight","textureID","index","canIUseMoreJoints","WebGLEngine","physics","webGLRendererOptions","document","getElementById","hardwareRenderer","_canvas","Engine"],"mappings":"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"}