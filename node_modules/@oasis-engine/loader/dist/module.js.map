{"version":3,"file":"module.js","sources":["../src/BufferLoader.ts","../src/gltf/Schema.ts","../src/gltf/GLTFUtil.ts","../src/gltf/parser/Parser.ts","../src/gltf/parser/AnimationParser.ts","../src/gltf/parser/BufferParser.ts","../src/gltf/parser/EntityParser.ts","../src/gltf/parser/MaterialParser.ts","../src/gltf/parser/MeshParser.ts","../src/gltf/parser/SceneParser.ts","../src/gltf/parser/SkinParser.ts","../src/gltf/parser/TextureParser.ts","../src/gltf/parser/Validator.ts","../src/gltf/GLTFParser.ts","../src/gltf/GLTFResource.ts","../src/GLTFLoader.ts","../src/JSONLoader.ts","../src/compressed-texture/KhronosTextureContainer.ts","../src/compressed-texture/index.ts","../src/KTXCubeLoader.ts","../src/KTXLoader.ts","../src/Texture2DLoader.ts","../src/TextureCubeLoader.ts","../src/SpriteAtlasLoader.ts","../src/EnvLoader.ts","../src/gltf/extensions/ExtensionParser.ts","../src/gltf/extensions/KHR_draco_mesh_compression.ts","../src/gltf/extensions/KHR_lights_punctual.ts","../src/gltf/extensions/KHR_materials_pbrSpecularGlossiness.ts","../src/gltf/extensions/KHR_materials_unlit.ts","../src/gltf/extensions/KHR_materials_variants.ts","../src/gltf/extensions/KHR_mesh_quantization.ts","../src/gltf/extensions/KHR_texture_transform.ts","../src/scene-loader/GLTFModel.ts","../src/scene-loader/Model.ts","../src/scene-loader/plugins/PluginManager.ts","../src/scene-loader/temp.compatible.ts","../src/scene-loader/Parser.ts","../src/scene-loader/utils.ts","../src/scene-loader/resources/SchemaResource.ts","../src/scene-loader/resources/AnimationClipResource.ts","../src/scene-loader/resources/AnimatorControllerResource.ts","../src/scene-loader/resources/TextureResource.ts","../src/scene-loader/resources/BlinnPhongMaterialResource.ts","../src/scene-loader/resources/PBRMaterialResource.ts","../src/scene-loader/resources/PBRSpecularMaterialResource.ts","../src/scene-loader/resources/UnlitMaterialResource.ts","../src/scene-loader/resources/GLTFResource.ts","../src/scene-loader/resources/ScriptResource.ts","../src/scene-loader/resources/SpriteResource.ts","../src/scene-loader/resources/TextureCubeMapResource.ts","../src/scene-loader/resources/BaseResource.ts","../src/scene-loader/resources/AmbientLightResource.ts","../src/scene-loader/ColliderConfigure.ts","../src/scene-loader/AbilityManager.ts","../src/scene-loader/NodeManager.ts","../src/scene-loader/SceneManager.ts","../src/scene-loader/resources/SpriteAtlasResource.ts","../src/scene-loader/ResourceManager.ts","../src/scene-loader/Oasis.ts"],"sourcesContent":["import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    return this.request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n","/**\n * Module for glTF 2.0 Interface\n */\n\nimport { MeshTopology } from \"@oasis-engine/core\";\n\n/**\n * The datatype of the components in the attribute\n */\nexport enum AccessorComponentType {\n  /**\n   * Byte\n   */\n  BYTE = 5120,\n  /**\n   * Unsigned Byte\n   */\n  UNSIGNED_BYTE = 5121,\n  /**\n   * Short\n   */\n  SHORT = 5122,\n  /**\n   * Unsigned Short\n   */\n  UNSIGNED_SHORT = 5123,\n  /**\n   * Unsigned Int\n   */\n  UNSIGNED_INT = 5125,\n  /**\n   * Float\n   */\n  FLOAT = 5126\n}\n\n/**\n * Specifies if the attirbute is a scalar, vector, or matrix\n */\nexport enum AccessorType {\n  /**\n   * Scalar\n   */\n  SCALAR = \"SCALAR\",\n  /**\n   * Vector2\n   */\n  VEC2 = \"VEC2\",\n  /**\n   * Vector3\n   */\n  VEC3 = \"VEC3\",\n  /**\n   * Vector4\n   */\n  VEC4 = \"VEC4\",\n  /**\n   * Matrix2x2\n   */\n  MAT2 = \"MAT2\",\n  /**\n   * Matrix3x3\n   */\n  MAT3 = \"MAT3\",\n  /**\n   * Matrix4x4\n   */\n  MAT4 = \"MAT4\"\n}\n\n/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\nexport enum AnimationChannelTargetPath {\n  /**\n   * Translation\n   */\n  TRANSLATION = \"translation\",\n  /**\n   * Rotation\n   */\n  ROTATION = \"rotation\",\n  /**\n   * Scale\n   */\n  SCALE = \"scale\",\n  /**\n   * Weights\n   */\n  WEIGHTS = \"weights\"\n}\n\n/**\n * Interpolation algorithm\n */\nexport enum AnimationSamplerInterpolation {\n  /**\n   * The animated values are linearly interpolated between keyframes\n   */\n  Linear = \"LINEAR\",\n  /**\n   * The animated values remain constant to the output of the first keyframe, until the next keyframe\n   */\n  Step = \"STEP\",\n  /**\n   * The animation's interpolation is computed using a cubic spline with specified tangents\n   */\n  CubicSpine = \"CUBICSPLINE\"\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport enum CameraType {\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  PERSPECTIVE = \"perspective\",\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  ORTHOGRAPHIC = \"orthographic\"\n}\n\n/**\n * The mime-type of the image\n */\nexport enum ImageMimeType {\n  /**\n   * JPEG Mime-type\n   */\n  JPEG = \"image/jpeg\",\n  /**\n   * PNG Mime-type\n   */\n  PNG = \"image/png\"\n}\n\n/**\n * The alpha rendering mode of the material\n */\nexport enum MaterialAlphaMode {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque\n   */\n  OPAQUE = \"OPAQUE\",\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value\n   */\n  MASK = \"MASK\",\n  /**\n   * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n   */\n  BLEND = \"BLEND\"\n}\n\n/**\n * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\nexport enum TextureMagFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729\n}\n\n/**\n * Minification filter.  All valid values correspond to WebGL enums\n */\nexport enum TextureMinFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729,\n  /**\n   * Nearest Mip-Map Nearest\n   */\n  NEAREST_MIPMAP_NEAREST = 9984,\n  /**\n   * Linear Mipmap Nearest\n   */\n  LINEAR_MIPMAP_NEAREST = 9985,\n  /**\n   * Nearest Mipmap Linear\n   */\n  NEAREST_MIPMAP_LINEAR = 9986,\n  /**\n   * Linear Mipmap Linear\n   */\n  LINEAR_MIPMAP_LINEAR = 9987\n}\n\n/**\n * S (U) wrapping mode.  All valid values correspond to WebGL enums\n */\nexport enum TextureWrapMode {\n  /**\n   * Clamp to Edge\n   */\n  CLAMP_TO_EDGE = 33071,\n  /**\n   * Mirrored Repeat\n   */\n  MIRRORED_REPEAT = 33648,\n  /**\n   * Repeat\n   */\n  REPEAT = 10497\n}\n\n/**\n * glTF Property\n */\nexport interface IProperty {\n  /**\n   * Dictionary object with extension-specific objects\n   */\n  extensions?: {\n    [key: string]: any;\n  };\n  /**\n   * Application-Specific data\n   */\n  extras?: any;\n}\n\n/**\n * glTF Child of Root Property\n */\nexport interface IChildRootProperty extends IProperty {\n  /**\n   * The user-defined name of this object\n   */\n  name?: string;\n}\n\n/**\n * Indices of those attributes that deviate from their initialization value\n */\nexport interface IAccessorSparseIndices extends IProperty {\n  /**\n   * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n  /**\n   * The indices data type.  Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n   */\n  componentType: AccessorComponentType;\n}\n\n/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\nexport interface IAccessorSparseValues extends IProperty {\n  /**\n   * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n}\n\n/**\n * Sparse storage of attributes that deviate from their initialization value\n */\nexport interface IAccessorSparse extends IProperty {\n  /**\n   * The number of attributes encoded in this sparse accessor\n   */\n  count: number;\n  /**\n   * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n   */\n  indices: IAccessorSparseIndices;\n  /**\n   * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n   */\n  values: IAccessorSparseValues;\n}\n\n/**\n * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\nexport interface IAccessor extends IChildRootProperty {\n  /**\n   * The index of the bufferview\n   */\n  bufferView?: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The datatype of components in the attribute\n   */\n  componentType: AccessorComponentType;\n  /**\n   * Specifies whether integer data values should be normalized\n   */\n  normalized?: boolean;\n  /**\n   * The number of attributes referenced by this accessor\n   */\n  count: number;\n  /**\n   * Specifies if the attribute is a scalar, vector, or matrix\n   */\n  type: AccessorType;\n  /**\n   * Maximum value of each component in this attribute\n   */\n  max?: number[];\n  /**\n   * Minimum value of each component in this attribute\n   */\n  min?: number[];\n  /**\n   * Sparse storage of attributes that deviate from their initialization value\n   */\n  sparse?: IAccessorSparse;\n}\n\n/**\n * Targets an animation's sampler at a node's property\n */\nexport interface IAnimationChannel extends IProperty {\n  /**\n   * The index of a sampler in this animation used to compute the value for the target\n   */\n  sampler: number;\n  /**\n   * The index of the node and TRS property to target\n   */\n  target: IAnimationChannelTarget;\n}\n\n/**\n * The index of the node and TRS property that an animation channel targets\n */\nexport interface IAnimationChannelTarget extends IProperty {\n  /**\n   * The index of the node to target\n   */\n  node: number;\n  /**\n   * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n   */\n  path: AnimationChannelTargetPath;\n}\n\n/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\nexport interface IAnimationSampler extends IProperty {\n  /**\n   * The index of an accessor containing keyframe input values, e.g., time\n   */\n  input: number;\n  /**\n   * Interpolation algorithm\n   */\n  interpolation?: AnimationSamplerInterpolation;\n  /**\n   * The index of an accessor, containing keyframe output values\n   */\n  output: number;\n}\n\n/**\n * A keyframe animation\n */\nexport interface IAnimation extends IChildRootProperty {\n  /**\n   * An array of channels, each of which targets an animation's sampler at a node's property\n   */\n  channels: IAnimationChannel[];\n  /**\n   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n   */\n  samplers: IAnimationSampler[];\n}\n\n/**\n * Metadata about the glTF asset\n */\nexport interface IAsset extends IChildRootProperty {\n  /**\n   * A copyright message suitable for display to credit the content creator\n   */\n  copyright?: string;\n  /**\n   * Tool that generated this glTF model.  Useful for debugging\n   */\n  generator?: string;\n  /**\n   * The glTF version that this asset targets\n   */\n  version: string;\n  /**\n   * The minimum glTF version that this asset targets\n   */\n  minVersion?: string;\n}\n\n/**\n * A buffer points to binary geometry, animation, or skins\n */\nexport interface IBuffer extends IChildRootProperty {\n  /**\n   * The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri\n   */\n  uri?: string;\n  /**\n   * The length of the buffer in bytes\n   */\n  byteLength: number;\n}\n\n/**\n * A view into a buffer generally representing a subset of the buffer\n */\nexport interface IBufferView extends IChildRootProperty {\n  /**\n   * The index of the buffer\n   */\n  buffer: number;\n  /**\n   * The offset into the buffer in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The lenth of the bufferView in bytes\n   */\n  byteLength: number;\n  /**\n   * The stride, in bytes\n   */\n  byteStride?: number;\n}\n\n/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\nexport interface ICameraOrthographic extends IProperty {\n  /**\n   * The floating-point horizontal magnification of the view. Must not be zero\n   */\n  xmag: number;\n  /**\n   * The floating-point vertical magnification of the view. Must not be zero\n   */\n  ymag: number;\n  /**\n   * The floating-point distance to the far clipping plane. zfar must be greater than znear\n   */\n  zfar: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\nexport interface ICameraPerspective extends IProperty {\n  /**\n   * The floating-point aspect ratio of the field of view\n   */\n  aspectRatio?: number;\n  /**\n   * The floating-point vertical field of view in radians\n   */\n  yfov: number;\n  /**\n   * The floating-point distance to the far clipping plane\n   */\n  zfar?: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport interface ICamera extends IChildRootProperty {\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  orthographic?: ICameraOrthographic;\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  perspective?: ICameraPerspective;\n  /**\n   * Specifies if the camera uses a perspective or orthographic projection\n   */\n  type: CameraType;\n}\n\n/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\nexport interface IImage extends IChildRootProperty {\n  /**\n   * The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png\n   */\n  uri?: string;\n  /**\n   * The image's MIME type\n   */\n  mimeType?: ImageMimeType;\n  /**\n   * The index of the bufferView that contains the image. Use this instead of the image's uri property\n   */\n  bufferView?: number;\n}\n\n/**\n * Material Normal Texture Info\n */\nexport interface IMaterialNormalTextureInfo extends ITextureInfo {\n  /**\n   * The scalar multiplier applied to each normal vector of the normal texture\n   */\n  scale?: number;\n}\n\n/**\n * Material Occlusion Texture Info\n */\nexport interface IMaterialOcclusionTextureInfo extends ITextureInfo {\n  /**\n   * A scalar multiplier controlling the amount of occlusion applied\n   */\n  strength?: number;\n}\n\n/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\nexport interface IMaterialPbrMetallicRoughness {\n  /**\n   * The material's base color factor\n   */\n  baseColorFactor?: number[];\n  /**\n   * The base color texture\n   */\n  baseColorTexture?: ITextureInfo;\n  /**\n   * The metalness of the material\n   */\n  metallicFactor?: number;\n  /**\n   * The roughness of the material\n   */\n  roughnessFactor?: number;\n  /**\n   * The metallic-roughness texture\n   */\n  metallicRoughnessTexture?: ITextureInfo;\n}\n\n/**\n * The material appearance of a primitive\n */\nexport interface IMaterial extends IChildRootProperty {\n  /**\n   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n   */\n  pbrMetallicRoughness?: IMaterialPbrMetallicRoughness;\n  /**\n   * The normal map texture\n   */\n  normalTexture?: IMaterialNormalTextureInfo;\n  /**\n   * The occlusion map texture\n   */\n  occlusionTexture?: IMaterialOcclusionTextureInfo;\n  /**\n   * The emissive map texture\n   */\n  emissiveTexture?: ITextureInfo;\n  /**\n   * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n   */\n  emissiveFactor?: number[];\n  /**\n   * The alpha rendering mode of the material\n   */\n  alphaMode?: MaterialAlphaMode;\n  /**\n   * The alpha cutoff value of the material\n   */\n  alphaCutoff?: number;\n  /**\n   * Specifies whether the material is double sided\n   */\n  doubleSided?: boolean;\n}\n\n/**\n * Geometry to be rendered with the given material\n */\nexport interface IMeshPrimitive extends IProperty {\n  /**\n   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n   */\n  attributes: {\n    [name: string]: number;\n  };\n  /**\n   * The index of the accessor that contains the indices\n   */\n  indices?: number;\n  /**\n   * The index of the material to apply to this primitive when rendering\n   */\n  material?: number;\n  /**\n   * The type of primitives to render. All valid values correspond to WebGL enums\n   */\n  mode?: MeshTopology;\n  /**\n   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n   */\n  targets?: {\n    [name: string]: number;\n  }[];\n}\n\n/**\n * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene\n */\nexport interface IMesh extends IChildRootProperty {\n  /**\n   * An array of primitives, each defining geometry to be rendered with a material\n   */\n  primitives: IMeshPrimitive[];\n  /**\n   * Array of weights to be applied to the Morph Targets\n   */\n  weights?: number[];\n}\n\n/**\n * A node in the node hierarchy\n */\nexport interface INode extends IChildRootProperty {\n  /**\n   * The index of the camera referenced by this node\n   */\n  camera?: number;\n  /**\n   * The indices of this node's children\n   */\n  children?: number[];\n  /**\n   * The index of the skin referenced by this node\n   */\n  skin?: number;\n  /**\n   * A floating-point 4x4 transformation matrix stored in column-major order\n   */\n  matrix?: number[];\n  /**\n   * The index of the mesh in this node\n   */\n  mesh?: number;\n  /**\n   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n   */\n  rotation?: number[];\n  /**\n   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n   */\n  scale?: number[];\n  /**\n   * The node's translation along the x, y, and z axes\n   */\n  translation?: number[];\n  /**\n   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n   */\n  weights?: number[];\n}\n\n/**\n * Texture sampler properties for filtering and wrapping modes\n */\nexport interface ISampler extends IChildRootProperty {\n  /**\n   * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n   */\n  magFilter?: TextureMagFilter;\n  /**\n   * Minification filter.  All valid values correspond to WebGL enums\n   */\n  minFilter?: TextureMinFilter;\n  /**\n   * S (U) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapS?: TextureWrapMode;\n  /**\n   * T (V) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapT?: TextureWrapMode;\n}\n\n/**\n * The root nodes of a scene\n */\nexport interface IScene extends IChildRootProperty {\n  /**\n   * The indices of each root node\n   */\n  nodes: number[];\n}\n\n/**\n * Joints and matrices defining a skin\n */\nexport interface ISkin extends IChildRootProperty {\n  /**\n   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n   */\n  inverseBindMatrices?: number;\n  /**\n   * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n   */\n  skeleton?: number;\n  /**\n   * Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n   */\n  joints: number[];\n}\n\n/**\n * A texture and its sampler\n */\nexport interface ITexture extends IChildRootProperty {\n  /**\n   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n   */\n  sampler?: number;\n  /**\n   * The index of the image used by this texture\n   */\n  source: number;\n}\n\n/**\n * Reference to a texture\n */\nexport interface ITextureInfo extends IProperty {\n  /**\n   * The index of the texture\n   */\n  index: number;\n  /**\n   * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n   */\n  texCoord?: number;\n}\n\n/**\n * The root object for a glTF asset\n */\nexport interface IGLTF extends IProperty {\n  /**\n   * An array of accessors. An accessor is a typed view into a bufferView\n   */\n  accessors?: IAccessor[];\n  /**\n   * An array of keyframe animations\n   */\n  animations?: IAnimation[];\n  /**\n   * Metadata about the glTF asset\n   */\n  asset: IAsset;\n  /**\n   * An array of buffers.  A buffer points to binary geometry, animation, or skins\n   */\n  buffers?: IBuffer[];\n  /**\n   * An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer\n   */\n  bufferViews?: IBufferView[];\n  /**\n   * An array of cameras\n   */\n  cameras?: ICamera[];\n  /**\n   * Names of glTF extensions used somewhere in this asset\n   */\n  extensionsUsed?: string[];\n  /**\n   * Names of glTF extensions required to properly load this asset\n   */\n  extensionsRequired?: string[];\n  /**\n   * An array of images.  An image defines data used to create a texture\n   */\n  images?: IImage[];\n  /**\n   * An array of materials.  A material defines the appearance of a primitive\n   */\n  materials?: IMaterial[];\n  /**\n   * An array of meshes.  A mesh is a set of primitives to be rendered\n   */\n  meshes?: IMesh[];\n  /**\n   * An array of nodes\n   */\n  nodes?: INode[];\n  /**\n   * An array of samplers.  A sampler contains properties for texture filtering and wrapping modes\n   */\n  samplers?: ISampler[];\n  /**\n   * The index of the default scene\n   */\n  scene?: number;\n  /**\n   * An array of scenes\n   */\n  scenes?: IScene[];\n  /**\n   * An array of skins.  A skin is defined by joints and matrices\n   */\n  skins?: ISkin[];\n  /**\n   * An array of textures\n   */\n  textures?: ITexture[];\n}\n","import { IndexFormat, TypedArray, VertexElement, VertexElementFormat } from \"@oasis-engine/core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from \"./Schema\";\n\n/**\n * @internal\n */\nexport class GLTFUtil {\n  public static floatBufferToVector2Array(buffer: Float32Array): Vector2[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector2>(bufferLen / 2);\n    for (let i = 0; i < bufferLen; i += 2) {\n      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector3Array(buffer: Float32Array): Vector3[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector3>(bufferLen / 3);\n    for (let i = 0; i < bufferLen; i += 3) {\n      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector4Array(buffer: Float32Array): Vector4[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector4>(bufferLen / 4);\n    for (let i = 0; i < bufferLen; i += 4) {\n      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n    }\n    return array;\n  }\n\n  public static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[] {\n    const bufferLen = buffer.length;\n    const colors = new Array<Color>(bufferLen / (isColor3 ? 3 : 4));\n\n    if (isColor3) {\n      for (let i = 0; i < bufferLen; i += 3) {\n        colors[i / 3] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], 1.0);\n      }\n    } else {\n      for (let i = 0; i < bufferLen; i += 4) {\n        colors[i / 4] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n      }\n    }\n\n    return colors;\n  }\n\n  /**\n   * Parse binary text for glb loader.\n   */\n  static decodeText(array: Uint8Array): string {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(array);\n    }\n\n    // TextDecoder polyfill\n    let s = \"\";\n\n    for (let i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return decodeURIComponent(encodeURIComponent(s));\n  }\n\n  /**\n   * Get the number of bytes occupied by accessor type.\n   */\n  static getAccessorTypeSize(accessorType: AccessorType): number {\n    switch (accessorType) {\n      case AccessorType.SCALAR:\n        return 1;\n      case AccessorType.VEC2:\n        return 2;\n      case AccessorType.VEC3:\n        return 3;\n      case AccessorType.VEC4:\n        return 4;\n      case AccessorType.MAT2:\n        return 4;\n      case AccessorType.MAT3:\n        return 9;\n      case AccessorType.MAT4:\n        return 16;\n    }\n  }\n\n  /**\n   * Get the TypedArray corresponding to the component type.\n   */\n  static getComponentType(componentType: AccessorComponentType) {\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return Int8Array;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return Uint8Array;\n      case AccessorComponentType.SHORT:\n        return Int16Array;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return Uint16Array;\n      case AccessorComponentType.UNSIGNED_INT:\n        return Uint32Array;\n      case AccessorComponentType.FLOAT:\n        return Float32Array;\n    }\n  }\n\n  /**\n   * Get accessor data.\n   */\n  static getAccessorData(gltf: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const bufferView = bufferViews[accessor.bufferView];\n    const arrayBuffer = buffers[bufferView.buffer];\n    const accessorByteOffset = accessor.hasOwnProperty(\"byteOffset\") ? accessor.byteOffset : 0;\n    const bufferViewByteOffset = bufferView.hasOwnProperty(\"byteOffset\") ? bufferView.byteOffset : 0;\n    const byteOffset = accessorByteOffset + bufferViewByteOffset;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const length = accessorTypeSize * accessor.count;\n    const byteStride = bufferView.byteStride ?? 0;\n    const arrayType = GLTFUtil.getComponentType(accessor.componentType);\n    let uint8Array;\n    if (byteStride) {\n      const accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;\n      uint8Array = new Uint8Array(accessor.count * accessorByteSize);\n      const originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);\n      for (let i = 0; i < accessor.count; i++) {\n        for (let j = 0; j < accessorByteSize; j++) {\n          uint8Array[i * accessorByteSize + j] = originalBufferView[i * byteStride + accessorByteOffset + j];\n        }\n      }\n    } else {\n      uint8Array = new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + length * arrayType.BYTES_PER_ELEMENT));\n    }\n\n    const typedArray = new arrayType(uint8Array.buffer);\n\n    if (accessor.sparse) {\n      const { count, indices, values } = accessor.sparse;\n      const indicesBufferView = bufferViews[indices.bufferView];\n      const valuesBufferView = bufferViews[values.bufferView];\n      const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n      const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n      const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n      const indicesByteLength = indicesBufferView.byteLength;\n      const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n      const valuesByteLength = valuesBufferView.byteLength;\n\n      const indicesType = GLTFUtil.getComponentType(indices.componentType);\n      const indicesArray = new indicesType(\n        indicesArrayBuffer,\n        indicesByteOffset,\n        indicesByteLength / indicesType.BYTES_PER_ELEMENT\n      );\n      const valuesArray = new arrayType(\n        valuesArrayBuffer,\n        valuesByteOffset,\n        valuesByteLength / arrayType.BYTES_PER_ELEMENT\n      );\n\n      for (let i = 0; i < count; i++) {\n        const replaceIndex = indicesArray[i];\n        for (let j = 0; j < accessorTypeSize; j++) {\n          typedArray[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n        }\n      }\n    }\n\n    return typedArray;\n  }\n\n  static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer {\n    const { buffer, byteOffset = 0, byteLength } = bufferView;\n    const arrayBuffer = buffers[buffer];\n\n    return arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n  }\n\n  static getVertexStride(gltf: IGLTF, accessor: IAccessor): number {\n    const stride = gltf.bufferViews[accessor.bufferView ?? 0].byteStride;\n    if (stride) {\n      return stride;\n    }\n\n    const size = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const componentType = GLTFUtil.getComponentType(accessor.componentType);\n    return size * componentType.BYTES_PER_ELEMENT;\n  }\n\n  static createVertexElement(semantic: string, accessor: IAccessor, index: number): VertexElement {\n    const size = GLTFUtil.getAccessorTypeSize(accessor.type);\n    return new VertexElement(\n      semantic,\n      0,\n      GLTFUtil.getElementFormat(accessor.componentType, size, accessor.normalized),\n      index\n    );\n  }\n\n  static getIndexFormat(type: AccessorComponentType): IndexFormat {\n    switch (type) {\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return IndexFormat.UInt8;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return IndexFormat.UInt16;\n      case AccessorComponentType.UNSIGNED_INT:\n        return IndexFormat.UInt32;\n    }\n  }\n\n  static getElementFormat(type: AccessorComponentType, size: number, normalized: boolean = false): VertexElementFormat {\n    if (type == AccessorComponentType.FLOAT) {\n      switch (size) {\n        case 1:\n          return VertexElementFormat.Float;\n        case 2:\n          return VertexElementFormat.Vector2;\n        case 3:\n          return VertexElementFormat.Vector3;\n        case 4:\n          return VertexElementFormat.Vector4;\n      }\n    }\n\n    if (type == AccessorComponentType.SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;\n      }\n    }\n\n    if (type == AccessorComponentType.BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;\n      }\n    }\n  }\n\n  /**\n   * Load image buffer\n   */\n  static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const blob = new window.Blob([imageBuffer], { type });\n      const img = new Image();\n      img.src = URL.createObjectURL(blob);\n\n      img.crossOrigin = \"anonymous\";\n      img.onerror = function () {\n        reject(new Error(\"Failed to load image buffer\"));\n      };\n      img.onload = function () {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n      };\n    });\n  }\n\n  static isAbsoluteUrl(url: string): boolean {\n    return /^(?:http|blob|data:|\\/)/.test(url);\n  }\n\n  static parseRelativeUrl(baseUrl: string, relativeUrl: string): string {\n    if (GLTFUtil.isAbsoluteUrl(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    const char0 = relativeUrl.charAt(0);\n    if (char0 === \".\") {\n      return GLTFUtil._formatRelativePath(relativeUrl + relativeUrl);\n    }\n\n    return baseUrl.substring(0, baseUrl.lastIndexOf(\"/\") + 1) + relativeUrl;\n  }\n\n  /**\n   * Parse the glb format.\n   */\n  static parseGLB(glb: ArrayBuffer): {\n    gltf: IGLTF;\n    buffers: ArrayBuffer[];\n  } {\n    const UINT32_LENGTH = 4;\n    const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n    const GLB_HEADER_LENGTH = 12;\n    const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n    const dataView = new DataView(glb);\n\n    // read header\n    const header = {\n      magic: dataView.getUint32(0, true),\n      version: dataView.getUint32(UINT32_LENGTH, true),\n      length: dataView.getUint32(2 * UINT32_LENGTH, true)\n    };\n\n    if (header.magic !== GLB_HEADER_MAGIC) {\n      console.error(\"Invalid glb magic number. Expected 0x46546C67, found 0x\" + header.magic.toString(16));\n      return null;\n    }\n\n    // read main data\n    let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n    let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n    // read glTF json\n    if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n      console.error(\"Invalid glb chunk type. Expected 0x4E4F534A, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n    const gltf: IGLTF = JSON.parse(GLTFUtil.decodeText(glTFData));\n\n    // read all buffers\n    const buffers: ArrayBuffer[] = [];\n    let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n    while (byteOffset < header.length) {\n      chunkLength = dataView.getUint32(byteOffset, true);\n      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n      if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n        console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n        return null;\n      }\n\n      const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n      const buffer = glb.slice(currentOffset, currentOffset + chunkLength);\n      buffers.push(buffer);\n\n      byteOffset += chunkLength + 2 * UINT32_LENGTH;\n    }\n\n    return {\n      gltf,\n      buffers\n    };\n  }\n\n  private static _formatRelativePath(value: string): string {\n    const parts = value.split(\"/\");\n    for (let i = 0, n = parts.length; i < n; i++) {\n      if (parts[i] == \"..\") {\n        parts.splice(i - 1, 2);\n        i -= 2;\n      }\n    }\n    return parts.join(\"/\");\n  }\n}\n","import { EngineObject } from \"@oasis-engine/core\";\nimport { ExtensionParser } from \"../extensions/ExtensionParser\";\nimport { ExtensionSchema } from \"../extensions/Schema\";\nimport { GLTFResource } from \"../GLTFResource\";\n\nexport abstract class Parser {\n  private static _extensionParsers: Record<string, ExtensionParser[]> = {};\n\n  static parseEngineResource(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: GLTFResource,\n    ...extra\n  ): void {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].parseEngineResource(extensionSchema, parseResource, context, ...extra);\n      }\n    }\n  }\n\n  static createEngineResource<T extends EngineObject>(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    context: GLTFResource,\n    ...extra\n  ): T | Promise<T> {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      return parsers[0].createEngineResource(extensionSchema, context, ...extra) as T;\n    }\n  }\n\n  static hasExtensionParser(extensionName: string): boolean {\n    const parsers = Parser._extensionParsers[extensionName];\n    return !!parsers?.length;\n  }\n\n  static initialize(extensionName: string) {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].initialize();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addExtensionParser(extensionName: string, extensionParser: ExtensionParser) {\n    if (!Parser._extensionParsers[extensionName]) {\n      Parser._extensionParsers[extensionName] = [];\n    }\n    Parser._extensionParsers[extensionName].push(extensionParser);\n  }\n\n  abstract parse(context: GLTFResource): void | Promise<void>;\n}\n\n/**\n * Declare ExtensionParser's decorator.\n * @param extensionName - Extension name\n */\nexport function registerExtension(extensionName: string) {\n  return (parser: new () => ExtensionParser) => {\n    const extensionParser = new parser();\n\n    Parser._addExtensionParser(extensionName, extensionParser);\n  };\n}\n","import {\n  AnimationClip,\n  AnimationCurve,\n  Component,\n  Entity,\n  InterpolableKeyframe,\n  InterpolableValueType,\n  InterpolationType,\n  SkinnedMeshRenderer,\n  Transform,\n  TypedArray\n} from \"@oasis-engine/core\";\nimport { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, AnimationChannelTargetPath, AnimationSamplerInterpolation, IAnimationChannel } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class AnimationParser extends Parser {\n  parse(context: GLTFResource): void {\n    const { gltf, buffers, entities } = context;\n    const { animations, accessors } = gltf;\n    if (!animations) {\n      return;\n    }\n    const animationClipCount = animations.length;\n    const animationClips = new Array<AnimationClip>(animationClipCount);\n    const animationsIndices = new Array<{\n      name: string;\n      index: number;\n    }>(animationClipCount);\n\n    for (let i = 0; i < animationClipCount; i++) {\n      const gltfAnimation = animations[i];\n      const { channels, samplers, name = `AnimationClip${i}` } = gltfAnimation;\n      const animationClip = new AnimationClip(name);\n      const sampleDataCollection = new Array<SampleData>();\n\n      let duration = -1;\n\n      // parse samplers\n      for (let i = 0; i < samplers.length; i++) {\n        const gltfSampler = samplers[i];\n        const inputAccessor = accessors[gltfSampler.input];\n        const outputAccessor = accessors[gltfSampler.output];\n\n        const input = GLTFUtil.getAccessorData(gltf, inputAccessor, buffers);\n        const output = GLTFUtil.getAccessorData(gltf, outputAccessor, buffers);\n        const outputAccessorSize = output.length / input.length;\n\n        const interpolation = gltfSampler.interpolation ?? AnimationSamplerInterpolation.Linear;\n        let samplerInterpolation: InterpolationType;\n        switch (interpolation) {\n          case AnimationSamplerInterpolation.CubicSpine:\n            samplerInterpolation = InterpolationType.CubicSpine;\n            break;\n          case AnimationSamplerInterpolation.Step:\n            samplerInterpolation = InterpolationType.Step;\n            break;\n          case AnimationSamplerInterpolation.Linear:\n            samplerInterpolation = InterpolationType.Linear;\n            break;\n        }\n        const maxTime = input[input.length - 1];\n        if (maxTime > duration) {\n          duration = maxTime;\n        }\n\n        sampleDataCollection.push({\n          type: outputAccessor.type,\n          interpolation: samplerInterpolation,\n          input,\n          output,\n          outputSize: outputAccessorSize\n        });\n      }\n\n      for (let i = 0; i < channels.length; i++) {\n        const gltfChannel = channels[i];\n        const { target } = gltfChannel;\n\n        const channelTargetEntity = entities[target.node];\n        let relativePath = \"\";\n        let entity = channelTargetEntity;\n        while (entity.parent) {\n          relativePath = relativePath === \"\" ? `${entity.name}` : `${entity.name}/${relativePath}`;\n          entity = entity.parent;\n        }\n\n        let compType: new (entity: Entity) => Component;\n        let propertyName: string;\n        let interpolableValueType: InterpolableValueType;\n        switch (target.path) {\n          case AnimationChannelTargetPath.TRANSLATION:\n            compType = Transform;\n            propertyName = \"position\";\n            interpolableValueType = InterpolableValueType.Vector3;\n            break;\n          case AnimationChannelTargetPath.ROTATION:\n            compType = Transform;\n            propertyName = \"rotation\";\n            interpolableValueType = InterpolableValueType.Quaternion;\n            break;\n          case AnimationChannelTargetPath.SCALE:\n            compType = Transform;\n            propertyName = \"scale\";\n            interpolableValueType = InterpolableValueType.Vector3;\n            break;\n          case AnimationChannelTargetPath.WEIGHTS:\n            compType = SkinnedMeshRenderer;\n            propertyName = \"blendShapeWeights\";\n            interpolableValueType = InterpolableValueType.FloatArray;\n            break;\n          default:\n        }\n\n        const curve = this._addCurve(interpolableValueType, gltfChannel, sampleDataCollection);\n        animationClip.addCurveBinding(relativePath, compType, propertyName, curve);\n      }\n\n      animationClips[i] = animationClip;\n      animationsIndices[i] = {\n        name,\n        index: i\n      };\n    }\n    context.animations = animationClips;\n    // @ts-ignore for editor\n    context._animationsIndices = animationsIndices;\n  }\n\n  private _addCurve(\n    interpolableValueType: InterpolableValueType,\n    gltfChannel: IAnimationChannel,\n    sampleDataCollection: SampleData[]\n  ): AnimationCurve {\n    const curve = new AnimationCurve();\n    const sampleData = sampleDataCollection[gltfChannel.sampler];\n    const { input, output, outputSize } = sampleData;\n\n    curve.interpolation = sampleData.interpolation;\n    for (let j = 0, n = input.length; j < n; j++) {\n      const offset = j * outputSize;\n      if (interpolableValueType === InterpolableValueType.Float) {\n        const keyframe = new InterpolableKeyframe<number, number>();\n        keyframe.time = input[j];\n        keyframe.inTangent = 0;\n        keyframe.outTangent = 0;\n        keyframe.value = output[offset];\n        curve.addKey(keyframe);\n      } else if (interpolableValueType === InterpolableValueType.FloatArray) {\n        const keyframe = new InterpolableKeyframe<Float32Array, Float32Array>();\n        keyframe.time = input[j];\n        keyframe.inTangent = new Float32Array(outputSize);\n        keyframe.outTangent = new Float32Array(outputSize);\n        keyframe.value = <Float32Array>output.subarray(offset, offset + outputSize);\n        curve.addKey(keyframe);\n      } else if (interpolableValueType === InterpolableValueType.Vector2) {\n        const keyframe = new InterpolableKeyframe<Vector2, Vector2>();\n        keyframe.time = input[j];\n        keyframe.value = new Vector2(output[offset], output[offset + 1]);\n        keyframe.inTangent = new Vector2();\n        keyframe.outTangent = new Vector2();\n        curve.addKey(keyframe);\n      } else if (interpolableValueType === InterpolableValueType.Vector3) {\n        const keyframe = new InterpolableKeyframe<Vector3, Vector3>();\n        keyframe.time = input[j];\n        keyframe.value = new Vector3(output[offset], output[offset + 1], output[offset + 2]);\n        keyframe.inTangent = new Vector3();\n        keyframe.outTangent = new Vector3();\n        curve.addKey(keyframe);\n      } else if (interpolableValueType === InterpolableValueType.Vector4) {\n        const keyframe = new InterpolableKeyframe<Vector4, Vector4>();\n        keyframe.time = input[j];\n        keyframe.value = new Vector4(output[offset], output[offset + 1], output[offset + 2], output[offset + 3]);\n        keyframe.inTangent = new Vector4();\n        keyframe.outTangent = new Vector4();\n        curve.addKey(keyframe);\n      } else if (interpolableValueType === InterpolableValueType.Quaternion) {\n        const keyframe = new InterpolableKeyframe<Vector4, Quaternion>();\n        keyframe.time = input[j];\n        keyframe.value = new Quaternion(output[offset], output[offset + 1], output[offset + 2], output[offset + 3]);\n        keyframe.inTangent = new Vector4();\n        keyframe.outTangent = new Vector4();\n        curve.addKey(keyframe);\n      }\n    }\n    return curve;\n  }\n}\ninterface SampleData {\n  type: AccessorType;\n  input: TypedArray;\n  output: TypedArray;\n  interpolation: InterpolationType;\n  outputSize: number;\n}\n","import { AssetType } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { IBuffer, IGLTF } from \"../Schema\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class BufferParser extends Parser {\n  parse(context: GLTFResource): Promise<void> {\n    const { url, engine } = context;\n\n    if (this._isGLB(url)) {\n      return engine.resourceManager\n        .load<ArrayBuffer>({\n          url,\n          type: AssetType.Buffer\n        })\n        .then(GLTFUtil.parseGLB)\n        .then(({ gltf, buffers }) => {\n          context.gltf = gltf;\n          context.buffers = buffers;\n        });\n    } else {\n      return engine.resourceManager\n        .load<IGLTF>({\n          url,\n          type: AssetType.JSON\n        })\n        .then((gltf: IGLTF) => {\n          context.gltf = gltf;\n          return Promise.all(\n            gltf.buffers.map((buffer: IBuffer) => {\n              return engine.resourceManager.load<ArrayBuffer>({\n                type: AssetType.Buffer,\n                url: GLTFUtil.parseRelativeUrl(url, buffer.uri)\n              });\n            })\n          ).then((buffers: ArrayBuffer[]) => {\n            context.buffers = buffers;\n          });\n        });\n    }\n  }\n\n  private _isGLB(url: string): boolean {\n    return url.substring(url.lastIndexOf(\".\") + 1) === \"glb\";\n  }\n}\n","import { Entity } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\n\nexport class EntityParser extends Parser {\n  /** @internal */\n  static _defaultName: String = \"_GLTF_ENTITY_\";\n\n  parse(context: GLTFResource): void {\n    const {\n      engine,\n      gltf: { nodes }\n    } = context;\n    if (!nodes) return;\n\n    const entities: Entity[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { matrix, translation, rotation, scale } = gltfNode;\n      const entity = new Entity(engine, gltfNode.name || `${EntityParser._defaultName}${i}`);\n\n      const { transform } = entity;\n      if (matrix) {\n        const localMatrix = transform.localMatrix;\n        localMatrix.setValueByArray(matrix);\n        transform.localMatrix = localMatrix;\n      } else {\n        if (translation) {\n          transform.setPosition(translation[0], translation[1], translation[2]);\n        }\n        if (rotation) {\n          transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\n        }\n        if (scale) {\n          transform.setScale(scale[0], scale[1], scale[2]);\n        }\n      }\n\n      entities[i] = entity;\n    }\n\n    context.entities = entities;\n    this._buildEntityTree(context);\n    this._createSceneRoots(context);\n  }\n\n  private _buildEntityTree(context: GLTFResource): void {\n    const {\n      gltf: { nodes },\n      entities\n    } = context;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const { children } = nodes[i];\n      const entity = entities[i];\n\n      if (children) {\n        for (let j = 0; j < children.length; j++) {\n          const childEntity = entities[children[j]];\n\n          entity.addChild(childEntity);\n        }\n      }\n    }\n  }\n\n  private _createSceneRoots(context: GLTFResource): void {\n    const {\n      engine,\n      gltf: { scene: sceneID = 0, scenes },\n      entities\n    } = context;\n\n    if (!scenes) return;\n\n    const sceneRoots: Entity[] = [];\n\n    for (let i = 0; i < scenes.length; i++) {\n      const { nodes } = scenes[i];\n\n      if (!nodes) continue;\n\n      if (nodes.length === 1) {\n        sceneRoots[i] = entities[nodes[0]];\n      } else {\n        const rootEntity = new Entity(engine, \"GLTF_ROOT\");\n        for (let j = 0; j < nodes.length; j++) {\n          rootEntity.addChild(entities[nodes[j]]);\n        }\n        sceneRoots[i] = rootEntity;\n      }\n    }\n\n    context.sceneRoots = sceneRoots;\n    context.defaultSceneRoot = sceneRoots[sceneID];\n  }\n}\n","import { Material, PBRMaterial, PBRSpecularMaterial, RenderFace, UnlitMaterial } from \"@oasis-engine/core\";\nimport { Color } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { MaterialAlphaMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class MaterialParser extends Parser {\n  /** @internal */\n  static _parseTextureTransform(material: Material, extensions: any = {}, context: GLTFResource): void {\n    const schema = extensions.KHR_texture_transform;\n    if (schema) {\n      Parser.parseEngineResource(\"KHR_texture_transform\", schema, material, context);\n    }\n  }\n\n  parse(context: GLTFResource): void {\n    const { gltf, engine, textures } = context;\n    if (!gltf.materials) return;\n\n    const materials: Material[] = [];\n\n    for (let i = 0; i < gltf.materials.length; i++) {\n      const {\n        extensions = {},\n        pbrMetallicRoughness,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture,\n        emissiveFactor,\n        alphaMode,\n        alphaCutoff,\n        doubleSided,\n        name = \"\"\n      } = gltf.materials[i];\n\n      const { KHR_materials_unlit, KHR_materials_pbrSpecularGlossiness } = extensions;\n\n      let material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial = null;\n\n      if (KHR_materials_unlit) {\n        material = <UnlitMaterial>Parser.createEngineResource(\"KHR_materials_unlit\", KHR_materials_unlit, context);\n      } else if (KHR_materials_pbrSpecularGlossiness) {\n        material = <PBRSpecularMaterial>(\n          Parser.createEngineResource(\n            \"KHR_materials_pbrSpecularGlossiness\",\n            KHR_materials_pbrSpecularGlossiness,\n            context\n          )\n        );\n      } else {\n        material = new PBRMaterial(engine);\n      }\n\n      material.name = name;\n\n      if (pbrMetallicRoughness) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, roughnessFactor, metallicRoughnessTexture } =\n          pbrMetallicRoughness;\n\n        if (baseColorFactor) {\n          material.baseColor = new Color(\n            Color.linearToGammaSpace(baseColorFactor[0]),\n            Color.linearToGammaSpace(baseColorFactor[1]),\n            Color.linearToGammaSpace(baseColorFactor[2]),\n            baseColorFactor[3]\n          );\n        }\n        if (baseColorTexture) {\n          material.baseTexture = textures[baseColorTexture.index];\n          MaterialParser._parseTextureTransform(material, baseColorTexture.extensions, context);\n        }\n\n        if (!KHR_materials_unlit && !KHR_materials_pbrSpecularGlossiness) {\n          const m = material as PBRMaterial;\n          m.metallic = metallicFactor ?? 1;\n          m.roughness = roughnessFactor ?? 1;\n          if (metallicRoughnessTexture) {\n            m.roughnessMetallicTexture = textures[metallicRoughnessTexture.index];\n            MaterialParser._parseTextureTransform(material, metallicRoughnessTexture.extensions, context);\n          }\n        }\n      }\n\n      if (!KHR_materials_unlit) {\n        const m = material as PBRMaterial | PBRSpecularMaterial;\n\n        if (emissiveTexture) {\n          m.emissiveTexture = textures[emissiveTexture.index];\n          MaterialParser._parseTextureTransform(material, emissiveTexture.extensions, context);\n        }\n\n        if (emissiveFactor) {\n          m.emissiveColor = new Color(\n            Color.linearToGammaSpace(emissiveFactor[0]),\n            Color.linearToGammaSpace(emissiveFactor[1]),\n            Color.linearToGammaSpace(emissiveFactor[2])\n          );\n        }\n\n        if (normalTexture) {\n          const { index, scale } = normalTexture;\n          m.normalTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, normalTexture.extensions, context);\n          if (scale !== undefined) {\n            m.normalTextureIntensity = scale;\n          }\n        }\n\n        if (occlusionTexture) {\n          const { index, strength } = occlusionTexture;\n          m.occlusionTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, occlusionTexture.extensions, context);\n          if (strength !== undefined) {\n            m.occlusionTextureIntensity = strength;\n          }\n        }\n      }\n\n      if (doubleSided) {\n        material.renderFace = RenderFace.Double;\n      } else {\n        material.renderFace = RenderFace.Front;\n      }\n\n      switch (alphaMode) {\n        case MaterialAlphaMode.OPAQUE:\n          material.isTransparent = false;\n          break;\n        case MaterialAlphaMode.BLEND:\n          material.isTransparent = true;\n          break;\n        case MaterialAlphaMode.MASK:\n          material.alphaCutoff = alphaCutoff ?? 0.5;\n          break;\n      }\n\n      materials[i] = material;\n    }\n\n    context.materials = materials;\n  }\n}\n","import { BlendShape, Engine, EngineObject, ModelMesh, TypedArray } from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, IGLTF, IMesh, IMeshPrimitive } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class MeshParser extends Parser {\n  private static _tempVector3 = new Vector3();\n  parse(context: GLTFResource): Promise<void> {\n    const { engine, gltf, buffers } = context;\n    if (!gltf.meshes) return;\n\n    const meshPromises: Promise<ModelMesh[]>[] = [];\n\n    for (let i = 0; i < gltf.meshes.length; i++) {\n      const gltfMesh = gltf.meshes[i];\n      const primitivePromises: Promise<ModelMesh>[] = [];\n\n      for (let j = 0; j < gltfMesh.primitives.length; j++) {\n        const gltfPrimitive = gltfMesh.primitives[j];\n        const { extensions = {} } = gltfPrimitive;\n        const { KHR_draco_mesh_compression } = extensions;\n\n        primitivePromises.push(\n          new Promise((resolve) => {\n            const mesh = new ModelMesh(engine, gltfMesh.name || j + \"\");\n\n            if (KHR_draco_mesh_compression) {\n              (<Promise<EngineObject>>(\n                Parser.createEngineResource(\n                  \"KHR_draco_mesh_compression\",\n                  KHR_draco_mesh_compression,\n                  context,\n                  gltfPrimitive\n                )\n              ))\n                .then((decodedGeometry: any) => {\n                  return this._parseMeshFromGLTFPrimitive(\n                    mesh,\n                    gltfMesh,\n                    gltfPrimitive,\n                    gltf,\n                    (attributeSemantic) => {\n                      for (let j = 0; j < decodedGeometry.attributes.length; j++) {\n                        if (decodedGeometry.attributes[j].name === attributeSemantic) {\n                          return decodedGeometry.attributes[j].array;\n                        }\n                      }\n                      return null;\n                    },\n                    (attributeSemantic, shapeIndex) => {\n                      throw \"BlendShape animation is not supported when using draco.\";\n                    },\n                    () => {\n                      return decodedGeometry.index.array;\n                    },\n                    engine\n                  );\n                })\n                .then(resolve);\n            } else {\n              this._parseMeshFromGLTFPrimitive(\n                mesh,\n                gltfMesh,\n                gltfPrimitive,\n                gltf,\n                (attributeSemantic) => {\n                  const accessorIdx = gltfPrimitive.attributes[attributeSemantic];\n                  const accessor = gltf.accessors[accessorIdx];\n                  return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                },\n                (attributeName, shapeIndex) => {\n                  const shapeAccessorIdx = gltfPrimitive.targets[shapeIndex];\n                  const attributeAccessorIdx = shapeAccessorIdx[attributeName];\n                  if (attributeAccessorIdx) {\n                    const accessor = gltf.accessors[attributeAccessorIdx];\n                    return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                  } else {\n                    return null;\n                  }\n                },\n                () => {\n                  const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n                  return GLTFUtil.getAccessorData(gltf, indexAccessor, buffers);\n                },\n                engine\n              ).then(resolve);\n            }\n          })\n        );\n      }\n\n      meshPromises.push(Promise.all(primitivePromises));\n    }\n\n    return Promise.all(meshPromises).then((meshes: ModelMesh[][]) => {\n      context.meshes = meshes;\n    });\n  }\n\n  private _parseMeshFromGLTFPrimitive(\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    engine: Engine\n  ): Promise<ModelMesh> {\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n    let vertexCount: number;\n\n    const { accessors } = gltf;\n    const accessor = accessors[attributes[\"POSITION\"]];\n    const positionBuffer = <Float32Array>getVertexBufferData(\"POSITION\");\n    const positions = GLTFUtil.floatBufferToVector3Array(positionBuffer);\n    mesh.setPositions(positions);\n\n    const { bounds } = mesh;\n    vertexCount = accessor.count;\n    if (accessor.min && accessor.max) {\n      bounds.min.setValueByArray(accessor.min);\n      bounds.max.setValueByArray(accessor.max);\n    } else {\n      const position = MeshParser._tempVector3;\n      const { min, max } = bounds;\n\n      min.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n      max.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n      const stride = positionBuffer.length / vertexCount;\n      for (let j = 0; j < vertexCount; j++) {\n        const offset = j * stride;\n        position.setValueByArray(positionBuffer, offset);\n        Vector3.min(min, position, min);\n        Vector3.max(max, position, max);\n      }\n    }\n\n    for (const attributeSemantic in attributes) {\n      if (attributeSemantic === \"POSITION\") {\n        continue;\n      }\n      const bufferData = getVertexBufferData(attributeSemantic);\n      switch (attributeSemantic) {\n        case \"NORMAL\":\n          const normals = GLTFUtil.floatBufferToVector3Array(<Float32Array>bufferData);\n          mesh.setNormals(normals);\n          break;\n        case \"TEXCOORD_0\":\n          const texturecoords = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords, 0);\n          break;\n        case \"TEXCOORD_1\":\n          const texturecoords1 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords1, 1);\n          break;\n        case \"TEXCOORD_2\":\n          const texturecoords2 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords2, 2);\n          break;\n        case \"TEXCOORD_3\":\n          const texturecoords3 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords3, 3);\n          break;\n        case \"TEXCOORD_4\":\n          const texturecoords4 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords4, 4);\n          break;\n        case \"TEXCOORD_5\":\n          const texturecoords5 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords5, 5);\n          break;\n        case \"TEXCOORD_6\":\n          const texturecoords6 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords6, 6);\n          break;\n        case \"TEXCOORD_7\":\n          const texturecoords7 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords7, 7);\n          break;\n        case \"COLOR_0\":\n          const colors = GLTFUtil.floatBufferToColorArray(\n            <Float32Array>bufferData,\n            accessors[attributes[\"COLOR_0\"]].type === AccessorType.VEC3\n          );\n          mesh.setColors(colors);\n          break;\n        case \"TANGENT\":\n          const tangents = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setTangents(tangents);\n          break;\n\n        case \"JOINTS_0\":\n          const joints = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneIndices(joints);\n          break;\n        case \"WEIGHTS_0\":\n          const weights = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneWeights(weights);\n          break;\n        default:\n          // console.warn(`Unsupport attribute semantic ${attributeSemantic}.`);\n          break;\n      }\n    }\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(true);\n    return Promise.resolve(mesh);\n  }\n\n  private _createBlendShape(\n    mesh: ModelMesh,\n    glTFMesh: IMesh,\n    glTFTargets: {\n      [name: string]: number;\n    }[],\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray\n  ): void {\n    const blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;\n\n    for (let i = 0, n = glTFTargets.length; i < n; i++) {\n      const name = blendShapeNames ? blendShapeNames[i] : `blendShape${i}`;\n      const deltaPosBuffer = getBlendShapeData(\"POSITION\", i);\n      const deltaNorBuffer = getBlendShapeData(\"NORMAL\", i);\n      const deltaTanBuffer = getBlendShapeData(\"TANGENT\", i);\n      const deltaPositions = deltaPosBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaPosBuffer) : null;\n      const deltaNormals = deltaNorBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaNorBuffer) : null;\n      const deltaTangents = deltaTanBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaTanBuffer) : null;\n\n      const blendShape = new BlendShape(name);\n      blendShape.addFrame(1.0, deltaPositions, deltaNormals, deltaTangents);\n      mesh.addBlendShape(blendShape);\n    }\n  }\n}\n","import {\n  Animator,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  BlinnPhongMaterial,\n  Camera,\n  Engine,\n  Entity,\n  MeshRenderer,\n  SkinnedMeshRenderer\n} from \"@oasis-engine/core\";\nimport { IKHRLightsPunctual, IKHRLightsPunctual_LightNode } from \"../extensions/Schema\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { CameraType, ICamera, INode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class SceneParser extends Parser {\n  private static _defaultMaterial: BlinnPhongMaterial;\n\n  private static _getDefaultMaterial(engine: Engine): BlinnPhongMaterial {\n    if (!SceneParser._defaultMaterial) {\n      SceneParser._defaultMaterial = new BlinnPhongMaterial(engine);\n    }\n\n    return SceneParser._defaultMaterial;\n  }\n\n  parse(context: GLTFResource): void {\n    const {\n      gltf: { nodes, cameras: gltfCameras },\n      entities\n    } = context;\n\n    if (!nodes) return;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { camera: cameraID, mesh: meshID, extensions = {} } = gltfNode;\n      const KHR_lights_punctual = <IKHRLightsPunctual_LightNode>extensions.KHR_lights_punctual;\n      const entity = entities[i];\n\n      if (cameraID !== undefined) {\n        this._createCamera(context, gltfCameras[cameraID], entity);\n      }\n\n      if (meshID !== undefined) {\n        this._createRenderer(context, gltfNode, entity);\n      }\n\n      if (KHR_lights_punctual) {\n        const lightIndex = KHR_lights_punctual.light;\n        const lights = (context.gltf.extensions.KHR_lights_punctual as IKHRLightsPunctual).lights;\n\n        Parser.parseEngineResource(\"KHR_lights_punctual\", lights[lightIndex], entity, context);\n      }\n    }\n\n    if (context.defaultSceneRoot) {\n      this._createAnimator(context);\n    }\n  }\n\n  private _createCamera(context: GLTFResource, cameraSchema: ICamera, entity: Entity): void {\n    const { orthographic, perspective, type } = cameraSchema;\n    const camera = entity.addComponent(Camera);\n\n    if (type === CameraType.ORTHOGRAPHIC) {\n      const { xmag, ymag, zfar, znear } = orthographic;\n\n      camera.isOrthographic = true;\n\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n\n      camera.orthographicSize = Math.max(ymag ?? 0, xmag ?? 0) / 2;\n    } else if (type === CameraType.PERSPECTIVE) {\n      const { aspectRatio, yfov, zfar, znear } = perspective;\n\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = (yfov * 180) / Math.PI;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n\n    if (!context.cameras) context.cameras = [];\n    context.cameras.push(camera);\n    // @todo: use engine camera by default\n    camera.enabled = false;\n  }\n\n  private _createRenderer(context: GLTFResource, gltfNode: INode, entity: Entity): void {\n    const {\n      engine,\n      gltf: { meshes: gltfMeshes },\n      meshes,\n      materials,\n      skins\n    } = context;\n    const { mesh: meshID, skin: skinID } = gltfNode;\n    const glTFMesh = gltfMeshes[meshID];\n    const gltfMeshPrimitives = glTFMesh.primitives;\n    const blendShapeWeights = gltfNode.weights || glTFMesh.weights;\n\n    for (let i = 0; i < gltfMeshPrimitives.length; i++) {\n      const mesh = meshes[meshID][i];\n      let renderer: MeshRenderer | SkinnedMeshRenderer;\n\n      if (skinID !== undefined || blendShapeWeights) {\n        const skinRenderer = entity.addComponent(SkinnedMeshRenderer);\n        skinRenderer.mesh = mesh;\n        if (skinID !== undefined) {\n          skinRenderer.skin = skins[skinID];\n        }\n        if (blendShapeWeights) {\n          skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);\n        }\n        renderer = skinRenderer;\n      } else {\n        renderer = entity.addComponent(MeshRenderer);\n        renderer.mesh = mesh;\n      }\n\n      const materialIndex = gltfMeshPrimitives[i].material;\n      const material = materials?.[materialIndex] || SceneParser._getDefaultMaterial(engine);\n      renderer.setMaterial(material);\n\n      const { extensions = {} } = gltfMeshPrimitives[i];\n      const { KHR_materials_variants } = extensions;\n      if (KHR_materials_variants) {\n        Parser.parseEngineResource(\"KHR_materials_variants\", KHR_materials_variants, renderer, context);\n      }\n    }\n  }\n\n  private _createAnimator(context: GLTFResource) {\n    const { defaultSceneRoot, animations } = context;\n    if (!animations) return;\n    const animator = defaultSceneRoot.addComponent(Animator);\n    const animatorController = new AnimatorController();\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    animator.animatorController = animatorController;\n    layer.stateMachine = animatorStateMachine;\n    if (animations) {\n      for (let i = 0; i < animations.length; i++) {\n        const animationClip = animations[i];\n        const name = animationClip.name;\n        const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const animatorState = animatorStateMachine.addState(uniqueName);\n        animatorState.clip = animationClip;\n      }\n    }\n  }\n}\n","import { Skin } from \"@oasis-engine/core\";\nimport { Matrix } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class SkinParser extends Parser {\n  parse(context: GLTFResource): void {\n    const { gltf, buffers, entities, defaultSceneRoot } = context;\n    const gltfSkins = gltf.skins;\n\n    if (!gltfSkins) return;\n\n    const skins: Skin[] = [];\n\n    for (let i = 0; i < gltfSkins.length; i++) {\n      const { inverseBindMatrices, skeleton, joints, name = `SKIN_${i}` } = gltfSkins[i];\n      const jointCount = joints.length;\n\n      const skin = new Skin(name);\n      skin.inverseBindMatrices.length = jointCount;\n\n      // parse IBM\n      const accessor = gltf.accessors[inverseBindMatrices];\n      const buffer = GLTFUtil.getAccessorData(gltf, accessor, buffers);\n      for (let i = 0; i < jointCount; i++) {\n        const inverseBindMatrix = new Matrix();\n        inverseBindMatrix.setValueByArray(buffer, i * 16);\n        skin.inverseBindMatrices[i] = inverseBindMatrix;\n      }\n\n      // get joints\n      for (let i = 0; i < jointCount; i++) {\n        skin.joints[i] = entities[joints[i]].name;\n      }\n\n      // get skeleton\n      if (skeleton !== undefined) {\n        skin.skeleton = entities[skeleton].name;\n      } else {\n        skin.skeleton = defaultSceneRoot.name;\n      }\n\n      skins[i] = skin;\n    }\n\n    context.skins = skins;\n  }\n}\n","import { AssetType, Logger, Texture2D, TextureWrapMode } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { ISampler } from \"../Schema\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class TextureParser extends Parser {\n  private static _wrapMap = {\n    33071: TextureWrapMode.Clamp,\n    33648: TextureWrapMode.Mirror,\n    10497: TextureWrapMode.Repeat\n  };\n\n  parse(context: GLTFResource): void | Promise<void> {\n    const { gltf, buffers, engine, url } = context;\n\n    if (gltf.textures) {\n      return Promise.all(\n        gltf.textures.map(({ sampler, source = 0, name: textureName }, index) => {\n          const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = gltf.images[source];\n\n          if (uri) {\n            return engine.resourceManager\n              .load<Texture2D>({\n                url: GLTFUtil.parseRelativeUrl(url, uri),\n                type: AssetType.Texture2D\n              })\n              .then((texture) => {\n                if (!texture.name) {\n                  texture.name = textureName || imageName || `texture_${index}`;\n                }\n                if (sampler !== undefined) {\n                  this._parseSampler(texture, gltf.samplers[sampler]);\n                }\n                return texture;\n              });\n          } else {\n            const bufferView = gltf.bufferViews[bufferViewIndex];\n            const bufferViewData = GLTFUtil.getBufferViewData(bufferView, buffers);\n            return GLTFUtil.loadImageBuffer(bufferViewData, mimeType).then((image) => {\n              const texture = new Texture2D(engine, image.width, image.height);\n              texture.setImageSource(image);\n              texture.generateMipmaps();\n              texture.name = textureName || imageName || `texture_${index}`;\n              if (sampler !== undefined) {\n                this._parseSampler(texture, gltf.samplers[sampler]);\n              }\n              return texture;\n            });\n          }\n        })\n      ).then((textures: Texture2D[]) => {\n        context.textures = textures;\n      });\n    }\n  }\n\n  private _parseSampler(texture: Texture2D, sampler: ISampler): void {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n\n    if (magFilter || minFilter) {\n      Logger.warn(\"texture use filterMode in engine\");\n    }\n\n    if (wrapS) {\n      texture.wrapModeU = TextureParser._wrapMap[wrapS];\n    }\n\n    if (wrapT) {\n      texture.wrapModeV = TextureParser._wrapMap[wrapT];\n    }\n  }\n}\n","import { Logger } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\n\nexport class Validator extends Parser {\n  parse(context: GLTFResource): void {\n    const {\n      gltf: {\n        asset: { version },\n        extensionsUsed,\n        extensionsRequired\n      }\n    } = context;\n\n    const gltfVersion = Number(version);\n    if (!(gltfVersion >= 2 && gltfVersion < 3)) {\n      throw \"Only support gltf 2.x.\";\n    }\n\n    if (extensionsUsed) {\n      Logger.info(\"extensionsUsed: \", extensionsUsed);\n      for (let i = 0; i < extensionsUsed.length; i++) {\n        if (!Parser.hasExtensionParser(extensionsUsed[i])) {\n          Logger.warn(`Extension ${extensionsUsed[i]} is not implemented, you can customize this extension in gltf.`);\n        }\n      }\n    }\n\n    if (extensionsRequired) {\n      Logger.info(`extensionsRequired: ${extensionsRequired}`);\n      for (let i = 0; i < extensionsRequired.length; i++) {\n        const extensionRequired = extensionsRequired[i];\n\n        if (!Parser.hasExtensionParser(extensionRequired)) {\n          Logger.error(`GLTF parser has not supported required extension ${extensionRequired}.`);\n        } else {\n          Parser.initialize(extensionRequired);\n        }\n      }\n    }\n  }\n}\n","import { GLTFResource } from \"./GLTFResource\";\nimport { AnimationParser } from \"./parser/AnimationParser\";\nimport { BufferParser } from \"./parser/BufferParser\";\nimport { EntityParser } from \"./parser/EntityParser\";\nimport { MaterialParser } from \"./parser/MaterialParser\";\nimport { MeshParser } from \"./parser/MeshParser\";\nimport { Parser } from \"./parser/Parser\";\nimport { SceneParser } from \"./parser/SceneParser\";\nimport { SkinParser } from \"./parser/SkinParser\";\nimport { TextureParser } from \"./parser/TextureParser\";\nimport { Validator } from \"./parser/Validator\";\n\nexport class GLTFParser {\n  static instance = new GLTFParser([\n    BufferParser,\n    Validator,\n    TextureParser,\n    MaterialParser,\n    MeshParser,\n    EntityParser,\n    SkinParser,\n    AnimationParser,\n    SceneParser\n  ]);\n\n  private _pipes: Parser[] = [];\n\n  private constructor(pipes: (new () => Parser)[]) {\n    pipes.forEach((pipe: new () => Parser, index: number) => {\n      this._pipes[index] = new pipe();\n    });\n  }\n\n  parse(context: GLTFResource): Promise<GLTFResource> {\n    let lastPipe: void | Promise<void>;\n\n    return new Promise((resolve, reject) => {\n      this._pipes.forEach((parser: Parser) => {\n        if (lastPipe) {\n          lastPipe = lastPipe.then(() => {\n            return parser.parse(context);\n          });\n        } else {\n          lastPipe = parser.parse(context);\n        }\n      });\n\n      if (lastPipe) {\n        lastPipe\n          .then(() => {\n            resolve(context);\n          })\n          .catch(reject);\n      } else {\n        resolve(context);\n      }\n    });\n  }\n}\n","import {\n  AnimationClip,\n  Camera,\n  EngineObject,\n  Entity,\n  Light,\n  Material,\n  ModelMesh,\n  Renderer,\n  Skin,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { IGLTF } from \"./Schema\";\n\n/**\n * Product after GLTF parser, usually, `defaultSceneRoot` is only needed to use.\n */\nexport class GLTFResource extends EngineObject {\n  /** GLTF file url. */\n  url: string;\n  /** GLTF file content. */\n  gltf: IGLTF;\n  /** ArrayBuffer after BufferParser. */\n  buffers: ArrayBuffer[];\n  /** Oasis Texture2D after TextureParser. */\n  textures?: Texture2D[];\n  /** Oasis Material after MaterialParser. */\n  materials?: Material[];\n  /** Oasis ModelMesh after MeshParser. */\n  meshes?: ModelMesh[][];\n  /** Oasis Skin after SkinParser. */\n  skins?: Skin[];\n  /** Oasis AnimationClip after AnimationParser. */\n  animations?: AnimationClip[];\n  /** Oasis Entity after EntityParser. */\n  entities: Entity[];\n  /** Oasis Camera after SceneParser. */\n  cameras?: Camera[];\n  /** GLTF can export lights in extension KHR_lights_punctual */\n  lights?: Light[];\n  /** Oasis RootEntities after SceneParser. */\n  sceneRoots: Entity[];\n  /** Oasis RootEntity after SceneParser. */\n  defaultSceneRoot: Entity;\n  /** Renderer can replace material by `renderer.setMaterial` if gltf use plugin-in KHR_materials_variants. */\n  variants?: { renderer: Renderer; material: Material; variants: string[] }[];\n}\n","import { AssetPromise, AssetType, Loader, LoadItem, resourceLoader, ResourceManager } from \"@oasis-engine/core\";\nimport { GLTFParser } from \"./gltf/GLTFParser\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\n\n@resourceLoader(AssetType.Prefab, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<GLTFResource> {\n    const url = item.url;\n    return new AssetPromise((resolve, reject) => {\n      const resource = new GLTFResource(resourceManager.engine);\n      resource.url = url;\n\n      GLTFParser.instance\n        .parse(resource)\n        .then(resolve)\n        .catch((e) => {\n          console.error(e);\n          reject(`Error loading glTF model from ${url} .`);\n        });\n    });\n  }\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem): AssetPromise<string> {\n    return this.request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n","/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { TextureFormat } from \"@oasis-engine/core\";\nimport { GLCompressedTextureInternalFormat } from \"@oasis-engine/rhi-webgl\";\nimport { KTXContainer, Mipmap } from \"./type\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.DXT1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.DXT5;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Oasis Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Oasis Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n","import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@oasis-engine/core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCubeMap(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<HTMLImageElement>(item.url, {\n        ...item,\n        type: \"image\"\n      })\n        .then((image) => {\n          const texture = new Texture2D(resourceManager.engine, image.width, image.height);\n          /** @ts-ignore */\n          if (!texture._platformTexture) return;\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (item.url.indexOf(\"data:\") !== 0) {\n            const splitPath = item.url.split(\"/\");\n            texture.name = splitPath[splitPath.length - 1];\n          }\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<HTMLImageElement>(url, {\n            ...item,\n            type: \"image\"\n          })\n        )\n      )\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const tex = new TextureCubeMap(resourceManager.engine, width);\n\n          /** @ts-ignore */\n          if (!tex._platformTexture) return;\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n\n          tex.generateMipmaps();\n          resolve(tex);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  Texture2D,\n  Sprite,\n  SpriteAtlas\n} from \"@oasis-engine/core\";\nimport { AtlasConfig } from \"@oasis-engine/core/types/2d/atlas/types\";\nimport { Rect, Vector2 } from \"@oasis-engine/math\";\nimport { GLTFUtil } from \"./gltf/GLTFUtil\";\n\n@resourceLoader(AssetType.SpriteAtlas, [\"atlas\"], false)\nclass SpriteAtlasLoader extends Loader<SpriteAtlas> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<SpriteAtlas> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<AtlasConfig>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((atlasData) => {\n          const { atlasItems, format } = atlasData;\n          const atlasItemsLen = atlasItems.length;\n          Promise.all(\n            atlasItems.map(({ img }) =>\n              this.request<HTMLImageElement>(GLTFUtil.parseRelativeUrl(item.url, img), {\n                ...item,\n                type: \"image\"\n              })\n            )\n          ).then((imgs) => {\n            const { engine } = resourceManager;\n            // Generate a SpriteAtlas object.\n            const tempRect = new Rect();\n            const tempVect2 = new Vector2();\n            const spriteAtlas = new SpriteAtlas(engine);\n            for (let i = 0; i < atlasItemsLen; i++) {\n              // Generate Texture2D according to configuration.\n              const originalImg = imgs[i];\n              const { width, height } = originalImg;\n              const texture = new Texture2D(engine, width, height, format);\n              texture.setImageSource(originalImg);\n              texture.generateMipmaps();\n              // Generate all the sprites on this texture.\n              const atlasItem = atlasItems[i];\n              const sprites = atlasItem.sprites;\n              const sourceWidthReciprocal = 1.0 / width;\n              const sourceHeightReciprocal = 1.0 / height;\n              for (let j = sprites.length - 1; j >= 0; j--) {\n                const atlasSprite = sprites[j];\n                const { region, pivot, atlasRegionOffset, atlasRegion, id } = atlasSprite;\n                const sprite = new Sprite(\n                  engine,\n                  texture,\n                  region ? tempRect.setValue(region.x, region.y, region.w, region.h) : undefined,\n                  pivot ? tempVect2.setValue(pivot.x, pivot.y) : undefined,\n                  atlasSprite.pixelsPerUnit || undefined,\n                  atlasSprite.name\n                );\n                sprite.atlasRegion.setValue(\n                  atlasRegion.x * sourceWidthReciprocal,\n                  atlasRegion.y * sourceHeightReciprocal,\n                  atlasRegion.w * sourceWidthReciprocal,\n                  atlasRegion.h * sourceHeightReciprocal\n                );\n                atlasSprite.atlasRotated && (sprite.atlasRotated = true);\n                if (atlasRegionOffset) {\n                  const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n                  let originalWReciprocal: number, originalHReciprocal: number;\n                  if (atlasSprite.atlasRotated) {\n                    originalWReciprocal = 1 / (offsetLeft + atlasRegion.h + offsetRight);\n                    originalHReciprocal = 1 / (offsetTop + atlasRegion.w + offsetBottom);\n                  } else {\n                    originalWReciprocal = 1 / (offsetLeft + atlasRegion.w + offsetRight);\n                    originalHReciprocal = 1 / (offsetTop + atlasRegion.h + offsetBottom);\n                  }\n                  sprite.atlasRegionOffset.setValue(\n                    offsetLeft * originalWReciprocal,\n                    offsetTop * originalHReciprocal,\n                    offsetRight * originalWReciprocal,\n                    offsetBottom * originalHReciprocal\n                  );\n                }\n                if (id !== undefined) {\n                  // @ts-ignore\n                  sprite._assetID = id;\n                }\n                // @ts-ignore\n                spriteAtlas._addSprite(sprite);\n              }\n            }\n            resolve(spriteAtlas);\n          });\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AmbientLight,\n  AssetPromise,\n  AssetType,\n  DiffuseMode,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap,\n  TextureFilterMode\n} from \"@oasis-engine/core\";\nimport { SphericalHarmonics3 } from \"@oasis-engine/math\";\n\n@resourceLoader(AssetType.Env, [\"env\"])\nclass EnvLoader extends Loader<AmbientLight> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AmbientLight> {\n    return new AssetPromise((resolve, reject) => {\n      resourceManager\n        .load<ArrayBuffer>({\n          type: AssetType.Buffer,\n          url: item.url\n        })\n        .then((arraybuffer) => {\n          const shArray = new Float32Array(arraybuffer, 0, 27);\n          const shByteLength = 27 * 4;\n          const size = new Uint16Array(arraybuffer, shByteLength, 1)?.[0];\n\n          const texture = new TextureCubeMap(resourceManager.engine, size);\n          texture.filterMode = TextureFilterMode.Trilinear;\n          const mipmapCount = texture.mipmapCount;\n          let offset = shByteLength + 2;\n\n          for (let mipLevel = 0; mipLevel < mipmapCount; mipLevel++) {\n            const mipSize = size >> mipLevel;\n\n            for (let face = 0; face < 6; face++) {\n              const dataSize = mipSize * mipSize * 4;\n              const data = new Uint8Array(arraybuffer, offset, dataSize);\n              offset += dataSize;\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, mipLevel);\n            }\n          }\n\n          const ambientLight = new AmbientLight();\n          const sh = new SphericalHarmonics3();\n\n          ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;\n          sh.setValueByArray(shArray);\n          ambientLight.diffuseSphericalHarmonics = sh;\n          ambientLight.specularTexture = texture;\n          ambientLight.specularTextureDecodeRGBM = true;\n\n          resolve(ambientLight);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import { EngineObject } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { ExtensionSchema } from \"./Schema\";\n\nexport abstract class ExtensionParser {\n  initialize(): void {}\n\n  parseEngineResource(\n    schema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: GLTFResource,\n    ...extra\n  ): void | Promise<void> {}\n\n  createEngineResource(schema: ExtensionSchema, context: GLTFResource, ...extra): EngineObject | Promise<EngineObject> {\n    return null;\n  }\n}\n","import { DRACODecoder } from \"@oasis-engine/draco\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { IMeshPrimitive } from \"../Schema\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRDracoMeshCompression } from \"./Schema\";\n\n@registerExtension(\"KHR_draco_mesh_compression\")\nclass KHR_draco_mesh_compression extends ExtensionParser {\n  private static _decoder: DRACODecoder;\n\n  initialize(): void {\n    if (!KHR_draco_mesh_compression._decoder) {\n      KHR_draco_mesh_compression._decoder = new DRACODecoder();\n    }\n  }\n\n  createEngineResource(schema: IKHRDracoMeshCompression, context: GLTFResource, gltfPrimitive: IMeshPrimitive) {\n    const { gltf, buffers } = context;\n    const { bufferViews, accessors } = gltf;\n    const { bufferView: bufferViewIndex, attributes: gltfAttributeMap } = schema;\n\n    const attributeMap = {};\n    const attributeTypeMap = {};\n    for (let attributeName in gltfAttributeMap) {\n      attributeMap[attributeName] = gltfAttributeMap[attributeName];\n    }\n    for (let attributeName in gltfPrimitive.attributes) {\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        const accessorDef = accessors[gltfPrimitive.attributes[attributeName]];\n        attributeTypeMap[attributeName] = GLTFUtil.getComponentType(accessorDef.componentType).name;\n      }\n    }\n    const indexAccessor = accessors[gltfPrimitive.indices];\n    const indexType = GLTFUtil.getComponentType(indexAccessor.componentType).name;\n    const taskConfig = {\n      attributeIDs: attributeMap,\n      attributeTypes: attributeTypeMap,\n      useUniqueIDs: true,\n      indexType\n    };\n    const buffer = GLTFUtil.getBufferViewData(bufferViews[bufferViewIndex], buffers);\n    return KHR_draco_mesh_compression._decoder.decode(buffer, taskConfig).then((parsedGeometry) => parsedGeometry);\n  }\n}\n","import { DirectLight, Entity, PointLight, SpotLight } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRLightsPunctual_Light } from \"./Schema\";\n\n@registerExtension(\"KHR_lights_punctual\")\nclass KHR_lights_punctual extends ExtensionParser {\n  parseEngineResource(schema: IKHRLightsPunctual_Light, entity: Entity, context: GLTFResource): void {\n    const { color, intensity = 1, type, range, spot } = schema;\n    let light: DirectLight | PointLight | SpotLight;\n\n    if (type === \"directional\") {\n      light = entity.addComponent(DirectLight);\n    } else if (type === \"point\") {\n      light = entity.addComponent(PointLight);\n    } else if (type === \"spot\") {\n      light = entity.addComponent(SpotLight);\n    }\n\n    if (color) {\n      light.color.setValue(color[0], color[1], color[2], 1);\n    }\n\n    light.intensity = intensity;\n\n    if (range && !(light instanceof DirectLight)) {\n      light.distance = range;\n    }\n\n    if (spot && light instanceof SpotLight) {\n      const { innerConeAngle = 0, outerConeAngle = Math.PI / 4 } = spot;\n\n      light.angle = innerConeAngle;\n      light.penumbra = outerConeAngle - innerConeAngle;\n    }\n\n    if (!context.lights) context.lights = [];\n    context.lights.push(light);\n  }\n}\n","import { PBRSpecularMaterial } from \"@oasis-engine/core\";\nimport { Color } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsPbrSpecularGlossiness } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_pbrSpecularGlossiness\")\nclass KHR_materials_pbrSpecularGlossiness extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsPbrSpecularGlossiness, context: GLTFResource): PBRSpecularMaterial {\n    const { engine, textures } = context;\n    const material = new PBRSpecularMaterial(engine);\n    const { diffuseFactor, diffuseTexture, specularFactor, glossinessFactor, specularGlossinessTexture } = schema;\n\n    if (diffuseFactor) {\n      material.baseColor = new Color(\n        Color.linearToGammaSpace(diffuseFactor[0]),\n        Color.linearToGammaSpace(diffuseFactor[1]),\n        Color.linearToGammaSpace(diffuseFactor[2]),\n        diffuseFactor[3]\n      );\n    }\n\n    if (diffuseTexture) {\n      material.baseTexture = textures[diffuseTexture.index];\n      MaterialParser._parseTextureTransform(material, diffuseTexture.extensions, context);\n    }\n\n    if (specularFactor) {\n      material.specularColor = new Color(\n        Color.linearToGammaSpace(specularFactor[0]),\n        Color.linearToGammaSpace(specularFactor[1]),\n        Color.linearToGammaSpace(specularFactor[2])\n      );\n    }\n\n    if (glossinessFactor !== undefined) {\n      material.glossiness = glossinessFactor;\n    }\n\n    if (specularGlossinessTexture) {\n      material.specularGlossinessTexture = textures[specularGlossinessTexture.index];\n      MaterialParser._parseTextureTransform(material, specularGlossinessTexture.extensions, context);\n    }\n\n    return material;\n  }\n}\n","import { UnlitMaterial } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsUnlit } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_unlit\")\nclass KHR_materials_unlit extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsUnlit, context: GLTFResource): UnlitMaterial {\n    const { engine } = context;\n    const material = new UnlitMaterial(engine);\n\n    return material;\n  }\n}\n","import { Renderer } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialVariants_Mapping } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_variants\")\nclass KHR_materials_variants extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialVariants_Mapping, renderer: Renderer, context: GLTFResource): void {\n    const {\n      gltf: {\n        extensions: {\n          KHR_materials_variants: { variants: variantNames }\n        }\n      },\n      materials\n    } = context;\n    const { mappings } = schema;\n\n    for (let i = 0; i < mappings.length; i++) {\n      const { material, variants } = mappings[i];\n      if (!context.variants) context.variants = [];\n      context.variants.push({\n        renderer,\n        material: materials[material],\n        variants: variants.map((index) => variantNames[index].name)\n      });\n    }\n  }\n}\n","import { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_mesh_quantization\")\nclass KHR_mesh_quantization extends ExtensionParser {}\n","import { Logger, PBRBaseMaterial, UnlitMaterial } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRTextureTransform } from \"./Schema\";\n\n@registerExtension(\"KHR_texture_transform\")\nclass KHR_texture_transform extends ExtensionParser {\n  parseEngineResource(\n    schema: IKHRTextureTransform,\n    material: PBRBaseMaterial | UnlitMaterial,\n    context: GLTFResource\n  ): void {\n    const { offset, rotation, scale, texCoord } = schema;\n\n    if (offset) {\n      material.tilingOffset.z = offset[0];\n      material.tilingOffset.w = offset[1];\n    }\n\n    if (scale) {\n      material.tilingOffset.x = scale[0];\n      material.tilingOffset.y = scale[1];\n    }\n\n    if (rotation) {\n      Logger.warn(\"rotation in KHR_texture_transform is not supported now\");\n    }\n\n    if (texCoord) {\n      Logger.warn(\"texCoord in KHR_texture_transform is not supported now\");\n    }\n  }\n}\n","import { Animator, AnimatorController, AnimatorState, Component, Entity, UpdateFlag } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../gltf/GLTFResource\";\n\n/**\n * @deprecated\n * Temporarily only for editor use.\n * Remove when editor finish change from gltf to prefab.\n */\nexport class GLTFModel extends Component {\n  private _animatorController: AnimatorController;\n  private _speed: number = 1.0;\n  private _animator: Animator;\n  private _asset: GLTFResource;\n  private _glTFEntity: Entity;\n  private _clipPreview: string;\n  private _hasBuiltNode: boolean = false;\n  private _controllerUpdateFlag: UpdateFlag;\n\n  get asset() {\n    return this._asset;\n  }\n\n  set asset(value: GLTFResource) {\n    const { _animatorController: animatorController, _speed: speed } = this;\n    const entity = this._glTFEntity;\n    if (value && value.defaultSceneRoot === this._glTFEntity) {\n      return;\n    }\n    if (!this._hasBuiltNode) {\n      entity.clearChildren();\n      if (value !== null) {\n        entity?.destroy();\n        const gltfEntity = value.defaultSceneRoot.clone();\n        this._animator = gltfEntity.getComponent(Animator);\n        this.entity.addChild(gltfEntity);\n        gltfEntity.isActive = this.enabled;\n        this._glTFEntity = gltfEntity;\n      }\n    }\n    if (animatorController) {\n      this._animator.animatorController = animatorController;\n      this._animator.speed = speed;\n      this._playState();\n    }\n    this._asset = value;\n  }\n\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    const { _animator: animator } = this;\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      // @ts-ignore\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n      if (animator) {\n        animator.animatorController = animatorController;\n        this._playState();\n      }\n    }\n  }\n\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(speed: number) {\n    const { _animator: animator } = this;\n    this._speed = speed;\n    if (animator) {\n      animator.speed = speed;\n      this._playState();\n    }\n  }\n\n  get animator() {\n    return this._animator;\n  }\n\n  get clipPreview() {\n    return this._clipPreview;\n  }\n\n  set clipPreview(value: string) {\n    if (this._animator) {\n      if (value) {\n        if (value === \"_default\") {\n          this._playDefaultState();\n        } else {\n          this._animator.play(value, 0);\n        }\n      } else {\n        // @ts-ignore\n        this._animator._reset();\n      }\n    }\n    this._clipPreview = value;\n  }\n\n  constructor(entity) {\n    super(entity);\n  }\n\n  /**\n   * Init.\n   * @param props - Init props\n   */\n  init(props): void {\n    const { asset = null, speed, animatorController, clipPreview, isClone } = props;\n    if (isClone) {\n      const rootName = (props as any).gltfRootName;\n      if (rootName) {\n        this._glTFEntity = this.entity.findByName(rootName);\n      }\n    }\n    if (!this._glTFEntity) {\n      const rootName = `GLTF-${Date.now()}`;\n      (props as any).gltfRootName = rootName;\n      this._glTFEntity = this.entity.createChild(rootName);\n      this._hasBuiltNode = false;\n    } else {\n      this._hasBuiltNode = true;\n    }\n\n    this.asset = asset;\n    this.animatorController = animatorController;\n    this.speed = speed;\n    this.clipPreview = clipPreview;\n  }\n\n  update() {\n    if (this._animator) {\n      if (this._controllerUpdateFlag?.flag) {\n        this._playState();\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  _onEnable(): void {\n    this._glTFEntity && (this._glTFEntity.isActive = true);\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   */\n  _onDisable(): void {\n    this._glTFEntity && (this._glTFEntity.isActive = false);\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  _playState() {\n    const playStateName = this._clipPreview;\n    if (playStateName) {\n      if (playStateName === \"_default\") {\n        this._playDefaultState();\n      } else {\n        this._animator.play(playStateName, 0);\n      }\n    } else {\n       // @ts-ignore\n      this._animator._reset();\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n\n  _playDefaultState() {\n    const { _animatorController: animatorController, _animator: animator } = this;\n    if (!animator) return;\n    if (animatorController) {\n      const { layers } = animatorController;\n      for (let i = 0, length = layers.length; i < length; ++i) {\n        //@ts-ignore\n        const defaultState = layers[i]?.stateMachine?._defaultState;\n        const defaultStateName = defaultState?.name;\n        if (defaultStateName) {\n          animator.play(defaultStateName, i);\n        } else {\n           // @ts-ignore\n          animator._reset();\n        }\n        if (this._controllerUpdateFlag?.flag) {\n          this._controllerUpdateFlag.flag = false;\n        }\n      }\n    }\n  }\n}\n","import { BlinnPhongMaterial, Entity, MeshRenderer, PrimitiveMesh } from \"@oasis-engine/core\";\n\n// Only for editor\nexport class Model extends MeshRenderer {\n  private _props: Object = null;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.setMaterial(new BlinnPhongMaterial(this.engine));\n  }\n\n  get material(): any {\n    return this.getMaterial();\n  }\n\n  set material(mtl: any) {\n    this.setMaterial(mtl);\n  }\n\n  setProps(props: any = {}) {\n    if (this._props !== props) {\n      this._props = props;\n    }\n\n    switch (props.geometryType) {\n      case \"Sphere\":\n        this.mesh = PrimitiveMesh.createSphere(this._engine, props.sphereRadius, props.sphereSegments);\n        break;\n\n      case \"Cylinder\":\n        this.mesh = PrimitiveMesh.createCylinder(\n          this._engine,\n          props.cylinderRadiusTop,\n          props.cylinderRadiusBottom,\n          props.cylinderHeight,\n          props.cylinderRadialSegments,\n          props.cylinderHeightSegments\n        );\n        break;\n\n      case \"Plane\":\n        this.mesh = PrimitiveMesh.createPlane(\n          this._engine,\n          props.planeWidth,\n          props.planeHeight,\n          props.planeHorizontalSegments,\n          props.planeVerticalSegments\n        );\n        break;\n\n      case \"Box\":\n        this.mesh = PrimitiveMesh.createCuboid(this._engine, props.boxWidth, props.boxHeight, props.boxDepth);\n        break;\n    }\n  }\n\n  updateProp(key: string, value: string | number) {\n    const props = this._props;\n    props[key] = value;\n    this.setProps(props);\n  }\n}\n","import { Component, Entity } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResource } from \"../resources\";\nimport { Plugin } from \"./Plugin\";\nexport class PluginManager implements PluginHook {\n  private registeredPlugins: Set<Plugin> = new Set();\n  private plugins: PluginHook[] = [];\n\n  register(plugin: Plugin) {\n    this.registeredPlugins.add(plugin);\n  }\n\n  boot(oasis: Oasis) {\n    for (let plugin of this.registeredPlugins.values()) {\n      if (typeof plugin === \"function\") {\n        plugin = plugin(oasis);\n      }\n      this.plugins.push(plugin);\n    }\n  }\n\n  reset() {\n    this.registeredPlugins.clear();\n    this.plugins = [];\n  }\n\n  nodeAdded(entity: Entity) {\n    this.delegateMethod(\"nodeAdded\", entity);\n  }\n\n  private delegateMethod(name: keyof PluginHook, ...args) {\n    this.plugins.forEach((plugin) => plugin[name] && (plugin[name] as any)(...args));\n  }\n}\n\nexport interface PluginHook {\n  oasis?: Oasis;\n  nodeAdded?(entity: Entity): any;\n  beforeNodeUpdated?(id: string, key: string, value: any): any;\n  nodeUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  abilityAdded?(ability: Component): any;\n  beforeAbilityAdded?(config: any): any;\n  beforeAbilityUpdated?(id: string, key: string, value: any): any;\n  abilityUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  schemaParsed?(): any;\n  abilityDeleted?(id: string): any;\n  beforeAbilityDeleted?(id: string): any;\n  beforeNodeDeleted?(config: any): any;\n  beforeResourceRemove?(id: string): any;\n  resourceUpdated?(info: { resource: SchemaResource; id: string; key: string; value: any }): any;\n  beforeResourceUpdate?(id: string, key: string, value: any): any;\n  // todo type\n  beforeResourceAdd?(resource: any): any;\n  resourceAdded?(resource: any): any;\n  beforeSceneUpdated?(field: string, key: string, value: any): any;\n  sceneUpdated?(updateConfig?: { type: string; key: string; value: any }): any;\n}\n\nexport function pluginHook(options: Partial<{ before: keyof PluginHook; after: keyof PluginHook }>): MethodDecorator {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<any>) {\n    const method = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n      options.before && this.oasis.pluginManager.delegateMethod(options.before, ...args);\n      return Promise.resolve(method.apply(this, arguments)).then((returnObj) => {\n        options.after && this.oasis.pluginManager.delegateMethod(options.after, returnObj);\n        return returnObj;\n      });\n    };\n  };\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\n\n/**\n * temp compa\n * @param config\n */\nexport function compatibleToV2(config) {\n  const { abilities = {}, assets = {}, scene = {} } = config;\n  const ids = Object.keys(abilities);\n  const assetKeys = Object.keys(assets);\n  const sceneKeys = Object.keys(scene || {});\n\n  for (let i = 0, l = ids.length; i < l; ++i) {\n    handleComponents(abilities[ids[i]].props);\n  }\n\n  for (let i = 0, l = assetKeys.length; i < l; ++i) {\n    handleAssets(assets[assetKeys[i]].props);\n  }\n\n  for (let i = 0, l = sceneKeys.length; i < l; ++i) {\n    handleSceneProps(scene[sceneKeys[i]].props);\n  }\n\n  return config;\n}\n\n// TODO temp\nfunction handleComponents(props) {\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; ++i) {\n    const k = keys[i];\n    const v = props[k];\n\n    if (Array.isArray(v) && typeof v[0] !== \"object\") {\n      if ([\"color\", \"diffuseColor\", \"specularColor\"].indexOf(k) !== -1) {\n        props[k] = new Color(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 4) {\n        props[k] = new Vector4(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 3) {\n        props[k] = new Vector3(v[0], v[1], v[2]);\n      } else if (v.length === 2) {\n        props[k] = new Vector2(v[0], v[1]);\n      }\n    }\n  }\n}\n\nfunction handleSceneProps(props) {\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; ++i) {\n    const k = keys[i];\n    const v = props[k];\n\n    if (Array.isArray(v) && typeof v[0] !== \"object\") {\n      if (/color/i.test(k)) {\n        props[k] = new Color(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 4) {\n        props[k] = new Vector4(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 3) {\n        props[k] = new Vector3(v[0], v[1], v[2]);\n      } else if (v.length === 2) {\n        props[k] = new Vector2(v[0], v[1]);\n      }\n    }\n  }\n}\n\nfunction handleAssets(props: any = {}) {\n  if (!props) {\n    return;\n  }\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    const value = props[key];\n\n    if (key === \"newMaterial\" || key === \"scripts\") {\n      continue;\n    }\n\n    if (Array.isArray(value) && typeof value[0] !== \"object\") {\n      if ([\"emissiveColor\", \"diffuseColor\", \"specularColor\", \"baseColor\"].indexOf(key) !== -1) {\n        props[key] = new Color(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 4) {\n        props[key] = new Vector4(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 3) {\n        props[key] = new Vector3(value[0], value[1], value[2]);\n      } else if (value.length === 2) {\n        props[key] = new Vector2(value[0], value[1]);\n      }\n    }\n  }\n}\n","import { Component } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { Plugin } from \"./plugins/Plugin\";\nimport { PluginManager } from \"./plugins/PluginManager\";\nimport { Options } from \"./types\";\nimport { compatibleToV2 } from \"./temp.compatible\";\n\nconst CURRENT_SCHEMA_VERSION = 3;\n\nexport class Parser {\n  private pluginManager: PluginManager = new PluginManager();\n  /**\n   * Parse a scene config.\n   * @param options - Options of scene\n   */\n  public parse(options: Options): Promise<Oasis> {\n    if (options?.config?.version !== CURRENT_SCHEMA_VERSION) {\n      console.warn(\n        `schema-parser: schema version \"${options?.config?.version}\" is out of date, please re-pull the latest version (version ${CURRENT_SCHEMA_VERSION}) of the schema`\n      );\n    }\n    compatibleToV2(options.config);\n    return Oasis.create(options, this.pluginManager);\n  }\n\n  register(plugin: Plugin) {\n    this.pluginManager.register(plugin);\n  }\n\n  resetPlugins() {\n    this.pluginManager.reset();\n  }\n\n  private constructor() {}\n\n  static create(): Parser {\n    const parser = new Parser();\n    return parser;\n  }\n\n  /** @internal */\n  public static _components: { [namespace: string]: { [compName: string]: Component } } = {};\n  /**\n   * Register parsing component\n   * @param namespace - Namespace\n   * @param components - Components\n   */\n  static registerComponents(namespace: string, components: { [key: string]: any }) {\n    if (!this._components[namespace]) {\n      this._components[namespace] = {};\n    }\n    Object.assign(this._components[namespace], components);\n  }\n}\n\nexport const parser = Parser.create();\n","export function switchElementsIndex(elements: any[], currentIndex: number, targetIndex: number) {\n  if (currentIndex === targetIndex || targetIndex === null || targetIndex === undefined) {\n    return;\n  }\n  [elements[currentIndex], elements[targetIndex]] = [elements[targetIndex], elements[currentIndex]];\n}\n\nexport function isAsset(config: any): boolean {\n  return config && config.type === \"asset\";\n}\n\nexport function getAllGetters(obj: any): Array<string> {\n  const result = [];\n  const prototype = Object.getPrototypeOf(obj);\n  const prototype_property_descriptors = Object.getOwnPropertyDescriptors(prototype);\n  for (const [property, descriptor] of Object.entries(prototype_property_descriptors)) {\n    if (typeof descriptor.get === \"function\") {\n      result.push(property);\n    }\n  }\n  return result;\n}\n\nexport function union(arr1: Array<any>, arr2: Array<any>): Array<any> {\n  return arr1.concat(arr2.filter((v) => !(arr1.indexOf(v) > -1)));\n}\n\n// https://github.com/BabylonJS/Babylon.js/blob/d780145531ac1b1cee85cbfba4d836dcc24ab58e/src/Engines/Extensions/engine.textureSelector.ts#L70\n// Intelligently add supported compressed formats in order to check for.\n// Check for ASTC support first as it is most powerful and to be very cross platform.\n// Next PVRTC & DXT, which are probably superior to ETC1/2.\n// Likely no hardware which supports both PVR & DXT, so order matters little.\n// ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\nexport const compressedTextureLoadOrder = {\n  astc: 1,\n  s3tc: 2,\n  pvrtc: 3,\n  etc: 4,\n  etc1: 5\n};\n","import { Logger, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResourceManager } from \"../ResourceManager\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\n\ninterface IResourceMeta {\n  name?: string;\n  url?: string;\n  size?: number;\n  source?: string;\n}\n\nexport abstract class SchemaResource {\n  protected _meta: IResourceMeta = {};\n  protected _attachedResources: Array<SchemaResource> = [];\n\n  /**\n   * Resource\n   */\n  get resource() {\n    return this._resource;\n  }\n\n  get meta(): IResourceMeta {\n    return this._meta;\n  }\n\n  get attachedResources() {\n    return this._attachedResources;\n  }\n\n  protected setMeta() {}\n\n  constructor(protected resourceManager: SchemaResourceManager, protected _resource?: any) {\n    this.setMeta();\n  }\n\n  abstract load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<SchemaResource>;\n  loadWithAttachedResources(\n    resourceLoader: any,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      this.load(resourceLoader, assetConfig, oasis)\n        .then(() => {\n          resolve({\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          });\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getProps(): any {\n    return {};\n  }\n\n  bind(): void {}\n  attach(): void {}\n\n  update(key: string, value: any) {\n    if (isAsset(value)) {\n      const resource = this.resourceManager.get(value.id);\n      if (resource) {\n        this._resource[key] = resource.resource;\n      } else {\n        Logger.warn(`SchemaResource: ${this.meta.name} can't find asset, which id is: ${value.id}`);\n      }\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  updateMeta(key: string, value: any) {\n    this._meta[key] = value;\n  }\n\n  onDestroy() {}\n}\n","import {\n  ResourceManager,\n} from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class AnimationClipResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<any> {\n    return new Promise((resolve) => {\n      this._resource = assetConfig.props || {};\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load AnimationClip Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    return this._resource;\n  }\n}\n","import { AnimationClipResource } from \"./AnimationClipResource\";\nimport {\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AnimatorStateTransition\n} from \"@oasis-engine/core\";\nimport { ResourceManager } from \"@oasis-engine/core\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\n\nexport class AnimatorControllerResource extends SchemaResource {\n  public gltf;\n  private animatorControllerData;\n  private animationClipAssets: any[];\n  private animationsIndices: {\n    name: string;\n    index: number;\n  }[];\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<any> {\n    return new Promise((resolve) => {\n      const { animatorController, animationClips: animationClipAssets, animationsIndices, gltf } =\n        assetConfig.props || {};\n      this._resource = new AnimatorController();\n      this.animatorControllerData = animatorController;\n      this.animationsIndices = animationsIndices || [];\n      this.animationClipAssets = animationClipAssets || [];\n      this.gltf = gltf;\n      !animatorController && this._setDefaultDataByAnimationClip();\n      this.setMetaData(\"name\", assetConfig.name);\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      const clipLoadPromises = [];\n      this.load(resourceManager, assetConfig).then(() => {\n        const result: any = {\n          resources: [this],\n          structure: {\n            index: 0,\n            props: {\n              animationClips: []\n            }\n          }\n        };\n\n        const animations = this.animationsIndices;\n        for (let i = 0, length = animations.length; i < length; ++i) {\n          const clip = animations[i];\n          const clipResourse = new AnimationClipResource(this.resourceManager);\n          this.attachedResources.push(clipResourse);\n          clipLoadPromises.push(\n            clipResourse.loadWithAttachedResources(resourceManager, {\n              type: \"animationClip\",\n              name: clip.name,\n              props: clip\n            })\n          );\n        }\n\n        Promise.all(clipLoadPromises).then((res) => {\n          const { animationClips } = result.structure.props;\n          res.forEach((clip) => {\n            const clipStructure = clip.structure;\n            const clipResource = clip.resources[clipStructure.index];\n            result.resources.push(clipResource);\n            clipStructure.index = result.resources.length - 1;\n            animationClips.push(clipStructure);\n          });\n          resolve(result);\n        });\n      });\n    });\n  }\n\n  setMetaData(key, value) {\n    this._meta[key] = value;\n  }\n\n  update(key: string, value: any) {\n    this._initAnimatorController(value);\n  }\n\n  bind() {\n    const { animatorControllerData, animationClipAssets } = this;\n    this._bindClips(animationClipAssets);\n    if (animatorControllerData) {\n      this._initAnimatorController(animatorControllerData);\n    } else {\n      this._setDefaultDataByAnimationClipAsset();\n    }\n  }\n\n  _initAnimatorController(animatorControllerData) {\n    const { animations } = this.gltf || {};\n    const { layers } = animatorControllerData;\n    if (!animations || !layers) return;\n    this._resource.clearLayers();\n    for (let i = 0, length = layers.length; i < length; ++i) {\n      const { name, blending, weight, stateMachine: stateMachineData } = layers[i];\n      if (!stateMachineData) continue;\n      const layer = new AnimatorControllerLayer(name);\n      layer.blendingMode = blending;\n      layer.weight = weight;\n      const { states } = stateMachineData;\n      const stateMachine = new AnimatorStateMachine();\n      let stateMachineTransitions = [];\n      for (let j = 0, length = states.length; j < length; ++j) {\n        const stateData = states[j];\n        const {\n          name,\n          transitions,\n          clip,\n          speed,\n          wrapMode,\n          clipStartNormalizedTime,\n          clipEndNormalizedTime,\n          isDefaultState\n        } = stateData;\n        const { id: clipAssetId } = clip || {};\n        if (!clipAssetId) continue;\n        const uniqueName = stateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const state = stateMachine.addState(uniqueName);\n        state.speed = speed;\n        state.wrapMode = wrapMode;\n        const animationIndex = this.resourceManager.get(clipAssetId).resource;\n        const animationClip = animations[animationIndex.index];\n        if (!animationClip) continue;\n        state.clip = animationClip;\n        state.clipStartTime = clipStartNormalizedTime;\n        state.clipEndTime = clipEndNormalizedTime;\n        for (let j = 0, length = transitions.length; j < length; ++j) {\n          const transition = transitions[j];\n          transitions[j].srcState = state;\n          stateMachineTransitions.push(transition);\n        }\n\n        if (isDefaultState) {\n          //@ts-ignore\n          stateMachine._defaultState = state;\n        }\n      }\n      for (let j = 0, length = stateMachineTransitions.length; j < length; ++j) {\n        const transitionData = stateMachineTransitions[j];\n        const transition = new AnimatorStateTransition();\n        transition.duration = transitionData.duration;\n        transition.offset = transitionData.offset;\n        transition.exitTime = transitionData.exitTime;\n        transition.destinationState = stateMachine.findStateByName(transitionData.targetStateName);\n        transitionData.srcState.addTransition(transition);\n        delete transitionData.srcState;\n      }\n      layer.stateMachine = stateMachine;\n      this._resource.addLayer(layer);\n    }\n  }\n\n  _bindClips(animationClips) {\n    for (let i = 0, length = animationClips.length; i < length; i++) {\n      const clipAsset = animationClips[i];\n      const clipResource = this.resourceManager.get(clipAsset.id);\n      if (clipResource) {\n        this._attachedResources.push(clipResource);\n      } else {\n        `AnimatorResource: ${this.meta.name} can't find asset \"animationClip\", which id is: ${clipAsset.id}`;\n      }\n    }\n  }\n\n  _setDefaultDataByAnimationClipAsset() {\n    const { animationClipAssets } = this;\n    if (!animationClipAssets.length) {\n      return;\n    }\n    let clips = [];\n    for (let i = 0, length = animationClipAssets.length; i < length; i++) {\n      const clipAsset = this.resourceManager.get(animationClipAssets[i].id);\n      clips.push(clipAsset.resource);\n    }\n    this.animationsIndices = clips;\n    this._setDefaultDataByAnimationClip();\n  }\n\n  _setDefaultDataByAnimationClip() {\n    const { animationsIndices, _resource: animatorController, gltf } = this;\n    if (!animationsIndices.length || !gltf) {\n      return;\n    }\n    const { animations } = gltf\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    layer.stateMachine = animatorStateMachine;\n    for (let i = 0, length = animationsIndices.length; i < length; i++) {\n      const animationIndex = animationsIndices[i];\n      const { name, index} = animationIndex\n      const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n      if (uniqueName !== name) {\n        console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n      }\n      const animatorState = animatorStateMachine.addState(uniqueName);\n      animatorState.clip = animations[index];\n    }\n  }\n}\n","import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class TextureResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureResource> {\n    return new Promise((resolve, reject) => {\n      let url: string;\n      let assetType = AssetType.Texture2D;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            url = compression.url;\n            assetType = AssetType.KTX;\n            break;\n          }\n        }\n      }\n\n      url = url ?? assetConfig.url;\n\n      resourceManager\n        .load({ url, type: assetType })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this._meta.name = this.resource.name;\n    }\n  }\n}\n","import { BlinnPhongMaterial, Logger, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class BlinnPhongMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<BlinnPhongMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new BlinnPhongMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof BlinnPhongMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load BlinnPhongMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `BlinnPhongMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, PBRMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nconst attrs = [\n  \"metallic\",\n  \"roughness\",\n  \"roughnessMetallicTexture\",\n\n  // pbr base\n  \"tilingOffset\",\n  \"baseColor\",\n  \"normalTextureIntensity\",\n  \"emissiveColor\",\n  \"occlusionTextureIntensity\",\n  \"baseTexture\",\n  \"normalTexture\",\n  \"emissiveTexture\",\n  \"occlusionTexture\",\n\n  // base material\n  \"isTransparent\",\n  \"alphaCutoff\",\n  \"renderFace\",\n  \"blendMode\"\n];\nexport class PBRMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          attrs.forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    attrs.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, PBRSpecularMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nconst attrs = [\n  \"specularColor\",\n  \"glossiness\",\n  \"specularGlossinessTexture\",\n\n  // pbr base\n  \"tilingOffset\",\n  \"baseColor\",\n  \"normalTextureIntensity\",\n  \"emissiveColor\",\n  \"occlusionTextureIntensity\",\n  \"baseTexture\",\n  \"normalTexture\",\n  \"emissiveTexture\",\n  \"occlusionTexture\",\n\n  // base material\n  \"isTransparent\",\n  \"alphaCutoff\",\n  \"renderFace\",\n  \"blendMode\"\n];\n\nexport class PBRSpecularMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRSpecularMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRSpecularMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRSpecularMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRSpecularMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          Object.keys(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    attrs.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `PBRSpecularMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, UnlitMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class UnlitMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<UnlitMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new UnlitMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof UnlitMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { AnimatorControllerResource } from \"./AnimatorControllerResource\";\nimport {\n  AssetType,\n  Entity,\n  Logger,\n  MeshRenderer,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  ResourceManager,\n  UnlitMaterial\n} from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { BlinnPhongMaterialResource } from \"./BlinnPhongMaterialResource\";\nimport { PBRMaterialResource } from \"./PBRMaterialResource\";\nimport { PBRSpecularMaterialResource } from \"./PBRSpecularMaterialResource\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { UnlitMaterialResource } from \"./UnlitMaterialResource\";\n\nexport class GLTFResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<any> {\n    return resourceManager.load<any>({ url: assetConfig.url, type: AssetType.Prefab }).then((res) => {\n      const gltf = res;\n      if (assetConfig.props) {\n        gltf.newMaterial = (assetConfig.props as any).newMaterial;\n        gltf.animatorControllers = (assetConfig.props as any).animatorControllers;\n      }\n      this._resource = gltf;\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve) => {\n      this.load(resourceManager, assetConfig, oasis).then(() => {\n        const gltf = this.resource;\n        const { materials = [], _animationsIndices = [] } = gltf;\n        const materialLoadPromises = [];\n        const clipLoadPromises = [];\n        let animatorControllerLoadPromise: Promise<any>;\n        const result = {\n          resources: [this],\n          structure: {\n            index: 0,\n            props: {\n              newMaterial: [],\n              animatorControllers: []\n            }\n          }\n        };\n        if (materials?.length) {\n          for (let i = 0; i < materials.length; i++) {\n            const material = materials[i];\n            let materialResource = null;\n            let type = \"\";\n\n            if (material instanceof PBRMaterial) {\n              materialResource = new PBRMaterialResource(this.resourceManager);\n              type = \"PBRMaterial\";\n            } else if (material instanceof UnlitMaterial) {\n              materialResource = new UnlitMaterialResource(this.resourceManager);\n              type = \"UnlitMaterial\";\n            } else if (material instanceof PBRSpecularMaterial) {\n              materialResource = new PBRSpecularMaterialResource(this.resourceManager);\n              type = \"PBRSpecularMaterial\";\n            } else {\n              materialResource = new BlinnPhongMaterialResource(this.resourceManager);\n              type = \"BlinnPhongMaterial\";\n            }\n\n            this._attachedResources.push(materialResource);\n            materialLoadPromises.push(\n              materialResource.loadWithAttachedResources(resourceManager, {\n                type,\n                name: material.name,\n                resource: material\n              })\n            );\n          }\n        }\n\n        if (_animationsIndices.length) {\n          const animatorControllerResource = new AnimatorControllerResource(this.resourceManager);\n          this._attachedResources.push(animatorControllerResource);\n          animatorControllerLoadPromise = animatorControllerResource.loadWithAttachedResources(resourceManager, {\n            type: \"animatorController\",\n            name: \"AnimatorController\",\n            props: {\n              animationsIndices: _animationsIndices,\n              gltf: this._resource\n            }\n          });\n        }\n\n        const loadAttachedMaterial = Promise.all(materialLoadPromises).then((res) => {\n          const newMaterial = result.structure.props.newMaterial;\n          res.forEach((mat) => {\n            const matStructure = mat.structure;\n            const matResource = mat.resources[matStructure.index];\n            result.resources.push(matResource);\n            matStructure.index = result.resources.length - 1;\n            for (const key in matStructure.props) {\n              if (matStructure.props.hasOwnProperty(key)) {\n                const textureStructure = matStructure.props[key];\n                const textureResource = mat.resources[textureStructure.index];\n                result.resources.push(textureResource);\n                textureStructure.index = result.resources.length - 1;\n              }\n            }\n            newMaterial.push(matStructure);\n          });\n        });\n        const loadAttachedController = animatorControllerLoadPromise\n          ? animatorControllerLoadPromise.then((res) => {\n              const { animatorControllers } = result.structure.props;\n              const controllerStructure = res.structure;\n              const controllerResource = res.resources[controllerStructure.index];\n              result.resources.push(controllerResource as any);\n              controllerStructure.index = result.resources.length - 1;\n              const { animationClips } = controllerStructure.props;\n              if (animationClips) {\n                for (let i = 0, length = animationClips.length; i < length; ++i) {\n                  const clipStructure = animationClips[i];\n                  const clipResource = res.resources[clipStructure.index];\n                  result.resources.push(clipResource);\n                  clipStructure.index = result.resources.length - 1;\n                }\n              }\n              animatorControllers.push(controllerStructure);\n            })\n          : Promise.resolve();\n        Promise.all([loadAttachedMaterial, loadAttachedController]).then(() => {\n          resolve(result);\n        });\n      });\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this.meta.name = assetConfig.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    this.bindMaterials(resource.newMaterial);\n    this.bindAnimatorControllers(resource.animatorControllers);\n  }\n\n  update(key: string, value: any) {\n    if (key === \"newMaterial\") {\n      this.bindMaterials(value);\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  private bindMaterials(newMaterialsConfig) {\n    const newMaterialCount = newMaterialsConfig.length;\n    if (!newMaterialsConfig || !newMaterialsConfig.length) {\n      return;\n    }\n\n    const gltf = this._resource;\n\n    const newMaterials = new Array(newMaterialCount);\n    gltf.newMaterial = newMaterials;\n\n    for (let i = 0; i < newMaterialsConfig.length; i++) {\n      const mtlResource = this.resourceManager.get(newMaterialsConfig[i].id);\n      if (mtlResource) {\n        this._attachedResources.push(mtlResource);\n        newMaterials[i] = mtlResource.resource;\n      } else {\n        Logger.warn(\n          `GLTFResource: ${this.meta.name} can't find asset \"material\", which id is: ${newMaterialsConfig[i].id}`\n        );\n      }\n    }\n\n    const gltfRoot = gltf.defaultSceneRoot as Entity;\n    const originMaterials = gltf.materials;\n    const meshRenderers: MeshRenderer[] = gltfRoot.getComponentsIncludeChildren(MeshRenderer, []);\n\n    for (let i = 0; i < newMaterialCount; i++) {\n      const newMaterial = newMaterials[i];\n      const originMaterial = originMaterials[i];\n      for (let j = 0; j < meshRenderers.length; j++) {\n        const meshRenderer = meshRenderers[j];\n        const meshMaterials = meshRenderer.getMaterials();\n        for (let k = 0; k < meshMaterials.length; k++) {\n          if (originMaterial === meshMaterials[k]) {\n            meshRenderer.setMaterial(k, newMaterial);\n          }\n        }\n      }\n    }\n  }\n\n  private bindAnimatorControllers(animatorControllers) {\n    for (let i = 0, length = animatorControllers.length; i < length; i++) {\n      const animatorControllerAsset = animatorControllers[i];\n      const controllerResource = <AnimatorControllerResource>this.resourceManager.get(animatorControllerAsset.id);\n      controllerResource.gltf = this._resource;\n      if (controllerResource) {\n        this._attachedResources.push(controllerResource);\n      } else {\n        `GLTFResource: ${this.meta.name} can't find asset \"animatorController\", which id is: ${animatorControllerAsset.id}`;\n      }\n    }\n  }\n}\n","import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\nimport { Oasis } from \"../Oasis\";\nimport { Parser } from \"../Parser\";\n\nexport const scriptAbility = {};\nexport function script(name: string) {\n  return (target: any) => {\n    scriptAbility[name] = target;\n  };\n}\nexport class ScriptResource extends SchemaResource {\n  private isInit = false;\n\n  private initScriptContext() {\n    if (this.isInit) {\n      return;\n    }\n    this.isInit = true;\n    (window as any).__o3_script_context__ = {\n      o3: Parser._components[\"o3\"],\n      script: (name: string) => {\n        return (target: any) => {\n          scriptAbility[name] = target;\n        };\n      }\n    };\n  }\n\n  load(resourceLoader, assetConfig: AssetConfig, oasis: Oasis): Promise<ScriptResource> {\n    this.initScriptContext();\n    return new Promise((resolve) => {\n      const config = assetConfig as any;\n      const scripts = config.props.scripts;\n\n      if (!this.resourceManager.isLocal) {\n        const scriptDom = document.createElement(\"script\");\n        scriptDom.crossOrigin = \"anonymous\";\n        this.setMeta(assetConfig);\n        scriptDom.onload = () => {\n          const o3Scripts = (window as any).o3Scripts;\n          for (let i = 0; i < scripts.length; i++) {\n            const name = scripts[i].name;\n            this._resource = o3Scripts && o3Scripts[name];\n            scriptAbility[name] = this._resource;\n          }\n          resolve(this);\n        };\n        scriptDom.src = assetConfig.url;\n        document.body.appendChild(scriptDom);\n      } else {\n        for (let i = 0; i < scripts.length; i++) {\n          const name = scripts[i].name;\n          scriptAbility[name] = oasis.options?.scripts[name];\n        }\n        resolve(this);\n      }\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this._meta.name = assetConfig.name;\n      this._meta.url = assetConfig.url;\n      this._meta.source = assetConfig.source;\n    }\n  }\n}\n","import { Logger, ResourceManager, Sprite, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class SpriteResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<SpriteResource> {\n    return new Promise((resolve) => {\n      const assetObj = new Sprite(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      const { configProps } = this;\n      const { pivotType, pivot } = configProps;\n\n      if (typeof pivot !== \"undefined\" && typeof pivotType !== \"undefined\" && pivotType !== SpritePivotType.Custom) {\n        switch (pivotType) {\n          case SpritePivotType.Center:\n            pivot.x = 0.5;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.TopLeft:\n            pivot.x = 0;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.Top:\n            pivot.x = 0.5;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.TopRight:\n            pivot.x = 1;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.Left:\n            pivot.x = 0;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.Right:\n            pivot.x = 1;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.BottomLeft:\n            pivot.x = 0;\n            pivot.y = 0;\n            break;\n          case SpritePivotType.Bottom:\n            pivot.x = 0.5;\n            pivot.y = 0;\n            break;\n          case SpritePivotType.BottomRight:\n            pivot.x = 1;\n            pivot.y = 0;\n            break;\n          default:\n            break;\n        }\n      }\n\n      for (let k in configProps) {\n        if (!isAsset(configProps[k]) && typeof configProps[k] !== \"undefined\") {\n          assetObj[k] = configProps[k];\n        }\n      }\n\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof SpriteResource) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load Sprite Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const sprite = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(sprite[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, sprite[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    this.configProps &&\n      Object.keys(this.configProps).forEach((attr) => {\n        const value = this.configProps[attr];\n        if (isAsset(value)) {\n          const textureResource = this.resourceManager.get(value.id);\n          if (textureResource && textureResource instanceof TextureResource) {\n            resource[attr] = textureResource.resource;\n            this._attachedResources.push(textureResource);\n          } else {\n            resource[attr] = null;\n            Logger.warn(`SpriteResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n          }\n        } else {\n          resource[attr] = value;\n        }\n      });\n  }\n}\n\nexport enum SpritePivotType {\n  Center = 0,\n  TopLeft = 1,\n  Top = 2,\n  TopRight = 3,\n  Left = 4,\n  Right = 5,\n  BottomLeft = 6,\n  Bottom = 7,\n  BottomRight = 8,\n  Custom = 9\n}\n","import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nconst imageOrderMap = {\n  px: 0,\n  nx: 1,\n  py: 2,\n  ny: 3,\n  pz: 4,\n  nz: 5\n};\n\nexport class TextureCubeMapResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureCubeMapResource> {\n    return new Promise((resolve, reject) => {\n      const imageUrls = [];\n      let type = AssetType.TextureCube;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            for (const key in compression.files) {\n              if (compression.files.hasOwnProperty(key)) {\n                const image = compression.files[key];\n                imageUrls[imageOrderMap[key]] = image.url;\n              }\n            }\n            console.warn(compression.type);\n            type = AssetType.KTXCube;\n            break;\n          }\n        }\n      }\n\n      if (type === AssetType.TextureCube) {\n        for (const key in assetConfig.props.images) {\n          if (assetConfig.props.images.hasOwnProperty(key)) {\n            const image = assetConfig.props.images[key];\n            imageUrls[imageOrderMap[key]] = image.url;\n          }\n        }\n      }\n\n      resourceManager\n        .load({\n          urls: imageUrls,\n          type: type\n        })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n}\n","import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\n\nexport class BaseResource extends SchemaResource {\n  load(resourceLoader, assetConfig: AssetConfig): Promise<BaseResource> {\n    return new Promise((resolve) => {\n      this._resource = assetConfig;\n      this.setMetaData(\"name\", this.resource.name);\n      this.setMetaData(\"url\", this.resource.url);\n      resolve(this);\n    });\n  }\n\n  setMetaData(key, value) {\n    this._meta[key] = value;\n  }\n}\n","import { AssetType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class AmbientLightResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<AmbientLightResource> {\n    return new Promise((resolve, reject) => {\n      const { url } = assetConfig;\n      resourceManager\n        .load({ url, type: AssetType.Env })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this._meta.name = this.resource.name;\n    }\n  }\n}\n","import {\n  BoxColliderShape,\n  CapsuleColliderShape,\n  Collider,\n  ColliderShapeUpAxis,\n  DynamicCollider,\n  PlaneColliderShape,\n  SphereColliderShape\n} from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n// 根据Schema构造Component\nexport function colliderConfigure(collider: Collider, props: any) {\n  (<any>collider).isShowCollider = props.isShowCollider;\n\n  const shapes = props.colliderShapes;\n  for (let i = 0; i < shapes.length; i++) {\n    const shape = shapes[i];\n    switch (shape._shapes) {\n      case \"BoxColliderShape\": {\n        const box = new BoxColliderShape();\n        shape.size && box.setSize(shape.size[0], shape.size[1], shape.size[2]);\n        shape.position && box.setPosition(shape.position[0], shape.position[1], shape.position[2]);\n        shape.isTrigger && (box.isTrigger = shape.isTrigger);\n        collider.addShape(box);\n        break;\n      }\n      case \"CapsuleColliderShape\": {\n        const capsule = new CapsuleColliderShape();\n        shape.radius && (capsule.radius = shape.radius);\n        shape.height && (capsule.height = shape.height);\n        if (shape.upAxis) {\n          switch (shape.upAxis) {\n            case \"X\":\n              capsule.upAxis = ColliderShapeUpAxis.X;\n              break;\n            case \"Y\":\n              capsule.upAxis = ColliderShapeUpAxis.Y;\n              break;\n            case \"Z\":\n              capsule.upAxis = ColliderShapeUpAxis.Z;\n              break;\n          }\n        }\n        shape.position && capsule.setPosition(shape.position[0], shape.position[1], shape.position[2]);\n        shape.isTrigger && (capsule.isTrigger = shape.isTrigger);\n        collider.addShape(capsule);\n        break;\n      }\n      case \"PlaneColliderShape\": {\n        const plane = new PlaneColliderShape();\n        shape.rotation && plane.setRotation(shape.rotation[0], shape.rotation[1], shape.rotation[2]);\n        shape.position && plane.setPosition(shape.position[0], shape.position[1], shape.position[2]);\n        shape.isTrigger && (plane.isTrigger = shape.isTrigger);\n        collider.addShape(plane);\n        break;\n      }\n      case \"SphereColliderShape\": {\n        const sphere = new SphereColliderShape();\n        shape.radius && (sphere.radius = shape.radius);\n        shape.position && sphere.setPosition(shape.position[0], shape.position[1], shape.position[2]);\n        shape.isTrigger && (sphere.isTrigger = shape.isTrigger);\n        collider.addShape(sphere);\n        break;\n      }\n    }\n  }\n\n  if (collider instanceof DynamicCollider) {\n    const force = props.force;\n    if (force) {\n      (<DynamicCollider>collider).applyForce(new Vector3(force[0], force[1], force[2]));\n    }\n\n    const torque = props.torque;\n    if (torque) {\n      (<DynamicCollider>collider).applyTorque(new Vector3(torque[0], torque[1], torque[2]));\n    }\n  }\n}\n","import { Component, Logger } from \"@oasis-engine/core\";\nimport { Model } from \"./Model\";\nimport { Oasis } from \"./Oasis\";\nimport { Parser } from \"./Parser\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { scriptAbility } from \"./resources\";\nimport { ComponentConfig, Props } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\nimport { colliderConfigure } from \"./ColliderConfigure\";\n\nexport class AbilityManager {\n  private abilityMap: { [id: string]: Component } = {};\n\n  constructor(private oasis: Oasis) {}\n\n  @pluginHook({ after: \"abilityAdded\", before: \"beforeAbilityAdded\" })\n  public add(abilityConfig: ComponentConfig) {\n    const { type, node: nodeId, props, id, index } = abilityConfig;\n\n    const node = this.oasis.nodeManager.get(nodeId);\n    const AbilityConstructor = this.getCompConstructor(type);\n    if (!AbilityConstructor) {\n      Logger.error(`${type} ability is not defined`);\n      return;\n    }\n\n    const abilityProps = this.mixPropsToExplicitProps(props);\n    const ability = node.addComponent(AbilityConstructor);\n    const { enabled } = abilityProps;\n    if (enabled !== undefined) {\n      ability.enabled = enabled;\n    }\n\n    if (type === \"GLTFModel\") {\n      // TODO\n      (ability as any).init(abilityProps);\n    } else if (type === \"Model\") {\n      // TODO\n      (ability as any).setProps(abilityProps);\n      if (abilityProps.material) {\n        (ability as any).material = abilityProps.material;\n      }\n    } else if (type === \"StaticCollider\" || type === \"DynamicCollider\") {\n      colliderConfigure(ability as any, abilityProps);\n    } else {\n      for (let k in abilityProps) {\n        if (abilityProps[k] !== null) {\n          ability[k] = abilityProps[k];\n        }\n      }\n    }\n\n    //@ts-ignore\n    const abilityArray = node._components;\n    const currentIndex = abilityArray.length - 1;\n    switchElementsIndex(abilityArray, currentIndex, index);\n    (ability as any).id = id;\n    this.abilityMap[id] = ability;\n    return ability;\n  }\n\n  @pluginHook({ before: \"beforeAbilityUpdated\", after: \"abilityUpdated\" })\n  public update(id: string, key: string, value: any) {\n    if (value && this.checkIsAsset(value)) {\n      this.get(id)[key] = this.oasis.resourceManager.get(value.id).resource;\n    } else {\n      if (this.get(id).constructor === Model) {\n        (this.get(id) as any).updateProp(key, value);\n      } else {\n        this.get(id)[key] = value;\n      }\n    }\n\n    return { id, key, value };\n  }\n\n  public addRuntimeComponent(componentId: string, component: Component) {\n    (component as any).id = componentId;\n    this.abilityMap[componentId] = component;\n    return component;\n  }\n\n  public get(id: string): Component {\n    return this.abilityMap[id];\n  }\n\n  @pluginHook({ after: \"abilityDeleted\", before: \"beforeAbilityDeleted\" })\n  public delete(id: string) {\n    const ability = this.abilityMap[id];\n    ability.destroy();\n    delete this.abilityMap[id];\n    return id;\n  }\n\n  private getCompConstructor(type: string) {\n    const splits = type.split(\".\");\n    // script\n    if (splits[0] === \"script\") {\n      return scriptAbility[splits[1]];\n    }\n\n    const constructor = Parser._components[\"o3\"][type];\n    if (!constructor) {\n      console.warn(`${type} is not defined`);\n    }\n    return constructor;\n  }\n\n  private mixPropsToExplicitProps(props: Props) {\n    const explicitProps = { ...props };\n    for (let k in props) {\n      const prop = props[k];\n      if (prop && this.checkIsAsset(prop)) {\n        const res = this.oasis.resourceManager.get(prop.id);\n        if (res) {\n          explicitProps[k] = res.resource;\n        } else {\n          explicitProps[k] = null;\n          Logger.warn(`AbilityManager: can't get asset \"${k}\", which id is ${prop.id}`);\n        }\n      }\n    }\n    return explicitProps;\n  }\n\n  private checkIsAsset(prop: any): boolean {\n    return prop.type === \"asset\";\n  }\n}\n","import { Entity } from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { NodeConfig } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\n\nexport class NodeManager {\n  private nodeMap: { [id: string]: Entity } = {};\n  private readonly root: Entity;\n\n  constructor(private oasis: Oasis) {\n    this.root = new Entity(this.oasis.engine, \"root\");\n  }\n\n  public addRootEntity() {\n    this.oasis.engine.sceneManager.activeScene.addRootEntity(this.root);\n  }\n\n  @pluginHook({ after: \"nodeAdded\" })\n  public add(nodeConfig: NodeConfig) {\n    this.create(nodeConfig);\n    this.append(nodeConfig.id, nodeConfig.parent, nodeConfig.index);\n    return this.get(nodeConfig.id);\n  }\n\n  @pluginHook({ before: \"beforeNodeUpdated\", after: \"nodeUpdated\" })\n  public update(id: string, key: string, value: any) {\n    this.get(id)[key] = value;\n    return { id, key, value };\n  }\n\n  public get(id: string): Entity {\n    return this.nodeMap[id];\n  }\n\n  public reset() {\n    this.nodeMap = {};\n  }\n\n  @pluginHook({ before: \"beforeNodeDeleted\" })\n  public delete(id: string) {\n    this.nodeMap[id].destroy();\n    delete this.nodeMap[id];\n  }\n\n  private create(nodeConfig: NodeConfig): Entity {\n    const { isActive, position, rotation, scale, id, name } = nodeConfig;\n    const entity = new Entity(this.oasis.engine, name);\n    entity.isActive = isActive;\n    entity.transform.position = new Vector3(position[0], position[1], position[2]);\n    entity.transform.rotation = new Vector3(rotation[0], rotation[1], rotation[2]);\n    entity.transform.scale = new Vector3(scale[0], scale[1], scale[2]);\n    (entity as any).id = id;\n    this.nodeMap[id] = entity;\n    return entity;\n  }\n\n  private append(childId: string, parentId: string, index: number) {\n    const child = this.nodeMap[childId];\n    const parent = this.nodeMap[parentId] || this.root;\n    parent.addChild(child);\n    //@ts-ignore\n    const children = parent._children;\n    const currentIndex = children.length - 1;\n    switchElementsIndex(children, currentIndex, index);\n  }\n}\n","import { AmbientLight, DiffuseMode, PrimitiveMesh, SkyBoxMaterial } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\n\nexport class SceneManager {\n  constructor(private oasis: Oasis) {}\n\n  init() {\n    const { scene } = this.oasis.options.config;\n    if (scene) {\n      Object.keys(scene).forEach((field) => {\n        const fieldConfig = scene[field];\n        Object.keys(fieldConfig.props).forEach((key) => {\n          const prop = fieldConfig.props[key];\n          this.setProp(field, key, prop);\n        });\n      });\n    }\n  }\n\n  @pluginHook({ before: \"beforeSceneUpdated\", after: \"sceneUpdated\" })\n  public update(field: string, key: string, value: any) {\n    this.setProp(field, key, value);\n    return { field, key, value };\n  }\n\n  private setProp(field, key, prop) {\n    const scene = this.oasis.engine.sceneManager.activeScene;\n    if (field === \"background\" && key === \"skyboxTexture\") {\n      const sky = scene.background.sky;\n      if (prop) {\n        sky.mesh = PrimitiveMesh.createCuboid(scene.engine, 2, 2, 2);\n        const skyMaterial = new SkyBoxMaterial(scene.engine);\n        skyMaterial.textureCubeMap = this.oasis.resourceManager.get(prop.id).resource;\n        sky.material = skyMaterial;\n      } else {\n        sky.mesh = null;\n        sky.material = null;\n      }\n    } else if (scene[field] && field === \"ambientLight\" && key === \"specularTexture\") {\n      if (prop && prop.type === \"asset\") {\n        const ambientLight: AmbientLight = this.oasis.resourceManager.get(prop.id).resource;\n        scene.ambientLight.specularTexture = ambientLight.specularTexture;\n        scene.ambientLight.diffuseSphericalHarmonics = ambientLight.diffuseSphericalHarmonics;\n        scene.ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;\n        scene.ambientLight.specularTextureDecodeRGBM = true;\n      } else {\n        scene.ambientLight.specularTexture = null;\n        scene.ambientLight.diffuseMode = DiffuseMode.SolidColor;\n      }\n    } else if (scene[field]) {\n      if (prop && prop.type === \"asset\") {\n        scene[field][key] = this.oasis.resourceManager.get(prop.id).resource;\n      } else {\n        scene[field][key] = prop;\n      }\n    }\n  }\n}\n","import { AssetType, ResourceManager, SpriteAtlas } from \"@oasis-engine/core\";\nimport { AssetConfig } from \"../types\";\nimport { getAllGetters } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { SpriteResource } from \"./SpriteResource\";\n\nexport class SpriteAtlasResource extends SchemaResource {\n  static defaultAtlas: SpriteAtlas;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<SpriteAtlasResource> {\n    return new Promise((resolve) => {\n      this.setMeta();\n      if (assetConfig.source) {\n        resourceManager\n          .load<SpriteAtlas>({\n            url: assetConfig.source,\n            type: AssetType.SpriteAtlas\n          })\n          .then((spriteAtlas) => {\n            this._resource = spriteAtlas;\n            const { sprites } = spriteAtlas;\n            const schemaResourceManager = this.resourceManager;\n            for (let index = sprites.length - 1; index >= 0; index--) {\n              const sprite = sprites[index];\n              const spriteResource = new SpriteResource(schemaResourceManager, sprite);\n              // @ts-ignore\n              const assetID = sprite._assetID;\n              // @ts-ignore\n              schemaResourceManager.maxId = Math.max(assetID, schemaResourceManager.maxId);\n              // @ts-ignore\n              schemaResourceManager.resourceMap[assetID] = spriteResource;\n              // @ts-ignore\n              schemaResourceManager.resourceIdMap.set(spriteResource, \"\" + assetID);\n            }\n            resolve(this);\n          });\n      } else {\n        if (!SpriteAtlasResource.defaultAtlas) {\n          SpriteAtlasResource.defaultAtlas = new SpriteAtlas(resourceManager.engine);\n        }\n        this._resource = SpriteAtlasResource.defaultAtlas;\n        resolve(this);\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  update() {}\n}\n","import { ObjectValues, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport {\n  BaseResource,\n  BlinnPhongMaterialResource,\n  GLTFResource,\n  PBRMaterialResource,\n  PBRSpecularMaterialResource,\n  SchemaResource,\n  ScriptResource,\n  SpriteResource,\n  TextureCubeMapResource,\n  TextureResource,\n  UnlitMaterialResource,\n  AnimatorControllerResource,\n  AnimationClipResource,\n  AmbientLightResource\n} from \"./resources\";\nimport { SpriteAtlasResource } from \"./resources/SpriteAtlasResource\";\nimport { AssetConfig } from \"./types\";\n\nexport const RESOURCE_CLASS = {\n  script: ScriptResource,\n  gltf: GLTFResource,\n  texture: TextureResource,\n  // 'image': TextureResource,\n  cubeTexture: TextureCubeMapResource,\n  PBRMaterial: PBRMaterialResource,\n  PBRSpecularMaterial: PBRSpecularMaterialResource,\n  UnlitMaterial: UnlitMaterialResource,\n  BlinnPhongMaterial: BlinnPhongMaterialResource,\n  base: BaseResource,\n  sprite: SpriteResource,\n  SpriteAtlas: SpriteAtlasResource,\n  animatorController: AnimatorControllerResource,\n  animationClip: AnimationClipResource,\n  environment: AmbientLightResource\n};\n\nconst RESOURCE_TYPE: Map<SchemaResource, string> = new Map();\nfor (const key in RESOURCE_CLASS) {\n  if (RESOURCE_CLASS.hasOwnProperty(key)) {\n    const element = RESOURCE_CLASS[key];\n    RESOURCE_TYPE.set(element, key);\n  }\n}\n\nconst resourceFactory = {\n  createResource(resourceManager: SchemaResourceManager, type: string): SchemaResource {\n    return new RESOURCE_CLASS[type](resourceManager);\n  }\n};\n\nexport function registerResource(type: string, resource: any) {\n  if (!RESOURCE_CLASS.hasOwnProperty(type)) {\n    RESOURCE_CLASS[type] = resource;\n    RESOURCE_TYPE.set(resource, type);\n  }\n}\n\nexport class SchemaResourceManager {\n  private resourceMap: { [id: string]: SchemaResource } = {};\n  private resourceIdMap: WeakMap<SchemaResource, string> = new WeakMap();\n  private maxId = 0;\n  private readonly engineResourceManager: ResourceManager;\n\n  constructor(private oasis: Oasis) {\n    this.engineResourceManager = this.oasis.engine.resourceManager;\n  }\n\n  load(asset: AssetConfig): Promise<SchemaResource> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    const loadPromise = resource.load(this.oasis.engine.resourceManager, asset, this.oasis);\n    this.maxId = Math.max(+asset.id, this.maxId);\n    loadPromise.then(() => {\n      this.resourceMap[asset.id] = resource;\n      this.resourceIdMap.set(resource, asset.id);\n    });\n    return loadPromise;\n  }\n\n  add(asset: AssetConfig): Promise<any> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    return new Promise((resolve) => {\n      resource.loadWithAttachedResources(this.oasis.engine.resourceManager, asset, this.oasis).then((result) => {\n        resolve(this.getAddResourceResult(result.resources, result.structure));\n      });\n    });\n  }\n\n  @pluginHook({ before: \"beforeResourceRemove\" })\n  remove(id: string): Promise<Array<string>> {\n    return new Promise((resolve) => {\n      const resource = this.resourceMap[id];\n      const result = [id];\n      let hasAttachedResource = false;\n      delete this.resourceMap[id];\n      if (resource) {\n        const attached = resource.attachedResources;\n        for (let index = 0; index < attached.length; index++) {\n          const attachedResource = attached[index];\n          const attachedResourceId = this.resourceIdMap.get(attachedResource);\n          if (attachedResourceId) {\n            hasAttachedResource = true;\n            this.remove(attachedResourceId).then((attachedResourceRemoveResult) => {\n              result.push(...attachedResourceRemoveResult);\n              resolve(result);\n            });\n          }\n        }\n      }\n      if (!hasAttachedResource) {\n        resolve(result);\n      }\n    });\n  }\n\n  @pluginHook({ after: \"resourceUpdated\", before: \"beforeResourceUpdate\" })\n  update(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.update(key, value);\n    }\n    return {\n      resource,\n      id,\n      key,\n      value\n    };\n  }\n\n  updateMeta(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.updateMeta(key, value);\n    }\n  }\n\n  get(id: string): SchemaResource {\n    return this.resourceMap[id];\n  }\n\n  getAll(): Array<SchemaResource> {\n    return ObjectValues(this.resourceMap);\n  }\n\n  private getAddResourceResult(resources, structure) {\n    const addResourceResult: any = {};\n    const resource = resources[structure.index];\n    const id = `${++this.maxId}`;\n    this.resourceMap[id] = resource;\n    this.resourceIdMap.set(resource, id);\n\n    addResourceResult.id = this.maxId;\n    addResourceResult.type = RESOURCE_TYPE.get(resource.constructor);\n    addResourceResult.meta = resource.meta;\n    addResourceResult.props = {};\n    for (const key in structure.props) {\n      if (structure.props.hasOwnProperty(key)) {\n        const element = structure.props[key];\n        if (element) {\n          if (Array.isArray(element)) {\n            addResourceResult.props[key] = element.map((child) => this.getAddResourceResult(resources, child));\n          } else {\n            addResourceResult.props[key] = this.getAddResourceResult(resources, element);\n          }\n        }\n      }\n    }\n    return addResourceResult;\n  }\n\n  get isLocal(): boolean {\n    return this.oasis.options.local;\n  }\n\n  get useCompressedTexture(): boolean {\n    return this.oasis.options.useCompressedTexture ?? true;\n  }\n}\n","import { Engine, EventDispatcher, ObjectValues } from \"@oasis-engine/core\";\nimport { AbilityManager } from \"./AbilityManager\";\nimport { NodeManager } from \"./NodeManager\";\nimport { SceneManager } from \"./SceneManager\";\nimport { pluginHook, PluginManager } from \"./plugins/PluginManager\";\nimport { RESOURCE_CLASS, SchemaResourceManager } from \"./ResourceManager\";\nimport { Options, Schema } from \"./types\";\n\nexport class Oasis extends EventDispatcher {\n  public readonly nodeManager: NodeManager;\n  public readonly abilityManager: AbilityManager;\n  public readonly sceneManager: SceneManager;\n  public resourceManager: SchemaResourceManager;\n  public _canvas: HTMLCanvasElement;\n  private schema: Schema;\n  public timeout: number;\n  private oasis = this;\n  public engine: Engine;\n\n  private constructor(private _options: Options, public readonly pluginManager: PluginManager) {\n    super();\n    this.engine = _options.engine;\n    this.schema = _options.config;\n    this.timeout = _options.timeout;\n    _options.scripts = _options.scripts ?? {};\n    this.nodeManager = new NodeManager(this);\n    this.abilityManager = new AbilityManager(this);\n    this.nodeManager.add = this.nodeManager.add.bind(this.nodeManager);\n    this.abilityManager.add = this.abilityManager.add.bind(this.abilityManager);\n    this.resourceManager = new SchemaResourceManager(this);\n    this.sceneManager = new SceneManager(this);\n    if (_options.fps) {\n      this.engine.targetFrameRate = _options.fps;\n      this.engine.vSyncCount = 0;\n    }\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    return this._options.canvas;\n  }\n\n  public get options(): Readonly<Options> {\n    return this._options;\n  }\n\n  public updateConfig(config: Schema): void {\n    this.schema = config;\n\n    this.init();\n  }\n\n  @pluginHook({ after: \"schemaParsed\" })\n  private init(): Promise<any> {\n    return this.loadResources().then(() => {\n      this.bindResources();\n      this.parseEntities();\n      this.attach();\n      this.nodeManager.addRootEntity();\n      this.sceneManager.init();\n      this.parseNodeAbilities();\n      this.pluginManager.boot(this);\n    });\n  }\n\n  private loadResources(): Promise<any> {\n    const { assets = {} } = this.schema;\n\n    const loadingPromises = ObjectValues(assets)\n      .filter((asset) => {\n        if (RESOURCE_CLASS[asset.type]) {\n          return true;\n        }\n        console.warn(`${asset.type} loader is not defined. the ${asset.type} type will be ignored.`);\n        return false;\n      })\n      .map((asset) => this.resourceManager.load(asset));\n\n    return Promise.all(loadingPromises);\n  }\n\n  private bindResources() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.bind();\n    });\n  }\n\n  private parseEntities(): void {\n    const { nodes } = this.schema;\n    const indices = this.bfsNodes();\n    indices.map((index) => nodes[index]).forEach(this.nodeManager.add);\n  }\n\n  private parseNodeAbilities(): void {\n    const { abilities } = this.schema;\n    Object.keys(abilities)\n      .map((id) => ({ id, ...abilities[id] }))\n      .forEach(this.abilityManager.add);\n  }\n\n  private bfsNodes(): number[] {\n    const { nodes } = this.schema;\n    const roots = ObjectValues(nodes)\n      .filter((node) => !nodes[node.parent])\n      .map((node) => node.id);\n\n    let result = [];\n    const traverseChildren = (roots: string[]) => {\n      result = result.concat(roots);\n      roots.forEach((id) => {\n        const children = nodes[id].children;\n        children && traverseChildren(children);\n      });\n    };\n    traverseChildren(roots);\n    return result;\n  }\n\n  private attach() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.attach();\n    });\n  }\n\n  static create(options: Options, pluginManager: PluginManager): Promise<Oasis> {\n    const oasis = new Oasis(options, pluginManager);\n    return oasis.init().then(() => {\n      options.autoPlay && oasis.engine.run();\n      return oasis;\n    });\n  }\n}\n"],"names":["isBase64","url","test","resourceLoader","AssetType","Buffer","load","item","AssetPromise","resolve","base64Str","slice","RegExp","$1","length","result","Uint8Array","from","atob","c","charCodeAt","buffer","request","type","Loader","AccessorComponentType","AccessorType","AnimationChannelTargetPath","AnimationSamplerInterpolation","CameraType","ImageMimeType","MaterialAlphaMode","TextureMagFilter","TextureMinFilter","TextureWrapMode","GLTFUtil","floatBufferToVector2Array","bufferLen","array","Array","i","Vector2","floatBufferToVector3Array","Vector3","floatBufferToVector4Array","Vector4","floatBufferToColorArray","isColor3","colors","Color","decodeText","TextDecoder","decode","s","il","String","fromCharCode","decodeURIComponent","encodeURIComponent","getAccessorTypeSize","accessorType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","getComponentType","componentType","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","FLOAT","Float32Array","getAccessorData","gltf","accessor","buffers","bufferViews","bufferView","arrayBuffer","accessorByteOffset","hasOwnProperty","byteOffset","bufferViewByteOffset","accessorTypeSize","count","byteStride","arrayType","uint8Array","accessorByteSize","BYTES_PER_ELEMENT","originalBufferView","byteLength","j","typedArray","sparse","indices","values","indicesBufferView","valuesBufferView","indicesArrayBuffer","valuesArrayBuffer","indicesByteOffset","indicesByteLength","valuesByteOffset","valuesByteLength","indicesType","indicesArray","valuesArray","replaceIndex","getBufferViewData","getVertexStride","stride","size","createVertexElement","semantic","index","VertexElement","getElementFormat","normalized","getIndexFormat","IndexFormat","UInt8","UInt16","UInt32","VertexElementFormat","Float","NormalizedShort2","Short2","NormalizedShort4","Short4","NormalizedUShort2","UShort2","NormalizedUShort4","UShort4","NormalizedByte4","Byte4","NormalizedUByte4","UByte4","loadImageBuffer","imageBuffer","Promise","reject","blob","window","Blob","img","Image","src","URL","createObjectURL","crossOrigin","onerror","Error","onload","requestAnimationFrame","onabort","isAbsoluteUrl","parseRelativeUrl","baseUrl","relativeUrl","char0","charAt","_formatRelativePath","substring","lastIndexOf","parseGLB","glb","UINT32_LENGTH","GLB_HEADER_MAGIC","GLB_HEADER_LENGTH","GLB_CHUNK_TYPES","JSON","BIN","dataView","DataView","header","magic","getUint32","version","console","error","toString","chunkLength","chunkType","glTFData","parse","currentOffset","push","value","parts","split","n","splice","join","Parser","parseEngineResource","extensionName","extensionSchema","parseResource","context","parsers","_extensionParsers","extra","createEngineResource","hasExtensionParser","initialize","_addExtensionParser","extensionParser","registerExtension","parser","AnimationParser","entities","animations","accessors","animationClipCount","animationClips","animationsIndices","gltfAnimation","channels","samplers","name","animationClip","AnimationClip","sampleDataCollection","gltfSampler","inputAccessor","input","outputAccessor","output","outputAccessorSize","interpolation","Linear","samplerInterpolation","CubicSpine","InterpolationType","Step","outputSize","gltfChannel","target","channelTargetEntity","node","relativePath","entity","parent","compType","propertyName","interpolableValueType","path","TRANSLATION","Transform","InterpolableValueType","ROTATION","Quaternion","SCALE","WEIGHTS","SkinnedMeshRenderer","FloatArray","curve","_addCurve","addCurveBinding","_animationsIndices","AnimationCurve","sampleData","sampler","offset","keyframe","InterpolableKeyframe","time","inTangent","outTangent","addKey","subarray","BufferParser","engine","_isGLB","resourceManager","then","all","map","uri","EntityParser","nodes","gltfNode","matrix","translation","rotation","scale","Entity","_defaultName","transform","localMatrix","setValueByArray","setPosition","setRotationQuaternion","setScale","_buildEntityTree","_createSceneRoots","children","childEntity","addChild","scene","sceneID","scenes","sceneRoots","rootEntity","defaultSceneRoot","MaterialParser","_parseTextureTransform","material","extensions","schema","KHR_texture_transform","textures","materials","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","PBRMaterial","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","baseColor","linearToGammaSpace","baseTexture","m","metallic","roughness","roughnessMetallicTexture","emissiveColor","undefined","normalTextureIntensity","strength","occlusionTextureIntensity","renderFace","RenderFace","Double","Front","OPAQUE","isTransparent","BLEND","MASK","MeshParser","meshes","meshPromises","gltfMesh","primitivePromises","gltfPrimitive","primitives","KHR_draco_mesh_compression","mesh","ModelMesh","decodedGeometry","_parseMeshFromGLTFPrimitive","attributeSemantic","attributes","shapeIndex","accessorIdx","attributeName","shapeAccessorIdx","targets","attributeAccessorIdx","indexAccessor","getVertexBufferData","getBlendShapeData","getIndexBufferData","mode","vertexCount","positionBuffer","positions","setPositions","bounds","min","max","position","_tempVector3","setValue","Number","MAX_VALUE","bufferData","normals","setNormals","texturecoords","setUVs","texturecoords1","texturecoords2","texturecoords3","texturecoords4","texturecoords5","texturecoords6","texturecoords7","setColors","tangents","setTangents","joints","setBoneIndices","weights","setBoneWeights","indexData","setIndices","addSubMesh","_createBlendShape","uploadData","glTFMesh","glTFTargets","blendShapeNames","extras","targetNames","deltaPosBuffer","deltaNorBuffer","deltaTanBuffer","deltaPositions","deltaNormals","deltaTangents","blendShape","BlendShape","addFrame","addBlendShape","SceneParser","_getDefaultMaterial","_defaultMaterial","BlinnPhongMaterial","gltfCameras","cameras","cameraID","camera","meshID","KHR_lights_punctual","_createCamera","_createRenderer","lightIndex","light","lights","_createAnimator","cameraSchema","orthographic","perspective","addComponent","Camera","ORTHOGRAPHIC","xmag","ymag","zfar","znear","isOrthographic","nearClipPlane","farClipPlane","orthographicSize","Math","PERSPECTIVE","aspectRatio","yfov","fieldOfView","PI","enabled","gltfMeshes","skins","skinID","skin","gltfMeshPrimitives","blendShapeWeights","renderer","skinRenderer","MeshRenderer","materialIndex","setMaterial","KHR_materials_variants","animator","Animator","animatorController","AnimatorController","layer","AnimatorControllerLayer","animatorStateMachine","AnimatorStateMachine","addLayer","stateMachine","uniqueName","makeUniqueStateName","warn","animatorState","addState","clip","SkinParser","gltfSkins","inverseBindMatrices","skeleton","jointCount","Skin","inverseBindMatrix","Matrix","TextureParser","source","textureName","images","bufferViewIndex","mimeType","imageName","Texture2D","texture","_parseSampler","bufferViewData","image","width","height","setImageSource","generateMipmaps","magFilter","minFilter","wrapS","wrapT","Logger","wrapModeU","_wrapMap","wrapModeV","Clamp","Mirror","Repeat","Validator","asset","extensionsUsed","extensionsRequired","gltfVersion","info","extensionRequired","GLTFParser","pipes","_pipes","forEach","pipe","lastPipe","catch","instance","GLTFResource","variants","EngineObject","_dec","Prefab","_class","resource","e","HEADER_LEN","COMPRESSED_2D","getMipmaps","ktxContainer","loadMipmaps","mipmaps","dataOffset","bytesOfKeyValueData","pixelWidth","pixelHeight","mipmapCount","numberOfMipmapLevels","level","imageSize","Int32Array","face","numberOfFaces","byteArray","data","isValid","identifier","getEngineFormat","internalFormat","GLCompressedTextureInternalFormat","RGB_S3TC_DXT1_EXT","TextureFormat","DXT1","RGBA_S3TC_DXT5_EXT","DXT5","RGB_ETC1_WEBGL","ETC1_RGB","RGB8_ETC2","ETC2_RGB","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA5","RGBA8_ETC2_EAC","ETC2_RGBA8","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGB2","RGBA_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","RGB_PVRTC_4BPPV1_IMG","PVRTC_RGB4","RGBA_PVRTC_4BPPV1_IMG","PVRTC_RGBA4","RGBA_ASTC_4X4_KHR","ASTC_4x4","RGBA_ASTC_5X5_KHR","ASTC_5x5","RGBA_ASTC_6X6_KHR","ASTC_6x6","RGBA_ASTC_8X8_KHR","ASTC_8x8","RGBA_ASTC_10X10_KHR","ASTC_10x10","RGBA_ASTC_12X12_KHR","ASTC_12x12","formatName","khronosTextureContainerParser","facesExpected","withMipmaps","mapEngineFormat","dataSize","headerDataView","endianness","littleEndian","parsedResult","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","loadType","engineFormat","parseSingleKTX","ktx","parseCubeKTX","dataArray","mipmapsFaces","KTXCube","urls","parsedData","mipmap","TextureCubeMap","miplevel","setPixelBuffer","TextureCubeFace","PositiveX","KTX","bin","_platformTexture","indexOf","splitPath","TextureCube","tex","faceIndex","SpriteAtlas","atlasData","atlasItems","format","atlasItemsLen","imgs","tempRect","Rect","tempVect2","spriteAtlas","originalImg","atlasItem","sprites","sourceWidthReciprocal","sourceHeightReciprocal","atlasSprite","region","pivot","atlasRegionOffset","atlasRegion","id","sprite","Sprite","x","y","w","h","pixelsPerUnit","atlasRotated","offsetLeft","offsetTop","offsetRight","z","offsetBottom","originalWReciprocal","originalHReciprocal","_assetID","_addSprite","Env","arraybuffer","shArray","shByteLength","filterMode","TextureFilterMode","Trilinear","mipLevel","mipSize","ambientLight","AmbientLight","sh","SphericalHarmonics3","diffuseMode","DiffuseMode","SphericalHarmonics","diffuseSphericalHarmonics","specularTexture","specularTextureDecodeRGBM","ExtensionParser","_decoder","DRACODecoder","gltfAttributeMap","attributeMap","attributeTypeMap","accessorDef","indexType","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","parsedGeometry","color","intensity","range","spot","DirectLight","PointLight","SpotLight","distance","innerConeAngle","outerConeAngle","angle","penumbra","PBRSpecularMaterial","diffuseFactor","diffuseTexture","specularFactor","glossinessFactor","specularGlossinessTexture","specularColor","glossiness","UnlitMaterial","variantNames","mappings","texCoord","tilingOffset","GLTFModel","_animatorController","_speed","_animator","_asset","_glTFEntity","_clipPreview","_hasBuiltNode","_controllerUpdateFlag","init","props","speed","clipPreview","isClone","rootName","gltfRootName","findByName","Date","now","createChild","update","flag","_playState","_onEnable","isActive","_componentsManager","addOnUpdateAnimations","_onDisable","removeOnUpdateAnimations","playStateName","_playDefaultState","play","_reset","layers","defaultState","_defaultState","defaultStateName","clearChildren","destroy","gltfEntity","clone","getComponent","_registerChangeFlag","Component","Model","_props","setProps","geometryType","PrimitiveMesh","createSphere","_engine","sphereRadius","sphereSegments","createCylinder","cylinderRadiusTop","cylinderRadiusBottom","cylinderHeight","cylinderRadialSegments","cylinderHeightSegments","createPlane","planeWidth","planeHeight","planeHorizontalSegments","planeVerticalSegments","createCuboid","boxWidth","boxHeight","boxDepth","updateProp","key","getMaterial","mtl","PluginManager","registeredPlugins","Set","plugins","register","plugin","add","boot","oasis","reset","clear","nodeAdded","delegateMethod","args","pluginHook","options","descriptor","method","before","pluginManager","apply","arguments","returnObj","after","compatibleToV2","config","abilities","assets","ids","Object","keys","assetKeys","sceneKeys","l","handleComponents","handleAssets","handleSceneProps","k","v","isArray","CURRENT_SCHEMA_VERSION","Oasis","create","resetPlugins","registerComponents","namespace","components","_components","switchElementsIndex","elements","currentIndex","targetIndex","isAsset","getAllGetters","obj","prototype","getPrototypeOf","prototype_property_descriptors","getOwnPropertyDescriptors","entries","property","get","SchemaResource","setMeta","_resource","_meta","_attachedResources","loadWithAttachedResources","assetConfig","resources","structure","getProps","bind","attach","meta","updateMeta","onDestroy","AnimationClipResource","loadPromise","AnimatorControllerResource","animatorControllerData","animationClipAssets","_setDefaultDataByAnimationClip","setMetaData","clipLoadPromises","clipResourse","attachedResources","res","clipStructure","clipResource","_initAnimatorController","_bindClips","_setDefaultDataByAnimationClipAsset","clearLayers","blending","weight","stateMachineData","blendingMode","states","stateMachineTransitions","stateData","transitions","wrapMode","clipStartNormalizedTime","clipEndNormalizedTime","isDefaultState","clipAssetId","state","animationIndex","clipStartTime","clipEndTime","transition","srcState","transitionData","AnimatorStateTransition","duration","exitTime","destinationState","findStateByName","targetStateName","addTransition","clipAsset","clips","TextureResource","assetType","useCompressedTexture","compression","compressions","rhi","_hardwareRenderer","container","canIUse","GLCapabilityType","BlinnPhongMaterialResource","configProps","assetObj","attr","Texture","textureResource","attrs","PBRMaterialResource","prop","PBRSpecularMaterialResource","UnlitMaterialResource","newMaterial","animatorControllers","materialLoadPromises","animatorControllerLoadPromise","materialResource","animatorControllerResource","loadAttachedMaterial","mat","matStructure","matResource","textureStructure","loadAttachedController","controllerStructure","controllerResource","bindMaterials","bindAnimatorControllers","newMaterialsConfig","newMaterialCount","newMaterials","mtlResource","gltfRoot","originMaterials","meshRenderers","getComponentsIncludeChildren","originMaterial","meshRenderer","meshMaterials","getMaterials","animatorControllerAsset","scriptAbility","script","ScriptResource","isInit","initScriptContext","__o3_script_context__","o3","scripts","isLocal","scriptDom","document","createElement","o3Scripts","body","appendChild","SpriteResource","pivotType","SpritePivotType","Custom","Center","TopLeft","Top","TopRight","Left","Right","BottomLeft","Bottom","BottomRight","imageOrderMap","px","nx","py","ny","pz","nz","TextureCubeMapResource","imageUrls","files","BaseResource","AmbientLightResource","colliderConfigure","collider","isShowCollider","shapes","colliderShapes","shape","_shapes","box","BoxColliderShape","setSize","isTrigger","addShape","capsule","CapsuleColliderShape","radius","upAxis","ColliderShapeUpAxis","X","Y","Z","plane","PlaneColliderShape","setRotation","sphere","SphereColliderShape","DynamicCollider","force","applyForce","torque","applyTorque","AbilityManager","abilityMap","abilityConfig","nodeId","nodeManager","AbilityConstructor","getCompConstructor","abilityProps","mixPropsToExplicitProps","ability","abilityArray","checkIsAsset","constructor","addRuntimeComponent","componentId","component","delete","splits","explicitProps","_dec2","_dec3","NodeManager","nodeMap","root","addRootEntity","sceneManager","activeScene","nodeConfig","append","childId","parentId","child","_children","SceneManager","field","fieldConfig","setProp","sky","background","skyMaterial","SkyBoxMaterial","textureCubeMap","SolidColor","SpriteAtlasResource","schemaResourceManager","spriteResource","assetID","maxId","resourceMap","resourceIdMap","set","defaultAtlas","RESOURCE_CLASS","cubeTexture","base","environment","RESOURCE_TYPE","Map","element","resourceFactory","createResource","registerResource","SchemaResourceManager","WeakMap","engineResourceManager","getAddResourceResult","remove","hasAttachedResource","attached","attachedResource","attachedResourceId","attachedResourceRemoveResult","getAll","ObjectValues","addResourceResult","local","_options","abilityManager","_canvas","timeout","fps","targetFrameRate","vSyncCount","updateConfig","loadResources","bindResources","parseEntities","parseNodeAbilities","loadingPromises","filter","bfsNodes","_objectSpread","roots","traverseChildren","concat","autoPlay","run","canvas","EventDispatcher"],"mappings":"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"}