import { IndexFormat, TypedArray, VertexElement, VertexElementFormat } from "@oasis-engine/core";
import { Color, Vector2, Vector3, Vector4 } from "@oasis-engine/math";
import { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from "./Schema";
/**
 * @internal
 */
export declare class GLTFUtil {
    static floatBufferToVector2Array(buffer: Float32Array): Vector2[];
    static floatBufferToVector3Array(buffer: Float32Array): Vector3[];
    static floatBufferToVector4Array(buffer: Float32Array): Vector4[];
    static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[];
    /**
     * Parse binary text for glb loader.
     */
    static decodeText(array: Uint8Array): string;
    /**
     * Get the number of bytes occupied by accessor type.
     */
    static getAccessorTypeSize(accessorType: AccessorType): number;
    /**
     * Get the TypedArray corresponding to the component type.
     */
    static getComponentType(componentType: AccessorComponentType): Uint8ArrayConstructor | Float32ArrayConstructor | Uint16ArrayConstructor | Int8ArrayConstructor | Int16ArrayConstructor | Uint32ArrayConstructor;
    /**
     * Get accessor data.
     */
    static getAccessorData(gltf: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray;
    static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer;
    static getVertexStride(gltf: IGLTF, accessor: IAccessor): number;
    static createVertexElement(semantic: string, accessor: IAccessor, index: number): VertexElement;
    static getIndexFormat(type: AccessorComponentType): IndexFormat;
    static getElementFormat(type: AccessorComponentType, size: number, normalized?: boolean): VertexElementFormat;
    /**
     * Load image buffer
     */
    static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement>;
    static isAbsoluteUrl(url: string): boolean;
    static parseRelativeUrl(baseUrl: string, relativeUrl: string): string;
    /**
     * Parse the glb format.
     */
    static parseGLB(glb: ArrayBuffer): {
        gltf: IGLTF;
        buffers: ArrayBuffer[];
    };
    private static _formatRelativePath;
}
