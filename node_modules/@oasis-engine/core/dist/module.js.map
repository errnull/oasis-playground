{"version":3,"file":"module.js","sources":["../src/base/Util.ts","../src/asset/AssetPromise.ts","../src/asset/ResourceManager.ts","../src/base/Event.ts","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/EngineObject.ts","../src/base/Constant.ts","../src/DisorderedArray.ts","../src/shader/ShaderMacroCollection.ts","../src/ComponentsManager.ts","../src/clone/ComponentCloner.ts","../src/ComponentsDependencies.ts","../src/Layer.ts","../src/Component.ts","../src/UpdateFlag.ts","../src/UpdateFlagManager.ts","../src/Transform.ts","../src/Entity.ts","../src/FeatureManager.ts","../src/enums/CameraClearFlags.ts","../src/physics/HitResult.ts","../src/physics/enums/PhysicsMaterialCombineMode.ts","../src/physics/enums/ColliderShapeUpAxis.ts","../src/physics/PhysicsManager.ts","../src/physics/PhysicsMaterial.ts","../src/physics/shape/ColliderShape.ts","../src/physics/shape/BoxColliderShape.ts","../src/physics/shape/SphereColliderShape.ts","../src/physics/shape/PlaneColliderShape.ts","../src/physics/shape/CapsuleColliderShape.ts","../src/physics/Collider.ts","../src/physics/StaticCollider.ts","../src/physics/DynamicCollider.ts","../src/input/enums/PointerPhase.ts","../src/input/pointer/Pointer.ts","../src/input/pointer/PointerManager.ts","../src/input/InputManager.ts","../src/material/enums/RenderQueueType.ts","../src/asset/RefObject.ts","../src/shader/enums/ShaderDataGroup.ts","../src/texture/Texture.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/shader/ShaderMacro.ts","../src/enums/ColorSpace.ts","../src/shader/ShaderUniform.ts","../src/shader/ShaderUniformBlock.ts","../src/shader/ShaderProgram.ts","../src/shader/ShaderProperty.ts","../src/shader/Shader.ts","../src/shader/ShaderData.ts","../src/shader/enums/BlendFactor.ts","../src/shader/enums/BlendOperation.ts","../src/shader/enums/ColorWriteMask.ts","../src/shader/state/RenderTargetBlendState.ts","../src/shader/state/BlendState.ts","../src/shader/enums/CompareFunction.ts","../src/shader/state/DepthState.ts","../src/shader/enums/CullMode.ts","../src/shader/state/RasterState.ts","../src/shader/enums/StencilOperation.ts","../src/shader/state/StencilState.ts","../src/shader/state/RenderState.ts","../src/material/Material.ts","../src/RenderPipeline/ClassPool.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/RenderElement.ts","../src/RenderPipeline/SpriteElement.ts","../src/RenderPipeline/SpriteMaskElement.ts","../src/2d/enums/SpriteMaskInteraction.ts","../src/Renderer.ts","../src/2d/enums/SpriteMaskLayer.ts","../src/2d/sprite/SpriteMask.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/VertexElement.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/MeshTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/SubMesh.ts","../src/graphic/Mesh.ts","../src/graphic/VertexBufferBinding.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/texture/Texture2D.ts","../src/texture/enums/RenderBufferColorFormat.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/TextureCubeMap.ts","../src/texture/RenderDepthTexture.ts","../src/texture/RenderTarget.ts","../src/texture/RenderColorTexture.ts","../src/mesh/ModelMesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/PrimitiveMesh.ts","../src/mesh/BufferMesh.ts","../src/mesh/BlendShapeFrame.ts","../src/mesh/BlendShape.ts","../src/RenderPipeline/Basic2DBatcher.ts","../src/RenderPipeline/SpriteMaskBatcher.ts","../src/RenderPipeline/SpriteMaskManager.ts","../src/enums/BackgroundMode.ts","../src/enums/BackgroundTextureFillMode.ts","../src/sky/Sky.ts","../src/Background.ts","../src/lighting/enums/DiffuseMode.ts","../src/lighting/AmbientLight.ts","../src/SceneFeature.ts","../src/lighting/Light.ts","../src/lighting/DirectLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/Scene.ts","../src/SceneManager.ts","../src/shader/ShaderPool.ts","../src/shader/ShaderProgramPool.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/Script.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/SpriteBatcher.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/material/enums/RenderFace.ts","../src/material/enums/BlendMode.ts","../src/material/BaseMaterial.ts","../src/material/BlinnPhongMaterial.ts","../src/material/PBRBaseMaterial.ts","../src/material/PBRMaterial.ts","../src/material/PBRSpecularMaterial.ts","../src/material/UnlitMaterial.ts","../src/2d/atlas/SpriteAtlas.ts","../src/2d/sprite/Sprite.ts","../src/2d/sprite/SpriteRenderer.ts","../src/animation/AnimationClipCurveBinding.ts","../src/animation/AnimationEvent.ts","../src/animation/enums/AnimationProperty.ts","../src/animation/Motion.ts","../src/animation/AnimationClip.ts","../src/animation/AnimatorUtils.ts","../src/animation/enums/AnimatorLayerBlendingMode.ts","../src/animation/enums/AnimatorStatePlayState.ts","../src/animation/enums/LayerState.ts","../src/animation/internal/AnimationCurveOwner.ts","../src/animation/internal/AnimationEventHandler.ts","../src/animation/AnimatorTransition.ts","../src/animation/enums/WrapMode.ts","../src/animation/internal/AnimatorStatePlayData.ts","../src/animation/internal/AnimatorLayerData.ts","../src/animation/internal/AnimatorStateData.ts","../src/animation/internal/AnimatorStateInfo.ts","../src/animation/internal/CrossCurveData.ts","../src/animation/Animator.ts","../src/animation/AnimatorController.ts","../src/animation/AnimatorControllerLayer.ts","../src/animation/StateMachineScript.ts","../src/animation/AnimatorState.ts","../src/animation/AnimatorStateMachine.ts","../src/animation/enums/InterpolableValueType.ts","../src/animation/enums/InterpolationType.ts","../src/animation/AnimationCurve.ts","../src/animation/KeyFrame.ts","../src/animation/enums/AnimatorConditionMode.ts","../src/sky/SkyBoxMaterial.ts","../src/particle/ParticleRenderer.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/LinearFog.ts","../src/env-probe/Probe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n","type PromiseNotifier = (progress: number) => void;\n\n/**\n * Asset Promise Status\n */\nexport enum AssetPromiseStatus {\n  /** Success. */\n  Success,\n  /** Pending. */\n  Pending,\n  /** Failed. */\n  Failed\n}\n/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - AssetPromise Collection\n   * @returns AssetPromise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * Current promise state.\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * Loading progress.\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * Progress callback.\n   * @param callback - Progress callback\n   * @returns Asset Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // Add it to the micro task to avoid reporting an error when calling this directly.\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly.\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","import { Engine, EngineObject } from \"..\";\nimport { ObjectValues } from \"../base/Util\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { Loader } from \"./Loader\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extNames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extNames.length; i < len; i++) {\n      this._extTypeMapping[extNames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = 20000;\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading assets. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    this._gc(false);\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: EngineObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: EngineObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this.cancelNotLoaded();\n    this._gc(true);\n    this._assetPool = null;\n    this._assetUrlPool = null;\n    this._refObjectPool = null;\n    this._loadingPromises = null;\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res: EngineObject) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch((err: Error) => {\n        Promise.reject(err)\n        delete this._loadingPromises[url];\n      });\n    return promise;\n  }\n\n  private _gc(forceDestroy: boolean): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored || forceDestroy) {\n        objects[i].destroy();\n      }\n    }\n  }\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implements custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArrayItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArrayItem.length);\n          } else {\n            targetArrayItem.length = sourceArrayItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArrayItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implements custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefined and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Event } from \"./Event\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n","/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  @ignoreClone\n  protected _engine: Engine;\n  protected _destroyed: boolean = false;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n\n    this._engine.resourceManager?._deleteAsset(this);\n    this._destroyed = true;\n  }\n}\n","/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._value;\n      this._length = size;\n    } else {\n      mask[index] |= macro._value;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._value;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._index;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._value) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Collider } from \"./physics/Collider\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  private static _tempVector0 = new Vector3();\n  private static _tempVector1 = new Vector3();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destroyComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  // Physics\n  private _colliders: DisorderedArray<Collider> = new DisorderedArray();\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addCollider(collider: Collider) {\n    collider._index = this._colliders.length;\n    this._colliders.add(collider);\n  }\n\n  removeCollider(collider: Collider): void {\n    const replaced = this._colliders.deleteByIndex(collider._index);\n    replaced && (replaced._index = collider._index);\n    collider._index = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestroyComponent(component): void {\n    this._destroyComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(context: RenderContext): void {\n    const camera = context._camera;\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      const element = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & element._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustum.\n      if (camera.enableFrustumCulling) {\n        element.isCulled = !camera._frustum.intersectsBox(element.bounds);\n        if (element.isCulled) {\n          continue;\n        }\n      }\n\n      const transform = camera.entity.transform;\n      const position = transform.worldPosition;\n      const center = element.bounds.getCenter(ComponentsManager._tempVector0);\n      if (camera.isOrthographic) {\n        const forward = transform.getWorldForward(ComponentsManager._tempVector1);\n        Vector3.subtract(center, position, center);\n        element._distanceForSort = Vector3.dot(center, forward);\n      } else {\n        element._distanceForSort = Vector3.distanceSquared(center, position);\n      }\n\n      element._updateShaderData(context);\n\n      element._render(camera);\n\n      // union camera global macro and renderer macro.\n      ShaderMacroCollection.unionCollection(\n        camera._globalShaderMacro,\n        element.shaderData._macroCollection,\n        element._globalShaderMacro\n      );\n    }\n  }\n\n  callComponentDestroy(): void {\n    const destroyComponents = this._destroyComponents;\n    const length = destroyComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destroyComponents[i].onDestroy();\n      }\n      destroyComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onEndRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  callColliderOnUpdate() {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onUpdate();\n    }\n  }\n\n  callColliderOnLateUpdate() {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onLateUpdate();\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: ICustomClone): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n    if ((<any>source)._cloneTo) {\n      (<any>source)._cloneTo(target);\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * Register component dependencies.\n   * @param currentComponent - The component you want to be register.\n   * @param dependentComponent - The component's dependencies.\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // Check if there are dependent components.\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDependencies) {\n      for (let i = 0, len = invDependencies.length; i < len; i++) {\n        if (entity.getComponent(invDependencies[i])) {\n          throw `you should remove ${invDependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...componentClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    componentClass.forEach((component) => ComponentsDependencies.register(target, component));\n  };\n}\n","/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n","import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport abstract class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @assignmentClone\n  private _enabled: boolean = true;\n  @ignoreClone\n  private _awoken: boolean = false;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * Indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awoken) {\n        this._awoken = true;\n        this._onAwake();\n      }\n      // You can do isActive = false in onAwake function.\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n}\n","import { removeFromArray } from \"./base/Util\";\n\n/**\n * Used to update tags.\n */\nexport class UpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {\n    this._flags.push(this);\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    const flags = this._flags;\n    removeFromArray(flags, this);\n    this._flags = null;\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  private _updateFlags: UpdateFlag[] = [];\n\n  register(): UpdateFlag {\n    return new UpdateFlag(this._updateFlags);\n  }\n\n  distribute(): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].flag = true;\n    }\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * World position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n\n      this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);\n    this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate along the passed Vector3.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate along the passed X, Y, Z value.\n   * @param x - Translate direction and distance along x axis\n   * @param y - Translate direction and distance along y axis\n   * @param z - Translate direction and distance along z axis\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec3;\n      translate.setValue(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param worldPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    const rotMat = Transform._tempMat43;\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    Matrix.lookAt(position, worldPosition, worldUp, rotMat);\n    rotMat.getRotation(worldRotationQuaternion).invert();\n    this.worldRotationQuaternion = worldRotationQuaternion;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _isFrontFaceInvert(): boolean {\n    const scale = this.lossyWorldScale;\n    let isInvert = scale.x < 0;\n    scale.y < 0 && (isInvert = !isInvert);\n    scale.z < 0 && (isInvert = !isInvert);\n    return isInvert;\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      this.position = this._position.add(translation);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n}\n\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { EngineObject } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { Script } from \"./Script\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { DisorderedArray } from \"./DisorderedArray\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to.\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component.\n   * @returns\tThe component which has been added.\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component.\n   * @returns\tThe first component which match type.\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component.\n   * @param results - The components which match type.\n   * @returns\tThe components which match type.\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type.\n   * @param results - The components collection.\n   * @returns\tThe components collection which match the type.\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added.\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed.\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * Find child entity by index.\n   * @param index - The index of the child entity.\n   * @returns\tThe component which be found.\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find child entity by name.\n   * @param name - The name of the entity which want to be found.\n   * @returns The component which be found.\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity.\n   * @returns The component which be found.\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name.\n   * @returns The child entity.\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone\n   * @returns Cloned entity.\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n    \n    super.destroy();\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      components[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityCacheIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityCacheIndex);\n    replaced && (replaced._entityCacheIndex = script._entityCacheIndex);\n    script._entityCacheIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * Use transform.position instead.\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.worldPosition instead.\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.rotationQuaternion instead.\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.scale instead.\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * Manage a set of feature objects.\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * Register a feature.\n   * @param {SceneFeature|EngineFeature} IFeature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // Search by type, avoid adding\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // Add to global array\n    featureArray.push(IFeature);\n\n    // Add to existing scene\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * Add an feature with functional characteristics.\n   * @param {Scene|Engine} obj - Scene or engine\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * Call the specified method of the feature.\n   * @param obj - Scene or engine\n   * @param method - Method name\n   * @param args - Function args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * Find feature.\n   * @param obj - Scene or engine\n   * @param IFeature - plug-in\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Clear depth and color from background. */\n  DepthColor,\n  /* Clear depth only. */\n  Depth,\n  /* Do nothing. */\n  None\n}\n","import { Entity } from \"../Entity\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The entity that was hit. */\n  entity: Entity = null;\n  /** The distance from the ray's origin to the impact point. */\n  distance: number = 0;\n  /** The impact point in world space where the ray hit the collider. */\n  point: Vector3 = new Vector3();\n  /** The normal of the surface the ray hit. */\n  normal: Vector3 = new Vector3();\n}\n","/**\n * Describes how physics materials of the colliding objects are combined.\n */\nexport enum PhysicsMaterialCombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}","import { HitResult } from \"./HitResult\";\nimport { Ray } from \"@oasis-engine/math\";\nimport { IPhysics, IPhysicsManager } from \"@oasis-engine/design\";\nimport { Collider } from \"./Collider\";\nimport { Layer } from \"../Layer\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\n\n/**\n * A physics manager is a collection of bodies and constraints which can interact.\n */\nexport class PhysicsManager {\n  /** @internal */\n  static _nativePhysics: IPhysics;\n\n  private _nativePhysicsManager: IPhysicsManager;\n  private _physicalObjectsMap: Record<number, ColliderShape> = {};\n  private _onContactEnter = (obj1: number, obj2: number) => {};\n  private _onContactExit = (obj1: number, obj2: number) => {};\n  private _onContactStay = (obj1: number, obj2: number) => {};\n  private _onTriggerEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerEnter(shape1);\n    }\n  };\n\n  private _onTriggerExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerExit(shape1);\n    }\n  };\n\n  private _onTriggerStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      scripts.get(i).onTriggerStay(shape1);\n    }\n  };\n\n  constructor() {\n    this._nativePhysicsManager = PhysicsManager._nativePhysics.createPhysicsManager(\n      this._onContactEnter,\n      this._onContactExit,\n      this._onContactStay,\n      this._onTriggerEnter,\n      this._onTriggerExit,\n      this._onTriggerStay\n    );\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): boolean {\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    if (hitResult != undefined) {\n      const result = this._nativePhysicsManager.raycast(ray, distance, (idx, distance, position, normal) => {\n        hitResult.entity = this._physicalObjectsMap[idx]._collider.entity;\n        hitResult.distance = distance;\n        normal.cloneTo(hitResult.normal);\n        position.cloneTo(hitResult.point);\n      });\n\n      if (result) {\n        if (hitResult.entity.layer & layerMask) {\n          return true;\n        } else {\n          hitResult.entity = null;\n          hitResult.distance = 0;\n          hitResult.point.setValue(0, 0, 0);\n          hitResult.normal.setValue(0, 0, 0);\n          return false;\n        }\n      }\n      return false;\n    } else {\n      return this._nativePhysicsManager.raycast(ray, distance);\n    }\n  }\n\n  /**\n   * Call on every frame to update pose of objects.\n   * @internal\n   */\n  _update(deltaTime: number): void {\n    this._nativePhysicsManager.update(deltaTime);\n  }\n\n  /**\n   * Add ColliderShape into the manager.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _addColliderShape(colliderShape: ColliderShape): void {\n    this._physicalObjectsMap[colliderShape.id] = colliderShape;\n    this._nativePhysicsManager.addColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Remove ColliderShape.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _removeColliderShape(colliderShape: ColliderShape): void {\n    delete this._physicalObjectsMap[colliderShape.id];\n    this._nativePhysicsManager.removeColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Add collider into the manager.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _addCollider(collider: Collider): void {\n    this._nativePhysicsManager.addCollider(collider._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _removeCollider(collider: Collider): void {\n    this._nativePhysicsManager.removeCollider(collider._nativeCollider);\n  }\n}\n","import { IPhysicsMaterial } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { PhysicsMaterialCombineMode } from \"./enums/PhysicsMaterialCombineMode\";\n\n/**\n * Material class to represent a set of surface properties.\n */\nexport class PhysicsMaterial {\n  private _bounciness: number = 0.1;\n  private _dynamicFriction: number = 0.1;\n  private _staticFriction: number = 0.1;\n  private _bounceCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _frictionCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n\n  /** @internal */\n  _nativeMaterial: IPhysicsMaterial;\n\n  constructor() {\n    this._nativeMaterial = PhysicsManager._nativePhysics.createPhysicsMaterial(\n      this._staticFriction,\n      this._dynamicFriction,\n      this._bounciness,\n      this._bounceCombine,\n      this._frictionCombine\n    );\n  }\n\n  /**\n   * The coefficient of bounciness.\n   */\n  get bounciness(): number {\n    return this._bounciness;\n  }\n\n  set bounciness(value: number) {\n    this._bounciness = value;\n    this._nativeMaterial.setBounciness(value);\n  }\n\n  /**\n   * The DynamicFriction value.\n   */\n  get dynamicFriction(): number {\n    return this._dynamicFriction;\n  }\n\n  set dynamicFriction(value: number) {\n    this._dynamicFriction = value;\n    this._nativeMaterial.setDynamicFriction(value);\n  }\n\n  /**\n   * The coefficient of static friction.\n   */\n  get staticFriction(): number {\n    return this._staticFriction;\n  }\n\n  set staticFriction(value: number) {\n    this._staticFriction = value;\n    this._nativeMaterial.setStaticFriction(value);\n  }\n\n  /**\n   * The restitution combine mode.\n   */\n  get bounceCombine(): PhysicsMaterialCombineMode {\n    return this._bounceCombine;\n  }\n\n  set bounceCombine(value: PhysicsMaterialCombineMode) {\n    this._bounceCombine = value;\n    this._nativeMaterial.setBounceCombine(value);\n  }\n\n  /**\n   * The friction combine mode.\n   */\n  get frictionCombine(): PhysicsMaterialCombineMode {\n    return this._frictionCombine;\n  }\n\n  set frictionCombine(value: PhysicsMaterialCombineMode) {\n    this._frictionCombine = value;\n    this._nativeMaterial.setFrictionCombine(value);\n  }\n}\n","import { IColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsMaterial } from \"../PhysicsMaterial\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Collider } from \"../Collider\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class ColliderShape {\n  private static _idGenerator: number = 0;\n\n  /** @internal */\n  _collider: Collider;\n  /** @internal */\n  _nativeShape: IColliderShape;\n\n  protected _id: number;\n  protected _position: Vector3 = new Vector3();\n  protected _material: PhysicsMaterial;\n  protected _isTrigger: boolean = false;\n  protected _isSceneQuery: boolean = true;\n\n  /**\n   * Collider owner of this shape.\n   */\n  get collider(): Collider {\n    return this._collider;\n  }\n\n  /**\n   * Unique id for this shape.\n   */\n  get id(): number {\n    return this._id;\n  }\n\n  /**\n   * Physical material.\n   */\n  get material(): PhysicsMaterial {\n    return this._material;\n  }\n\n  set material(value: PhysicsMaterial) {\n    this._material = value;\n    this._nativeShape.setMaterial(value._nativeMaterial);\n  }\n\n  /**\n   * The local position of this ColliderShape.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._nativeShape.setPosition(value);\n  }\n\n  /**\n   * True for TriggerShape, false for SimulationShape.\n   */\n  get isTrigger(): boolean {\n    return this._isTrigger;\n  }\n\n  set isTrigger(value: boolean) {\n    this._isTrigger = value;\n    this._nativeShape.setIsTrigger(value);\n  }\n\n  protected constructor() {\n    this._material = new PhysicsMaterial();\n    this._id = ColliderShape._idGenerator++;\n  }\n\n  /**\n   * Set local position of collider shape\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this._nativeShape.setPosition(this._position);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { IBoxColliderShape } from \"@oasis-engine/design\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for box.\n */\nexport class BoxColliderShape extends ColliderShape {\n  private _size: Vector3 = new Vector3(1, 1, 1);\n  /**\n   * Size of box shape.\n   */\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (this._size != value) {\n      value.cloneTo(this._size);\n    }\n    (<IBoxColliderShape>this._nativeShape).setSize(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createBoxColliderShape(\n      this._id,\n      this._size,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set size of box.\n   * @param x - Size of x-axis\n   * @param y - Size of y-axis\n   * @param z - Size of z-axis\n   */\n  setSize(x: number, y: number, z: number): void {\n    this._size.x = x;\n    this._size.y = y;\n    this._size.z = z;\n    (<IBoxColliderShape>this._nativeShape).setSize(this._size);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ISphereColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for sphere.\n */\nexport class SphereColliderShape extends ColliderShape {\n  private _radius: number = 1;\n\n  /**\n   * Radius of sphere shape.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    this._radius = value;\n    (<ISphereColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createSphereColliderShape(\n      this._id,\n      this._radius,\n      this._material._nativeMaterial\n    );\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { IPlaneColliderShape } from \"@oasis-engine/design\";\n\n/**\n * Physical collider shape plane.\n */\nexport class PlaneColliderShape extends ColliderShape {\n  private _rotation: Vector3 = new Vector3();\n\n  /**\n   * The local rotation of this plane.\n   */\n  get rotation(): Vector3 {\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation != value) {\n      value.cloneTo(this._rotation);\n    }\n    (<IPlaneColliderShape>this._nativeShape).setRotation(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createPlaneColliderShape(\n      this._id,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set the local rotation of this plane.\n   * @param x - Radian of yaw\n   * @param y - Radian of pitch\n   * @param z - Radian of roll\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    (<IPlaneColliderShape>this._nativeShape).setRotation(this._rotation);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ICapsuleColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShapeUpAxis } from \"../enums/ColliderShapeUpAxis\";\n\n/**\n * Physical collider shape for capsule.\n */\nexport class CapsuleColliderShape extends ColliderShape {\n  private _radius: number = 1;\n  private _height: number = 2;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n\n  /**\n   * Radius of capsule.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    (<ICapsuleColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  /**\n   * Height of capsule.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    (<ICapsuleColliderShape>this._nativeShape).setHeight(value);\n  }\n\n  /**\n   * Up axis of capsule.\n   */\n  get upAxis(): ColliderShapeUpAxis {\n    return this._upAxis;\n  }\n\n  set upAxis(value: ColliderShapeUpAxis) {\n    this._upAxis = value;\n    (<ICapsuleColliderShape>this._nativeShape).setUpAxis(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createCapsuleColliderShape(\n      this._id,\n      this._radius,\n      this._height,\n      this._material._nativeMaterial\n    );\n    (<ICapsuleColliderShape>this._nativeShape).setUpAxis(ColliderShapeUpAxis.Y);\n  }\n}\n","import { Component } from \"../Component\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICollider } from \"@oasis-engine/design\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class Collider extends Component {\n  /** @internal */\n  @ignoreClone\n  _index: number = -1;\n  /** @internal */\n  _nativeCollider: ICollider;\n\n  protected _updateFlag: UpdateFlag;\n\n  private _shapes: ColliderShape[] = [];\n\n  /**\n   * The shapes of this collider.\n   */\n  get shapes(): Readonly<ColliderShape[]> {\n    return this._shapes;\n  }\n\n  protected constructor(entity: Entity) {\n    super(entity);\n    this._updateFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add collider shape on this collider.\n   * @param shape - Collider shape\n   */\n  addShape(shape: ColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n      this._shapes.push(shape);\n      this.engine.physicsManager._addColliderShape(shape);\n      this._nativeCollider.addShape(shape._nativeShape);\n      shape._collider = this;\n    }\n  }\n\n  /**\n   * Remove a collider shape.\n   * @param shape - The collider shape.\n   */\n  removeShape(shape: ColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      this._nativeCollider.removeShape(shape._nativeShape);\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._collider = null;\n    }\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  clearShapes(): void {\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      this._nativeCollider.removeShape(shapes[i]._nativeShape);\n      this.engine.physicsManager._removeColliderShape(shapes[i]);\n    }\n    shapes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _onUpdate() {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      this._nativeCollider.setWorldTransform(transform.worldPosition, transform.worldRotationQuaternion);\n      this._updateFlag.flag = false;\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = this.shapes.length; i < n; i++) {\n        this.shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onLateUpdate() {}\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable() {\n    this.engine.physicsManager._addCollider(this);\n    this.engine._componentsManager.addCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable() {\n    this.engine.physicsManager._removeCollider(this);\n    this.engine._componentsManager.removeCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy() {\n    this.clearShapes();\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class StaticCollider extends Collider {\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createStaticCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n}\n","import { IDynamicCollider } from \"@oasis-engine/design\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force.\n */\nexport class DynamicCollider extends Collider {\n  /** The linear velocity vector of the dynamic collider measured in world unit per second. */\n  linearVelocity: Vector3;\n  /** The angular velocity vector of the dynamic collider measured in radians per second. */\n  angularVelocity: Vector3;\n  /** The linear damping of the dynamic collider. */\n  linearDamping: number;\n  /** The angular damping of the dynamic collider. */\n  angularDamping: number;\n  /** The mass of the dynamic collider. */\n  mass: number;\n  /** Controls whether physics affects the dynamic collider. */\n  isKinematic: boolean;\n\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createDynamicCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n\n  /**\n   * Apply a force to the DynamicCollider.\n   * @param force - The force make the collider move\n   */\n  applyForce(force: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addForce(force);\n  }\n\n  /**\n   * Apply a torque to the DynamicCollider.\n   * @param torque - The force make the collider rotate\n   */\n  applyTorque(torque: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addTorque(torque);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onLateUpdate() {\n    const { transform } = this.entity;\n    const { worldPosition, worldRotationQuaternion } = transform;\n    this._nativeCollider.getWorldTransform(worldPosition, worldRotationQuaternion);\n    transform.worldPosition = worldPosition;\n    transform.worldRotationQuaternion = worldRotationQuaternion;\n    this._updateFlag.flag = false;\n  }\n}\n","/**\n *  The current phase of the pointer.\n */\nexport enum PointerPhase {\n  /** A Pointer pressed on the screen. */\n  Down,\n  /** A pointer moved on the screen. */\n  Move,\n  /** A pointer was lifted from the screen. */\n  Up,\n  /** The system cancelled tracking for the pointer. */\n  Leave\n}\n","import { Vector2 } from \"@oasis-engine/math\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\n\n/**\n * Pointer.\n */\nexport class Pointer {\n  /**\n   * Unique id.\n   * @remark Start from 0.\n   */\n  readonly id: number;\n  /** The phase of pointer. */\n  phase: PointerPhase = PointerPhase.Leave;\n  /** The position of the pointer in screen space pixel coordinates. */\n  position: Vector2 = new Vector2();\n\n  /** @internal */\n  _uniqueID: number;\n  /** @internal */\n  _needUpdate: boolean = true;\n\n  /**\n   * @internal\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n","import { Ray, Vector2 } from \"@oasis-engine/math\";\nimport { Canvas } from \"../../Canvas\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { CameraClearFlags } from \"../../enums/CameraClearFlags\";\nimport { HitResult } from \"../../physics\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { Pointer } from \"./Pointer\";\n\n/**\n * Pointer Manager.\n * @internal\n */\nexport class PointerManager {\n  private static _tempRay: Ray = new Ray();\n  private static _tempPoint: Vector2 = new Vector2();\n  private static _tempHitResult: HitResult = new HitResult();\n\n  /** @internal */\n  _pointers: Pointer[] = [];\n  /** @internal */\n  _multiPointerEnabled: boolean = true;\n  /** @internal */\n  _enablePhysics: boolean = false;\n\n  private _engine: Engine;\n  private _canvas: Canvas;\n  private _nativeEvents: PointerEvent[] = [];\n  private _pointerPool: Pointer[];\n  private _keyEventList: number[] = [];\n  private _keyEventCount: number = 0;\n  private _needOverallPointers: boolean = false;\n  private _currentPosition: Vector2 = new Vector2();\n  private _currentPressedEntity: Entity;\n  private _currentEnteredEntity: Entity;\n\n  /**\n   * Create a PointerManager.\n   * @param engine - The current engine instance\n   */\n  constructor(engine: Engine) {\n    this._engine = engine;\n    this._canvas = engine.canvas;\n    // @ts-ignore\n    const htmlCanvas = this._canvas._webCanvas as HTMLCanvasElement;\n    htmlCanvas.style.touchAction = \"none\";\n    // prettier-ignore\n    htmlCanvas.onpointerdown = htmlCanvas.onpointerup = htmlCanvas.onpointerout = htmlCanvas.onpointermove = (evt:PointerEvent)=>{\n      this._nativeEvents.push(evt);\n    };\n    // If there are no compatibility issues, navigator.maxTouchPoints should be used here.\n    this._pointerPool = new Array<Pointer>(11);\n    this._enablePhysics = engine.physicsManager ? true : false;\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    this._needOverallPointers && this._overallPointers();\n    this._nativeEvents.length > 0 && this._handlePointerEvent(this._nativeEvents);\n    if (this._enablePhysics) {\n      const rayCastEntity = this._pointerRayCast();\n      const { _keyEventCount: keyEventCount } = this;\n      if (keyEventCount > 0) {\n        const { _keyEventList: keyEventList } = this;\n        for (let i = 0; i < keyEventCount; i++) {\n          switch (keyEventList[i]) {\n            case PointerKeyEvent.Down:\n              this._firePointerDown(rayCastEntity);\n              break;\n            case PointerKeyEvent.Up:\n              this._firePointerUpAndClick(rayCastEntity);\n              break;\n          }\n        }\n        this._firePointerExitAndEnter(rayCastEntity);\n        keyEventList[keyEventCount - 1] === PointerKeyEvent.Leave && (this._currentPressedEntity = null);\n        this._keyEventCount = 0;\n      } else {\n        this._firePointerDrag();\n        this._firePointerExitAndEnter(rayCastEntity);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    // @ts-ignore\n    const htmlCanvas = this._canvas._webCanvas as HTMLCanvasElement;\n    htmlCanvas.onpointerdown = htmlCanvas.onpointerup = htmlCanvas.onpointerout = htmlCanvas.onpointermove = null;\n    this._nativeEvents.length = 0;\n    this._pointerPool.length = 0;\n    this._pointers.length = 0;\n    this._currentPosition = null;\n    this._currentEnteredEntity = null;\n    this._currentPressedEntity = null;\n    this._engine = null;\n    this._canvas = null;\n  }\n\n  private _overallPointers(): void {\n    const { _pointers: pointers } = this;\n    let deleteCount = 0;\n    const totalCount = pointers.length;\n    for (let i = 0; i < totalCount; i++) {\n      if (pointers[i].phase === PointerPhase.Leave) {\n        deleteCount++;\n      } else {\n        if (deleteCount > 0) {\n          pointers[i - deleteCount] = pointers[i];\n        }\n      }\n    }\n    pointers.length = totalCount - deleteCount;\n    this._needOverallPointers = false;\n  }\n\n  private _getIndexByPointerID(pointerId: number): number {\n    const { _pointers: pointers } = this;\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i]._uniqueID === pointerId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private _addPointer(pointerId: number, x: number, y: number, phase: PointerPhase): void {\n    const { _pointers: pointers } = this;\n    const lastCount = pointers.length;\n    if (lastCount === 0 || this._multiPointerEnabled) {\n      const { _pointerPool: pointerPool } = this;\n      // Get Pointer smallest index.\n      let i = 0;\n      for (; i < lastCount; i++) {\n        if (pointers[i].id > i) {\n          break;\n        }\n      }\n      let pointer = pointerPool[i];\n      if (!pointer) {\n        pointer = pointerPool[i] = new Pointer(i);\n      }\n      pointer._uniqueID = pointerId;\n      pointer._needUpdate = true;\n      pointer.position.setValue(x, y);\n      pointer.phase = phase;\n      pointers.splice(i, 0, pointer);\n    }\n  }\n\n  private _removePointer(pointerIndex: number): void {\n    this._pointers[pointerIndex].phase = PointerPhase.Leave;\n  }\n\n  private _updatePointer(pointerIndex: number, x: number, y: number, phase: PointerPhase): void {\n    const updatedPointer = this._pointers[pointerIndex];\n    updatedPointer.position.setValue(x, y);\n    updatedPointer._needUpdate = true;\n    updatedPointer.phase = phase;\n  }\n\n  private _handlePointerEvent(nativeEvents: PointerEvent[]): void {\n    const { _pointers: pointers, _keyEventList: keyEventList } = this;\n    let activePointerCount = pointers.length;\n    const nativeEventsLen = nativeEvents.length;\n    for (let i = 0; i < nativeEventsLen; i++) {\n      const evt = nativeEvents[i];\n      let pointerIndex = this._getIndexByPointerID(evt.pointerId);\n      switch (evt.type) {\n        case \"pointerdown\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX, evt.offsetY, PointerPhase.Down);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Down);\n          }\n          activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Down);\n          break;\n        case \"pointerup\":\n          if (pointerIndex >= 0) {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Up);\n            activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Up);\n          }\n          break;\n        case \"pointermove\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX, evt.offsetY, PointerPhase.Move);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX, evt.offsetY, PointerPhase.Move);\n          }\n          break;\n        case \"pointerout\":\n          if (pointerIndex >= 0) {\n            this._removePointer(pointerIndex);\n            --activePointerCount === 0 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Leave);\n            this._needOverallPointers = true;\n          }\n          break;\n      }\n    }\n    const pointerCount = pointers.length;\n    if (pointerCount > 0) {\n      const { _canvas: canvas, _currentPosition: currentPosition } = this;\n      // @ts-ignore\n      const pixelRatioWidth = canvas.width / (canvas._webCanvas as HTMLCanvasElement).clientWidth;\n      // @ts-ignore\n      const pixelRatioHeight = canvas.height / (canvas._webCanvas as HTMLCanvasElement).clientHeight;\n      if (activePointerCount === 0) {\n        // Get the pointer coordinates when leaving, and use it to correctly dispatch the click event.\n        const lastNativeEvent = nativeEvents[nativeEventsLen - 1];\n        currentPosition.setValue(lastNativeEvent.offsetX * pixelRatioWidth, lastNativeEvent.offsetY * pixelRatioHeight);\n      } else {\n        currentPosition.setValue(0, 0);\n        for (let i = 0; i < pointerCount; i++) {\n          const pointer = pointers[i];\n          const { position } = pointer;\n          if (pointer._needUpdate) {\n            position.setValue(position.x * pixelRatioWidth, position.y * pixelRatioHeight);\n            pointer._needUpdate = false;\n          }\n          currentPosition.add(position);\n        }\n        currentPosition.scale(1 / pointerCount);\n      }\n    }\n    nativeEvents.length = 0;\n  }\n\n  private _pointerRayCast(): Entity {\n    if (this._pointers.length > 0) {\n      const { _tempPoint: point, _tempRay: ray, _tempHitResult: hitResult } = PointerManager;\n      const { _activeCameras: cameras } = this._engine.sceneManager.activeScene;\n      const x = this._currentPosition.x / this._canvas.width;\n      const y = this._currentPosition.y / this._canvas.height;\n      for (let i = cameras.length - 1; i >= 0; i--) {\n        const camera = cameras[i];\n        if (!camera.enabled || camera.renderTarget) {\n          continue;\n        }\n        const { x: vpX, y: vpY, z: vpW, w: vpH } = camera.viewport;\n        if (x >= vpX && y >= vpY && x - vpX <= vpW && y - vpY <= vpH) {\n          point.setValue((x - vpX) / vpW, (y - vpY) / vpH);\n          // TODO: Only check which colliders have listened to the input.\n          if (this._engine.physicsManager.raycast(camera.viewportPointToRay(point, ray), hitResult)) {\n            return hitResult.entity;\n          } else if (camera.clearFlags === CameraClearFlags.DepthColor) {\n            return null;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private _firePointerDrag(): void {\n    if (this._currentPressedEntity) {\n      const scripts = this._currentPressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        scripts.get(i).onPointerDrag();\n      }\n    }\n  }\n\n  private _firePointerExitAndEnter(rayCastEntity: Entity): void {\n    if (this._currentEnteredEntity !== rayCastEntity) {\n      if (this._currentEnteredEntity) {\n        const scripts = this._currentEnteredEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          scripts.get(i).onPointerExit();\n        }\n      }\n      if (rayCastEntity) {\n        const scripts = rayCastEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          scripts.get(i).onPointerEnter();\n        }\n      }\n      this._currentEnteredEntity = rayCastEntity;\n    }\n  }\n\n  private _firePointerDown(rayCastEntity: Entity): void {\n    if (rayCastEntity) {\n      const scripts = rayCastEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        scripts.get(i).onPointerDown();\n      }\n    }\n    this._currentPressedEntity = rayCastEntity;\n  }\n\n  private _firePointerUpAndClick(rayCastEntity: Entity): void {\n    const { _currentPressedEntity: pressedEntity } = this;\n    if (pressedEntity) {\n      const sameTarget = pressedEntity === rayCastEntity;\n      const scripts = pressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        sameTarget && script.onPointerClick();\n        script.onPointerUp();\n      }\n      this._currentPressedEntity = null;\n    }\n  }\n}\n\n/**\n * @internal\n */\nenum PointerKeyEvent {\n  Down,\n  Up,\n  Leave\n}\n","import { Engine } from \"../Engine\";\nimport { Pointer } from \"./pointer/Pointer\";\nimport { PointerManager } from \"./pointer/PointerManager\";\n\n/**\n * InputManager manages device input such as mouse, touch, keyboard, etc.\n */\nexport class InputManager {\n  private _pointerManager: PointerManager;\n\n  /**\n   * Pointer List.\n   */\n  get pointers(): Readonly<Pointer[]> {\n    return this._pointerManager._pointers;\n  }\n\n  /**\n   *  Whether to handle multi-pointer.\n   */\n  get multiPointerEnabled(): boolean {\n    return this._pointerManager._multiPointerEnabled;\n  }\n\n  set multiPointerEnabled(enabled: boolean) {\n    this._pointerManager._multiPointerEnabled = enabled;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine) {\n    // @ts-ignore\n    this._pointerManager = new PointerManager(engine, engine.canvas._webCanvas);\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    this._pointerManager._update();\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._pointerManager._destroy();\n  }\n}\n","/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque = 1000,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest = 2000,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent = 3000\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      super.destroy();\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    \n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n","/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n\n  protected _width: number;\n  protected _height: number;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n}\n","import pbr_frag_define from \"./pbr_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_helper from \"./pbr_helper.glsl\";\nimport brdf from \"./brdf.glsl\";\nimport direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport ibl_frag_define from \"./ibl_frag_define.glsl\";\n\nimport pbr_frag from \"./pbr_frag.glsl\";\n\nexport default {\n  pbr_frag_define,\n\n  pbr_helper,\n  brdf,\n  direct_irradiance_frag_define,\n  ibl_frag_define,\n\n  pbr_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport light_frag_define from \"./light_frag_define.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  fog_vert,\n\n  light_frag_define,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  ...PBRShaderLib,\n  normal_get\n};\n","import { ShaderLib } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  static parseCustomMacros(macros: string[]) {\n    return (\n      macros.map((m) => `#define ${m}\\n`).join(\"\")\n    );\n  }\n\n  static parseIncludes(src: string) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * GLSL extension.\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\")\n    );\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this._replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** name */\n  readonly name: string;\n\n  /** @internal */\n  _index: number;\n  /** @internal */\n  _value: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, index: number, value: number) {\n    this.name = name;\n    this._index = index;\n    this._value = value;\n  }\n}\n","/**\n * Color Space.\n */\nexport enum ColorSpace {\n  /** Linear color space. */\n  Linear,\n  /** Gamma color space. */\n  Gamma\n}\n","import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n  private _colorSpace: ColorSpace;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n    this._colorSpace = engine.settings.colorSpace;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform2f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g)\n          );\n        } else {\n          this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform3f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b)\n          );\n        } else {\n          this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b),\n            (<Color>value).a\n          );\n        } else {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            (<Color>value).r,\n            (<Color>value).g,\n            (<Color>value).b,\n            (<Color>value).a\n          );\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n    }\n  }\n}\n","import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n","import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = properties[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = properties[uniform.propertyId];\n        if (texture) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUnGroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock() {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      Logger.error(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      Logger.error(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation() {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n          const defaultTexture = type === gl.SAMPLER_2D ? this._engine._whiteTexture2D : this._engine._whiteTextureCube;\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n            shaderUniform.uploadTextureArray(shaderUniform, defaultTextures);\n          } else {\n            const textureIndex = gl.TEXTURE0 + this._activeTextureUint;\n\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = textureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n            shaderUniform.uploadTexture(shaderUniform, defaultTexture);\n          }\n          break;\n      }\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos: WebGLActiveInfo[] = [];\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos: WebGLActiveInfo[] = [];\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n","import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n","import { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader containing vertex and fragment source.\n */\nexport class Shader {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private static _shaderCounter: number = 0;\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n  private static _shaderExtension = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro {\n    let macro = Shader._macroMap[name];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n      macro = new ShaderMacro(name, index, 1 << bit);\n      Shader._macroMap[name] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = name;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  private static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const n = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < n; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /** @internal */\n  _shaderId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private constructor(name: string, vertexSource: string, fragmentSource: string) {\n    this._shaderId = Shader._shaderCounter++;\n    this.name = name;\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n    return this._getShaderProgram(engine, compileMacros).isValid;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${precisionStr}\n        ${macroNameStr}\n        ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _properties: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n  \n\n  private _variableMacros: Record<string, string> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this._getData(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this._getData(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Enable macro.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  /**\n   * Enable macro.\n   * @remarks Name and value will combine one macro, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  enableMacro(macro: string | ShaderMacro, value: string = null): void {\n    if (value) {\n      this._enableVariableMacro(<string>macro, value);\n    } else {\n      if (typeof macro === \"string\") {\n        macro = Shader.getMacroByName(macro);\n      }\n      this._macroCollection.enable(macro);\n    }\n  }\n\n  /**\n   * Disable macro\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    if (typeof macro === \"string\") {\n      // @todo: should optimization variable macros disable performance\n      const variableValue = this._variableMacros[macro];\n      if (variableValue) {\n        this._disableVariableMacro(macro, variableValue);\n      } else {\n        macro = Shader.getMacroByName(macro);\n        this._macroCollection.disable(macro);\n      }\n    } else {\n      this._macroCollection.disable(macro);\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._variableMacros, this._variableMacros);\n\n    const properties = this._properties;\n    const targetProperties = target._properties;\n    const keys = Object.keys(properties);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property: ShaderPropertyValueType = properties[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetProperties[k] = property;\n        } else if (property instanceof Texture) {\n          targetProperties[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetProperties[k] = property.slice();\n        } else {\n          const targetProperty = targetProperties[k];\n          if (targetProperty) {\n            property.cloneTo(targetProperty);\n          } else {\n            targetProperties[k] = property.clone();\n          }\n        }\n      } else {\n        targetProperties[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getData<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._properties[property._uniqueId] as T;\n  }\n\n  /**\n   * @internal\n   */\n  _setData<T extends ShaderPropertyValueType>(property: string | ShaderProperty, value: T): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} property.`;\n      }\n    }\n\n    this._properties[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._properties;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n\n  private _enableVariableMacro(name: string, value: string): void {\n    const variableMacro = this._variableMacros;\n    const variableValue = variableMacro[name];\n    if (variableValue !== value) {\n      variableValue && this._disableVariableMacro(name, variableValue);\n\n      const macro = Shader.getMacroByName(`${name} ${value}`);\n      this._macroCollection.enable(macro);\n      variableMacro[name] = value;\n    }\n  }\n\n  private _disableVariableMacro(name: string, value: string): void {\n    const oldMacro = Shader.getMacroByName(`${name} ${value}`);\n    this._macroCollection.disable(oldMacro);\n    delete this._variableMacros[name];\n  }\n}\n","/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n","/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n","/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n","import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        blendColor.cloneTo(lastState.blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n","/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n","/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n  /** @internal */\n  _frontFaceInvert: boolean = false;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState, frontFaceInvert: boolean): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState, frontFaceInvert);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: RasterState, frontFaceInvert: boolean): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    if (frontFaceInvert !== lastState._frontFaceInvert) {\n      if (frontFaceInvert) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n      lastState._frontFaceInvert = frontFaceInvert;\n    }\n\n    // apply polygonOffset.\n    if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n      if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(slopeScaledDepthBias, depthBias);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      lastState.depthBias = depthBias;\n      lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n    }\n  }\n}\n","/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n","import { Engine } from \"../../Engine\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /**\n   * @internal\n   */\n  _apply(engine: Engine, frontFaceInvert: boolean): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState, frontFaceInvert);\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Name. */\n  name: string;\n  /** Shader used by the material. */\n  shader: Shader;\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n  /** Render state. */\n  readonly renderState: RenderState = new RenderState(); // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    target.renderQueueType = this.renderQueueType;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderState, target.renderState);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: RenderElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n","/**\n * Class pool utils.\n */\nexport class ClassPool<T> {\n  private _elementPoolIndex: number = 0;\n  private _elementPool: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  /**\n   * Get element from pool.\n   */\n  getFromPool(): T {\n    const { _elementPoolIndex: index, _elementPool: pool } = this;\n    this._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new this._type();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * Reset pool.\n   */\n  resetPool(): void {\n    this._elementPoolIndex = 0;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\n\n/**\n * Rendering context.\n */\nexport class RenderContext {\n  /** @internal */\n  _camera: Camera;\n  /** @internal */\n  _viewProjectMatrix: Matrix = new Matrix();\n\n  /**\n   * @internal\n   */\n  _setContext(camera: Camera): void {\n    this._camera = camera;\n    Matrix.multiply(camera.projectionMatrix, camera.viewMatrix, this._viewProjectMatrix);\n  }\n}\n","import { Mesh } from \"../graphic/Mesh\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\n/**\n * Render element.\n */\nexport class RenderElement {\n  /** Render component. */\n  component: Renderer;\n  /** Mesh. */\n  mesh: Mesh;\n  /** Sub mesh. */\n  subMesh: SubMesh;\n  /** Material. */\n  material: Material;\n\n  setValue(component: Renderer, mesh: Mesh, subMesh: SubMesh, material: Material): void {\n    this.component = component;\n    this.mesh = mesh;\n    this.subMesh = subMesh;\n    this.material = material;\n  }\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\nexport class SpriteElement {\n  component: Renderer;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  color: Color;\n  material: Material;\n  camera: Camera;\n\n  setValue(\n    component: Renderer,\n    positions: Vector3[],\n    uv: Vector2[],\n    triangles: number[],\n    color: Color,\n    material: Material,\n    camera: Camera\n  ): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.color = color;\n    this.material = material;\n    this.camera = camera;\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Material } from \"../material/Material\";\n\nexport class SpriteMaskElement {\n  component: Component;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  material: Material;\n  isAdd: boolean = true;\n  camera: Camera;\n\n  setValue(component: Component, positions: Vector3[], uv: Vector2[], triangles: number[], material: Material): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.material = material;\n  }\n}\n","/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n","import { BoundingBox, Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone, shallowClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { Material } from \"./material/Material\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Renderable component.\n */\nexport abstract class Renderer extends Component {\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling. */\n  @ignoreClone\n  isCulled: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _renderSortId: number = 0;\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @shallowClone\n  protected _materials: Material[] = [];\n\n  @ignoreClone\n  private _transformChangeFlag: UpdateFlag;\n  @deepClone\n  private _bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    let index;\n    if (typeof indexOrMaterial === \"number\") {\n      index = indexOrMaterial;\n    } else {\n      index = 0;\n      material = indexOrMaterial;\n    }\n\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const materialsInstance = this._materialsInstanced;\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      materials[index] = material;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n      internalMaterial && internalMaterial._addRefCount(-1);\n      material && material._addRefCount(1);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && internalMaterial._addRefCount(-1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && internalMaterial._addRefCount(-1);\n        material && material._addRefCount(1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    const worldMatrix = this.entity.transform.worldMatrix;\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(context._camera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(context._viewProjectMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  abstract _render(camera: Camera): void;\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n\n    this.shaderData._addRefCount(-1);\n\n    for (let i = 0, n = this._materials.length; i < n; i++) {\n      this._materials[i]._addRefCount(-1);\n    }\n  }\n\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    material._addRefCount(-1);\n    insMaterial._addRefCount(1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n}\n","/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { SpriteMaskElement } from \"../../RenderPipeline/SpriteMaskElement\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer implements ICustomClone {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskAlphaCutoff\");\n\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal */\n  _maskElement: SpriteMaskElement;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @ignoreClone\n  private _worldMatrixDirtyFlag: UpdateFlag;\n  @ignoreClone\n  private _sprite: Sprite = null;\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n  @ignoreClone\n  private _spriteDirty: UpdateFlag;\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: number = SpriteMaskLayer.Everything;\n\n  /**\n   * The Sprite used to define the mask.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite) {\n    if (this._sprite !== value) {\n      this._spriteDirty && this._spriteDirty.destroy();\n      this._sprite = value;\n      if (value) {\n        this._spriteDirty = value._registerUpdateFlag();\n      }\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._worldMatrixDirtyFlag = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._worldMatrixDirtyFlag.destroy();\n    this._spriteDirty && this._spriteDirty.destroy();\n    super._onDestroy();\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _render(camera: Camera): void {\n    const sprite = this.sprite;\n    if (!sprite) {\n      return null;\n    }\n    const texture = sprite.texture;\n    if (!texture) {\n      return null;\n    }\n\n    const positions = this._positions;\n    const transform = this.entity.transform;\n\n    // Update sprite data.\n    sprite._updateMesh();\n\n    if (this._worldMatrixDirtyFlag.flag || this._spriteDirty.flag) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteMask._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n\n      for (let i = 0, n = positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(curVertexPos.x, curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, positions[i]);\n      }\n\n      this._spriteDirty.flag = false;\n      this._worldMatrixDirtyFlag.flag = false;\n    }\n\n    this.shaderData.setTexture(SpriteMask._textureProperty, texture);\n    const spriteMaskElementPool = this._engine._spriteMaskElementPool;\n    const maskElement = spriteMaskElementPool.getFromPool();\n    maskElement.setValue(this, positions, sprite._uv, sprite._triangles, this.getMaterial());\n    maskElement.camera = camera;\n\n    camera._renderPipeline._allSpriteMasks.add(this);\n    this._maskElement = maskElement;\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteMask): void {\n    target.sprite = this._sprite;\n  }\n}\n","/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n","/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n","/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized };\n  }\n}\n","import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n}\n","/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n","/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: IHardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Byte\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n\n  /**\n   * Create a sub-mesh.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import { IPlatformPrimitive } from \"@oasis-engine/design/types/renderingHardwareInterface/IPlatformPrimitive\";\nimport { BoundingBox } from \"@oasis-engine/math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends RefObject {\n  /** Name. */\n  name: string;\n  /** The bounding volume of the mesh. */\n  readonly bounds: BoundingBox = new BoundingBox();\n\n  _vertexElementMap: Record<string, VertexElement> = {};\n  _glIndexType: number;\n  _glIndexByteCount: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  /** @internal */\n  _instanceCount: number = 0;\n  /** @internal */\n  _vertexBufferBindings: VertexBufferBinding[] = [];\n  /** @internal */\n  _indexBufferBinding: IndexBufferBinding = null;\n  /** @internal */\n  _vertexElements: VertexElement[] = [];\n\n  private _subMeshes: SubMesh[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * Register update flag, update flag will be true if the vertex element changes.\n   * @returns Update flag\n   */\n  registerUpdateFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subMesh: SubMesh): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy(): void {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  protected _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n  }\n\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    if (binding) {\n      this._indexBufferBinding = binding;\n      this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n    } else {\n      this._indexBufferBinding = null;\n      this._glIndexType = undefined;\n    }\n  }\n\n  private _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n    this._updateFlagManager.distribute();\n  }\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n","/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n  /** RGB compressed format。*/\n  DXT1,\n  /** RGBA compressed format。*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12\n}\n","/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;\n\n  getPixelBuffer(\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width >> <number>xOrMipLevelOrOut,\n        this._height >> <number>xOrMipLevelOrOut,\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","/**\n * The rendering buffer color format enumeration.\n */\nexport enum RenderBufferColorFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel, 5 bits in G channel, 5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel, 6 bits in G channel, 5 bits in B channel. */\n  R5G6B5,\n  /** transparent format, 8 bits. */\n  Alpha8,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32\n}\n","/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth = 0,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil = 1,\n  /** Render to stencil buffer. */\n  Stencil = 2,\n\n  /** Force 16-bit depth buffer. */\n  Depth16 = 3,\n  /** Force 24-bit depth buffer. */\n  Depth24 = 4,\n  /** Force 32-bit depth buffer. */\n  Depth32 = 5,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8 = 6,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8 = 7\n}\n","/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTextureCubeMap } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCubeMap(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    face: TextureCubeFace,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 2) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 3) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width >> <number>xOrMipLevelOrOut,\n        this._height >> <number>xOrMipLevelOrOut,\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 7) {\n      (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of depth information in off-screen rendering.\n */\nexport class RenderDepthTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferDepthFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderDepthTexture.\n   * @param engine - Define the engine to use to render this depth texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderDepthTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n","import { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n  /** @internal */\n  _colorTextures: RenderColorTexture[];\n  /** @internal */\n  _depth: RenderDepthTexture | RenderBufferDepthFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n\n  private _width: number;\n  private _height: number;\n  private _depthTexture: RenderDepthTexture | null;\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = depth;\n\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   *\n   * Get the render color texture by index.\n   * @param index\n   */\n  getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    const colorTextureCount = this.colorTextureCount;\n\n    if (this._depthTexture?.autoGenerateMipmaps) {\n      this._depthTexture.generateMipmaps();\n    }\n\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._colorTextures[i];\n      if (colorTexture.autoGenerateMipmaps) {\n        colorTexture.generateMipmaps();\n      }\n    }\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy() {\n    this._platformRenderTarget.destroy();\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    this._platformRenderTarget.setRenderTargetInfo(faceIndex, mipLevel);\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformRenderColorTexture } from \"../renderingHardwareInterface\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of color information in off-screen rendering.\n */\nexport class RenderColorTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferColorFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderColorTexture.\n   * @param engine - Define the engine to use to render this color texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderColorTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read if it's cube texture\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Set mip level the data want to get from\n   * @param out - Color buffer\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number = 0,\n    out: ArrayBufferView\n  ): void {\n    (this._platformTexture as IPlatformRenderColorTexture).getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { Engine } from \"../Engine\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { IndexBufferBinding } from \"../graphic\";\nimport { BlendShape } from \"./BlendShape\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureFilterMode, TextureFormat } from \"../texture\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  /** @internal */\n  _hasBlendShape: boolean = false;\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n  /** @internal */\n  _blendShapeTexture: Texture2D;\n\n  private _vertexCount: number = 0;\n  private _accessible: boolean = true;\n  private _verticesFloat32: Float32Array | null = null;\n  private _verticesUint8: Uint8Array | null = null;\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _vertexSlotChanged: boolean = true;\n  private _vertexChangeFlag: number = 0;\n  private _indicesChangeFlag: boolean = false;\n  private _elementCount: number = 0;\n  private _vertexElementsCache: VertexElement[] = [];\n\n  private _positions: Vector3[] = [];\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n  private _blendShapes: BlendShape[] = [];\n  private _blendShapeUpdateFlags: UpdateFlag[] = [];\n\n  /**\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n\n  /**\n   * Vertex count of current mesh.\n   */\n  get vertexCount(): number {\n    return this._vertexCount;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._blendShapes;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh.\n   */\n  setPositions(positions: Vector3[]): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const count = positions.length;\n    this._positions = positions;\n    this._vertexChangeFlag |= ValueChanged.Position;\n\n    if (this._vertexCount !== count) {\n      this._vertexCount = count;\n    }\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    return this._positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh.\n   */\n  setNormals(normals: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (normals.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._normals !== !!normals;\n    this._vertexChangeFlag |= ValueChanged.Normal;\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh.\n   */\n  setColors(colors: Color[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (colors.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._colors !== !!colors;\n    this._vertexChangeFlag |= ValueChanged.Color;\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh.\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneWeights.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = boneWeights != null;\n    this._vertexChangeFlag |= ValueChanged.BoneWeight;\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh.\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneIndices.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._boneIndices !== !!boneIndices;\n    this._vertexChangeFlag |= ValueChanged.BoneIndex;\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get joints for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh.\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (tangents.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._tangents !== !!tangents;\n    this._vertexChangeFlag |= ValueChanged.Tangent;\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh.\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (uv.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        this._vertexSlotChanged = !!this._uv !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV;\n        this._uv = uv;\n        break;\n      case 1:\n        this._vertexSlotChanged = !!this._uv1 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV1;\n        this._uv1 = uv;\n        break;\n      case 2:\n        this._vertexSlotChanged = !!this._uv2 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV2;\n        this._uv2 = uv;\n        break;\n      case 3:\n        this._vertexSlotChanged = !!this._uv3 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV3;\n        this._uv3 = uv;\n        break;\n      case 4:\n        this._vertexSlotChanged = !!this._uv4 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV4;\n        this._uv4 = uv;\n        break;\n      case 5:\n        this._vertexSlotChanged = !!this._uv5 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV5;\n        this._uv5 = uv;\n        break;\n      case 6:\n        this._vertexSlotChanged = !!this._uv6 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV6;\n        this._uv6 = uv;\n        break;\n      case 7:\n        this._vertexSlotChanged = !!this._uv7 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV7;\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n  getUVs(channelIndex?: number): Vector2[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        return this._uv;\n      case 1:\n        return this._uv1;\n      case 2:\n        return this._uv2;\n      case 3:\n        return this._uv3;\n      case 4:\n        return this._uv4;\n      case 5:\n        return this._uv5;\n      case 6:\n        return this._uv6;\n      case 7:\n        return this._uv7;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh.\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = this._useBlendShapeNormal || blendShape._useBlendShapeNormal;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || blendShape._useBlendShapeTangent;\n    this._blendShapes.push(blendShape);\n    this._blendShapeUpdateFlags.push(blendShape._registerChangeFlag());\n    this._hasBlendShape = true;\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n    this._blendShapes.length = 0;\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n    blendShapeUpdateFlags.length = 0;\n    this._hasBlendShape = false;\n  }\n\n  /**\n   * Upload Mesh Data to the graphics API.\n   * @param noLongerAccessible - Whether to access data later. If true, you'll never access data anymore (free memory cache)\n   */\n  uploadData(noLongerAccessible: boolean): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const { _indices } = this;\n\n    // Vertex element change.\n    if (this._vertexSlotChanged) {\n      const vertexElements = this._updateVertexElements();\n      this._setVertexElements(vertexElements);\n      this._vertexChangeFlag = ValueChanged.All;\n      this._vertexSlotChanged = false;\n    }\n\n    // Vertex value change.\n    const vertexBufferBindings = this._vertexBufferBindings;\n    const elementCount = this._elementCount;\n    const vertexBuffer = vertexBufferBindings[0]?._buffer;\n    const vertexFloatCount = elementCount * this._vertexCount;\n    if (!vertexBuffer || this._verticesFloat32.length !== vertexFloatCount) {\n      vertexBuffer?.destroy();\n      const vertices = new Float32Array(vertexFloatCount);\n      this._verticesFloat32 = vertices;\n      this._verticesUint8 = new Uint8Array(vertices.buffer);\n\n      this._vertexChangeFlag = ValueChanged.All;\n      this._updateVertices(vertices);\n\n      const newVertexBuffer = new Buffer(\n        this._engine,\n        BufferBindFlag.VertexBuffer,\n        vertices,\n        noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic\n      );\n\n      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));\n    } else if (this._vertexChangeFlag & ValueChanged.All) {\n      const vertices = this._verticesFloat32;\n      this._updateVertices(vertices);\n      vertexBuffer.setData(vertices);\n    }\n\n    const indexBuffer = this._indexBufferBinding?._buffer;\n    if (_indices) {\n      if (!indexBuffer || _indices.byteLength != indexBuffer.byteLength) {\n        indexBuffer?.destroy();\n        const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, _indices);\n        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n      } else if (this._indicesChangeFlag) {\n        this._indicesChangeFlag = false;\n        indexBuffer.setData(_indices);\n        if (this._indexBufferBinding._format !== this._indicesFormat) {\n          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n        }\n      }\n    } else if (indexBuffer) {\n      indexBuffer.destroy();\n      this._setIndexBufferBinding(null);\n    }\n\n    if (noLongerAccessible) {\n      this._accessible = false;\n      this._releaseCache();\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    this._accessible && this._releaseCache();\n  }\n\n  private _updateVertexElements(): VertexElement[] {\n    const vertexElements = this._vertexElementsCache;\n    vertexElements.length = 1;\n    vertexElements[0] = POSITION_VERTEX_ELEMENT;\n\n    let offset = 12;\n    let elementCount = 3;\n    if (this._normals) {\n      vertexElements.push(new VertexElement(\"NORMAL\", offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n    }\n    if (this._colors) {\n      vertexElements.push(new VertexElement(\"COLOR_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneWeights) {\n      vertexElements.push(new VertexElement(\"WEIGHTS_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneIndices) {\n      vertexElements.push(new VertexElement(\"JOINTS_0\", offset, VertexElementFormat.UByte4, 0));\n      offset += 4;\n      elementCount += 1;\n    }\n    if (this._tangents) {\n      vertexElements.push(new VertexElement(\"TANGENT\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._uv) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_0\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv1) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_1\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv2) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_2\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv3) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_3\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv4) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_4\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv5) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_5\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv6) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_6\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv7) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_7\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n\n    const blendShapeCount = Math.min(this._blendShapes.length, 4);\n    for (let i = 0, n = blendShapeCount; i < n; i++) {\n      vertexElements.push(new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n      if (this._useBlendShapeNormal) {\n        vertexElements.push(new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n      if (this._useBlendShapeTangent) {\n        vertexElements.push(new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n    }\n\n    this._elementCount = elementCount;\n    return vertexElements;\n  }\n\n  private _updateVertices(vertices: Float32Array): void {\n    // prettier-ignore\n    const { _elementCount,_vertexCount, _positions, _normals, _colors, _vertexChangeFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n\n    if (_vertexChangeFlag & ValueChanged.Position) {\n      for (let i = 0; i < _vertexCount; i++) {\n        const start = _elementCount * i;\n        const position = _positions[i];\n        vertices[start] = position.x;\n        vertices[start + 1] = position.y;\n        vertices[start + 2] = position.z;\n      }\n    }\n\n    let offset = 3;\n\n    if (_normals) {\n      if (_vertexChangeFlag & ValueChanged.Normal) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const normal = _normals[i];\n          if (normal) {\n            vertices[start] = normal.x;\n            vertices[start + 1] = normal.y;\n            vertices[start + 2] = normal.z;\n          }\n        }\n      }\n      offset += 3;\n    }\n\n    if (_colors) {\n      if (_vertexChangeFlag & ValueChanged.Color) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const color = _colors[i];\n          if (color) {\n            vertices[start] = color.r;\n            vertices[start + 1] = color.g;\n            vertices[start + 2] = color.b;\n            vertices[start + 3] = color.a;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneWeights) {\n      if (_vertexChangeFlag & ValueChanged.BoneWeight) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const weight = _boneWeights[i];\n          if (weight) {\n            vertices[start] = weight.x;\n            vertices[start + 1] = weight.y;\n            vertices[start + 2] = weight.z;\n            vertices[start + 3] = weight.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneIndices) {\n      if (_vertexChangeFlag & ValueChanged.BoneIndex) {\n        const { _verticesUint8 } = this;\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const joint = _boneIndices[i];\n          if (joint) {\n            const internalStart = start * 4;\n            _verticesUint8[internalStart] = joint.x;\n            _verticesUint8[internalStart + 1] = joint.y;\n            _verticesUint8[internalStart + 2] = joint.z;\n            _verticesUint8[internalStart + 3] = joint.w;\n          }\n        }\n      }\n      offset += 1;\n    }\n\n    if (_tangents) {\n      if (_vertexChangeFlag & ValueChanged.Tangent) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const tangent = _tangents[i];\n          if (tangent) {\n            vertices[start] = tangent.x;\n            vertices[start + 1] = tangent.y;\n            vertices[start + 2] = tangent.z;\n          }\n        }\n      }\n      offset += 4;\n    }\n    if (_uv) {\n      if (_vertexChangeFlag & ValueChanged.UV) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv1) {\n      if (_vertexChangeFlag & ValueChanged.UV1) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv1[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv2) {\n      if (_vertexChangeFlag & ValueChanged.UV2) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv2[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv3) {\n      if (_vertexChangeFlag & ValueChanged.UV3) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv3[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv4) {\n      if (_vertexChangeFlag & ValueChanged.UV4) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv4[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv5) {\n      if (_vertexChangeFlag & ValueChanged.UV5) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv5[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv6) {\n      if (_vertexChangeFlag & ValueChanged.UV6) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv6[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv7) {\n      if (_vertexChangeFlag & ValueChanged.UV7) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv7[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n\n    // BlendShape.\n    if (_vertexChangeFlag & ValueChanged.BlendShape) {\n      const blendShapes = this._blendShapes;\n      const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n      const blendShapeCount = Math.min(blendShapes.length, 4);\n\n      const rhi = this.engine._hardwareRenderer;\n      if (/*rhi.canUseFloatTextureBlendShape*/ false) {\n        let stride = 1;\n        this._useBlendShapeNormal && stride++;\n        this._useBlendShapeTangent && stride++;\n\n        const maxTextureSize = rhi.renderStates.getParameter(rhi.gl.MAX_TEXTURE_SIZE);\n        const pixelCount = this._vertexCount * stride;\n        const height = Math.ceil(pixelCount / maxTextureSize);\n        const width = height > 1 ? maxTextureSize : pixelCount;\n\n        this._blendShapeTexture = new Texture2D(this.engine, 0, 0, TextureFormat.R32G32B32A32, false);\n        this._blendShapeTexture.filterMode = TextureFilterMode.Point;\n      } else {\n        for (let i = 0; i < blendShapeCount; i++) {\n          const blendShapeUpdateFlag = blendShapeUpdateFlags[i];\n          if (blendShapeUpdateFlag.flag) {\n            const blendShape = blendShapes[i];\n            const { frames } = blendShape;\n            const frameCount = frames.length;\n            const endFrame = frames[frameCount - 1];\n            if (frameCount > 0 && endFrame.deltaPositions.length !== this._vertexCount) {\n              throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n            }\n\n            const { deltaPositions } = endFrame;\n            for (let j = 0; j < _vertexCount; j++) {\n              const start = _elementCount * j + offset;\n              const deltaPosition = deltaPositions[j];\n              if (deltaPosition) {\n                vertices[start] = deltaPosition.x;\n                vertices[start + 1] = deltaPosition.y;\n                vertices[start + 2] = deltaPosition.z;\n              }\n            }\n            offset += 3;\n\n            if (this._useBlendShapeNormal) {\n              const { deltaNormals } = endFrame;\n              if (deltaNormals) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaNormal = deltaNormals[j];\n                  if (deltaNormal) {\n                    vertices[start] = deltaNormal.x;\n                    vertices[start + 1] = deltaNormal.y;\n                    vertices[start + 2] = deltaNormal.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n\n            if (this._useBlendShapeTangent) {\n              const { deltaTangents } = endFrame;\n              if (deltaTangents) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaTangent = deltaTangents[j];\n                  if (deltaTangent) {\n                    vertices[start] = deltaTangent.x;\n                    vertices[start + 1] = deltaTangent.y;\n                    vertices[start + 2] = deltaTangent.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n            blendShapeUpdateFlag.flag = false;\n          }\n        }\n      }\n    }\n\n    this._vertexChangeFlag = 0;\n  }\n\n  private _releaseCache(): void {\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n\n    this._verticesUint8 = null;\n    this._indices = null;\n    this._verticesFloat32 = null;\n    this._positions.length = 0;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._blendShapes = null;\n    this._blendShapeUpdateFlags = null;\n  }\n}\n\nconst POSITION_VERTEX_ELEMENT = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n\nenum ValueChanged {\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  BlendShape = 0x4000,\n  All = 0xffff\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Constructor of skin\n   * @param name - name\n   */\n  constructor(public name: string) {\n    super(null);\n    this.inverseBindMatrices = []; // inverse bind matrix array\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Entity } from \"../Entity\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Renderer } from \"../Renderer\";\nimport { Shader } from \"../shader/Shader\";\nimport { UpdateFlag } from \"../UpdateFlag\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer implements ICustomClone {\n  private static _uvMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _normalMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n\n  @ignoreClone\n  private _mesh: Mesh;\n  @ignoreClone\n  private _meshUpdateFlag: UpdateFlag;\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  set mesh(mesh: Mesh) {\n    const lastMesh = this._mesh;\n    if (lastMesh !== mesh) {\n      if (lastMesh) {\n        lastMesh._addRefCount(-1);\n        this._meshUpdateFlag.destroy();\n      }\n      if (mesh) {\n        mesh._addRefCount(1);\n        this._meshUpdateFlag = mesh.registerUpdateFlag();\n      }\n      this._mesh = mesh;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      if (this._meshUpdateFlag.flag) {\n        const shaderData = this.shaderData;\n        const vertexElements = mesh._vertexElements;\n\n        shaderData.disableMacro(MeshRenderer._uvMacro);\n        shaderData.disableMacro(MeshRenderer._normalMacro);\n        shaderData.disableMacro(MeshRenderer._tangentMacro);\n        shaderData.disableMacro(MeshRenderer._vertexColorMacro);\n\n        for (let i = 0, n = vertexElements.length; i < n; i++) {\n          const { semantic } = vertexElements[i];\n          switch (semantic) {\n            case \"TEXCOORD_0\":\n              shaderData.enableMacro(MeshRenderer._uvMacro);\n              break;\n            case \"NORMAL\":\n              shaderData.enableMacro(MeshRenderer._normalMacro);\n              break;\n            case \"TANGENT\":\n              shaderData.enableMacro(MeshRenderer._tangentMacro);\n              break;\n            case \"COLOR_0\":\n              shaderData.enableMacro(MeshRenderer._vertexColorMacro);\n              break;\n          }\n        }\n        this._meshUpdateFlag.flag = false;\n      }\n\n      const subMeshes = mesh.subMeshes;\n      const renderPipeline = camera._renderPipeline;\n      const renderElementPool = this._engine._renderElementPool;\n      for (let i = 0, n = subMeshes.length; i < n; i++) {\n        const material = this._materials[i];\n        if (material) {\n          const element = renderElementPool.getFromPool();\n          element.setValue(this, mesh, subMeshes[i], material);\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"mesh is null.\");\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDestroy() {\n    super._onDestroy();\n    const mesh = this._mesh;\n    if (mesh && !mesh.destroyed) {\n      mesh._addRefCount(-1);\n      this._mesh = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MeshRenderer): void {\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _blendShapeMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE\");\n  private static _blendShapeNormalMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_NORMAL\");\n  private static _blendShapeTangentMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TANGENT\");\n\n  private static _jointCountProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n  private static _blendShapeWeightsProperty = Shader.getPropertyByName(\"u_blendShapeWeights\");\n\n  private static _maxJoints: number = 0;\n\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  /** Whether to use joint texture. Automatically used when the device can't support the maximum number of bones. */\n  private _useJointTexture: boolean = false;\n  private _skin: Skin;\n  private _blendShapeWeights: Float32Array;\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._blendShapeWeights = value;\n  }\n\n  /**\n   * Constructor of SkinnedMeshRenderer\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._skin = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    super._updateShaderData(context);\n\n    const shaderData = this.shaderData;\n    if (!this._useJointTexture && this.matrixPalette) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this.matrixPalette);\n    }\n\n    const mesh = <ModelMesh>this.mesh;\n    if (mesh._hasBlendShape) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._blendShapeWeightsProperty, this._blendShapeWeights);\n      shaderData.enableMacro(SkinnedMeshRenderer._blendShapeMacro);\n\n      if (mesh._useBlendShapeNormal) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      }\n      if (mesh._useBlendShapeTangent) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(SkinnedMeshRenderer._blendShapeMacro);\n    }\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  set skin(skin) {\n    this._skin = skin;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** Whether to use a skeleton texture */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 30) / 4);\n    const shaderData = this.shaderData;\n    const jointCount = jointNodes.length;\n\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n      if (jointCount > maxJoints) {\n        if (rhi.canIUseMoreJoints) {\n          this._useJointTexture = true;\n        } else {\n          Logger.error(\n            `component's joints count(${jointCount}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, and don't support jointTexture in this device. suggest joint count less than ${maxJoints}.`,\n            this\n          );\n        }\n      } else {\n        const maxJoints = Math.max(SkinnedMeshRenderer._maxJoints, jointCount);\n        SkinnedMeshRenderer._maxJoints = maxJoints;\n        shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n        shaderData.enableMacro(\"O3_JOINTS_NUM\", maxJoints.toString());\n      }\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * @internal\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      }\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * Generate joint texture.\n   * Format: (4 * RGBA) * jointCont\n   */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n      this.shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n      this.shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this.jointTexture);\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ModelMesh } from \"./ModelMesh\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(posX, posY, posZ);\n      // Texcoord\n      uvs[i] = new Vector2(u, v);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -radius, -radius);\n    bounds.max.setValue(radius, radius, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n    const uvs: Vector2[] = new Array(24);\n\n    // Up\n    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    normals[0] = new Vector3(0, 1, 0);\n    normals[1] = new Vector3(0, 1, 0);\n    normals[2] = new Vector3(0, 1, 0);\n    normals[3] = new Vector3(0, 1, 0);\n    uvs[0] = new Vector2(0, 0);\n    uvs[1] = new Vector2(1, 0);\n    uvs[2] = new Vector2(1, 1);\n    uvs[3] = new Vector2(0, 1);\n    // Down\n    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[4] = new Vector3(0, -1, 0);\n    normals[5] = new Vector3(0, -1, 0);\n    normals[6] = new Vector3(0, -1, 0);\n    normals[7] = new Vector3(0, -1, 0);\n    uvs[4] = new Vector2(0, 1);\n    uvs[5] = new Vector2(1, 1);\n    uvs[6] = new Vector2(1, 0);\n    uvs[7] = new Vector2(0, 0);\n    // Left\n    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[8] = new Vector3(-1, 0, 0);\n    normals[9] = new Vector3(-1, 0, 0);\n    normals[10] = new Vector3(-1, 0, 0);\n    normals[11] = new Vector3(-1, 0, 0);\n    uvs[8] = new Vector2(0, 0);\n    uvs[9] = new Vector2(1, 0);\n    uvs[10] = new Vector2(1, 1);\n    uvs[11] = new Vector2(0, 1);\n    // Right\n    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    normals[12] = new Vector3(1, 0, 0);\n    normals[13] = new Vector3(1, 0, 0);\n    normals[14] = new Vector3(1, 0, 0);\n    normals[15] = new Vector3(1, 0, 0);\n    uvs[12] = new Vector2(1, 0);\n    uvs[13] = new Vector2(0, 0);\n    uvs[14] = new Vector2(0, 1);\n    uvs[15] = new Vector2(1, 1);\n    // Front\n    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[16] = new Vector3(0, 0, 1);\n    normals[17] = new Vector3(0, 0, 1);\n    normals[18] = new Vector3(0, 0, 1);\n    normals[19] = new Vector3(0, 0, 1);\n    uvs[16] = new Vector2(0, 0);\n    uvs[17] = new Vector2(1, 0);\n    uvs[18] = new Vector2(1, 1);\n    uvs[19] = new Vector2(0, 1);\n    // Back\n    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[20] = new Vector3(0, 0, -1);\n    normals[21] = new Vector3(0, 0, -1);\n    normals[22] = new Vector3(0, 0, -1);\n    normals[23] = new Vector3(0, 0, -1);\n    uvs[20] = new Vector2(1, 0);\n    uvs[21] = new Vector2(0, 0);\n    uvs[22] = new Vector2(0, 1);\n    uvs[23] = new Vector2(1, 1);\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, -halfHeight, -halfDepth);\n    bounds.max.setValue(halfWidth, halfHeight, halfDepth);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const z = (i * horizontalCountReciprocal) | 0;\n\n      // Position\n      positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);\n      // Normal\n      normals[i] = new Vector3(0, 1, 0);\n      // Texcoord\n      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = d;\n      indices[offset++] = b;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, 0, -halfHeight);\n    bounds.max.setValue(halfWidth, 0, halfHeight);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Top position\n    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);\n    // Top normal\n    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);\n    // Top texcoord\n    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);\n\n    // Add cap vertices\n    let offset = torsoVertexCount + 2;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottom = positions[i];\n      let curPosX = curPosBottom.x;\n      let curPosZ = curPosBottom.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n\n      const curPosTop = positions[i + positionStride];\n      curPosX = curPosTop.x;\n      curPosZ = curPosTop.z;\n\n      // Top position\n      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);\n      // Top normal\n      normals[offset] = new Vector3(0, 1, 0);\n      // Top texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    const { bounds } = mesh;\n    const radiusMax = Math.max(radiusTop, radiusBottom);\n    bounds.min.setValue(-radiusMax, -halfHeight, -radiusMax);\n    bounds.max.setValue(radiusMax, halfHeight, radiusMax);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        positions[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.setValue(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.setValue(outerRadius, outerRadius, tubeRadius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - y * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Add bottom cap vertices\n    let offset = torsoVertexCount + 1;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPos = positions[i];\n      let curPosX = curPos.x;\n      let curPosZ = curPos.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -halfHeight, -radius);\n    bounds.max.setValue(radius, halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a capsule mesh.\n   * @param engine - Engine\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param radialSegments - Hemispherical end radial segments\n   * @param heightSegments - Cylindrical part height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Capsule model mesh\n   */\n  static createCapsule(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 6,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    radialSegments = Math.max(2, Math.floor(radialSegments));\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n\n    const totalVertexCount = torsoVertexCount + 2 * capVertexCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      (torsoRectangleCount + 2 * capRectangleCount) * 6\n    );\n\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const halfPI = Math.PI / 2;\n    const doublePI = Math.PI * 2;\n\n    const positions = new Array<Vector3>(totalVertexCount);\n    const normals = new Array<Vector3>(totalVertexCount);\n    const uvs = new Array<Vector2>(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // create torso\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = -halfPI + u * doublePI;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      positions[i] = new Vector3(radius * sinTheta, y * unitHeight - halfHeight, radius * cosTheta);\n      normals[i] = new Vector3(sinTheta, 0, cosTheta);\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      doublePI,\n      torsoVertexCount,\n      1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset\n    );\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      -doublePI,\n      torsoVertexCount + capVertexCount,\n      -1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset + 6 * capRectangleCount\n    );\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -radius - halfHeight, -radius);\n    bounds.max.setValue(radius, radius + halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean\n  ) {\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(noLongerAccessible);\n    mesh.addSubMesh(0, indices.length);\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n\n  private static _createCapsuleCap(\n    radius: number,\n    height: number,\n    radialSegments: number,\n    capAlphaRange: number,\n    offset: number,\n    posIndex: number,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ) {\n    const radialCount = radialSegments + 1;\n    const halfHeight = height * 0.5;\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n\n    for (let i = 0; i < capVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * radialSegmentsReciprocal;\n      const alphaDelta = u * capAlphaRange;\n      const thetaDelta = (v * Math.PI) / 2;\n      const sinTheta = Math.sin(thetaDelta);\n\n      const posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      const posY = (radius * Math.cos(thetaDelta) + halfHeight) * posIndex;\n      const posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      const index = i + offset;\n      positions[index] = new Vector3(posX, posY, posZ);\n      normals[index] = new Vector3(posX, posY, posZ);\n      uvs[index] = new Vector2(u, v);\n    }\n\n    for (let i = 0; i < capRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x + offset;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = d;\n    }\n  }\n}\n","import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n  /** Delta positions for the frame being added. */\n  readonly deltaPositions: Readonly<Readonly<Vector3>[]>;\n  /** Delta normals for the frame being added. */\n  readonly deltaNormals: Readonly<Readonly<Vector3[]> | null>;\n  /** Delta tangents for the frame being added. */\n  readonly deltaTangents: Readonly<Readonly<Vector3[]> | null>;\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this.deltaPositions = deltaPositions;\n    this.deltaNormals = deltaNormals;\n    this.deltaTangents = deltaTangents;\n  }\n}\n","import { BlendShapeFrame } from \"./BlendShapeFrame\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n\n  private _frames: BlendShapeFrame[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n    this._updateFlagManager.distribute();\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    this._frames.length = 0;\n    this._updateFlagManager.distribute();\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n\n    this._useBlendShapeNormal = this._useBlendShapeNormal || frame.deltaNormals !== null;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || frame.deltaTangents !== null;\n    this._frames.push(frame);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Buffer, BufferBindFlag, BufferUsage, IndexFormat, MeshTopology, SubMesh, VertexElement } from \"../graphic\";\nimport { BufferMesh } from \"../mesh\";\nimport { SystemInfo } from \"../SystemInfo\";\nimport { ClassPool } from \"./ClassPool\";\nimport { SpriteElement } from \"./SpriteElement\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\ntype Element = SpriteElement | SpriteMaskElement;\n\nexport abstract class Basic2DBatcher {\n  /** The maximum number of vertex. */\n  static MAX_VERTEX_COUNT: number = 4096;\n  static _canUploadSameBuffer: boolean = true;\n\n  /** @internal */\n  _subMeshPool: ClassPool<SubMesh> = new ClassPool(SubMesh);\n  /** @internal */\n  _batchedQueue: Element[] = [];\n  /** @internal */\n  _meshes: BufferMesh[] = [];\n  /** @internal */\n  _meshCount: number = 1;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _indiceBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _indices: Uint16Array;\n  /** @internal */\n  _flushId: number = 0;\n  /** @internal */\n  _vertexCount: number = 0;\n  /** @internal */\n  _elementCount: number = 0;\n\n  constructor(engine: Engine) {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);\n    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);\n\n    const { _meshes, _meshCount } = this;\n    for (let i = 0; i < _meshCount; i++) {\n      _meshes[i] = this._createMesh(engine, i);\n    }\n  }\n\n  drawElement(element: Element): void {\n    const len = element.positions.length;\n    if (this._vertexCount + len > Basic2DBatcher.MAX_VERTEX_COUNT) {\n      this.flush(element.camera.engine);\n    }\n\n    this._vertexCount += len;\n    this._batchedQueue[this._elementCount++] = element;\n  }\n\n  flush(engine: Engine): void {\n    const batchedQueue = this._batchedQueue;\n\n    if (batchedQueue.length === 0) {\n      return;\n    }\n\n    this._updateData(engine);\n    this.drawBatches(engine);\n\n    if (!Basic2DBatcher._canUploadSameBuffer) {\n      this._flushId++;\n    }\n\n    batchedQueue.length = 0;\n    this._subMeshPool.resetPool();\n    this._vertexCount = 0;\n    this._elementCount = 0;\n  }\n\n  clear(): void {\n    this._flushId = 0;\n    this._vertexCount = 0;\n    this._elementCount = 0;\n    this._batchedQueue.length = 0;\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n\n  private _createMesh(engine: Engine, index: number): BufferMesh {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    const mesh = new BufferMesh(engine, `BufferMesh${index}`);\n\n    const vertexElements: VertexElement[] = [];\n    const vertexStride = this.createVertexElements(vertexElements);\n\n    // vertices\n    this._vertexBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      MAX_VERTEX_COUNT * 4 * vertexStride,\n      BufferUsage.Dynamic\n    );\n    // indices\n    this._indiceBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      MAX_VERTEX_COUNT * 3,\n      BufferUsage.Dynamic\n    );\n    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);\n    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n\n    return mesh;\n  }\n\n  private _updateData(engine: Engine): void {\n    const { _meshes, _flushId } = this;\n\n    if (!Basic2DBatcher._canUploadSameBuffer && this._meshCount <= _flushId) {\n      this._meshCount++;\n      _meshes[_flushId] = this._createMesh(engine, _flushId);\n    }\n\n    const { _batchedQueue: batchedQueue, _vertices: vertices, _indices: indices } = this;\n    const mesh = _meshes[_flushId];\n    mesh.clearSubMesh();\n\n    let vertexIndex = 0;\n    let indiceIndex = 0;\n    let vertexStartIndex = 0;\n    let vertexCount = 0;\n    let curIndiceStartIndex = 0;\n    let curMeshIndex = 0;\n    let preElement: Element = null;\n    for (let i = 0, len = batchedQueue.length; i < len; i++) {\n      const curElement = batchedQueue[i];\n\n      // Batch vertex\n      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);\n\n      // Batch indice\n      const { triangles } = curElement;\n      const triangleNum = triangles.length;\n      for (let j = 0; j < triangleNum; j++) {\n        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;\n      }\n\n      curIndiceStartIndex += curElement.positions.length;\n\n      if (preElement === null) {\n        vertexCount += triangleNum;\n      } else {\n        if (this.canBatch(preElement, curElement)) {\n          vertexCount += triangleNum;\n        } else {\n          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n          vertexStartIndex += vertexCount;\n          vertexCount = triangleNum;\n          batchedQueue[curMeshIndex++] = preElement;\n        }\n      }\n\n      preElement = curElement;\n    }\n\n    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n    batchedQueue[curMeshIndex] = preElement;\n\n    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);\n    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);\n  }\n\n  private _getSubMeshFromPool(start: number, count: number): SubMesh {\n    const subMesh = this._subMeshPool.getFromPool();\n    subMesh.start = start;\n    subMesh.count = count;\n    subMesh.topology = MeshTopology.Triangles;\n    return subMesh;\n  }\n\n  /**\n   * @internal\n   */\n  abstract createVertexElements(vertexElements: VertexElement[]): number;\n\n  /**\n   * @internal\n   */\n  abstract canBatch(preElement: Element, curElement: Element): boolean;\n\n  /**\n   * @internal\n   */\n  abstract updateVertices(element: Element, vertices: Float32Array, vertexIndex: number): number;\n\n  /**\n   * @internal\n   */\n  abstract drawBatches(engine: Engine): void;\n}\n","import { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\nexport class SpriteMaskBatcher extends Basic2DBatcher {\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    return 20;\n  }\n\n  canBatch(preElement: SpriteMaskElement, curElement: SpriteMaskElement): boolean {\n    if (preElement.isAdd !== curElement.isAdd) {\n      return false;\n    }\n\n    // Compare renderer property\n    const preShaderData = (<SpriteMask>preElement.component).shaderData;\n    const curShaderData = (<SpriteMask>curElement.component).shaderData;\n    const textureProperty = SpriteMask._textureProperty;\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    return (\n      preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) &&\n      preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty)\n    );\n  }\n\n  updateVertices(element: SpriteMaskElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteMaskElement = <SpriteMaskElement>batchedQueue[i];\n\n      if (!subMesh || !spriteMaskElement) {\n        return;\n      }\n\n      const renderer = <SpriteMask>spriteMaskElement.component;\n      const material = spriteMaskElement.material;\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // Update stencil state\n      const stencilState = material.renderState.stencilState;\n      const op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;\n      stencilState.passOperationFront = op;\n      stencilState.passOperationBack = op;\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      const camera = spriteMaskElement.camera;\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine, false);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n    }\n  }\n}\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { SpriteMaskBatcher } from \"./SpriteMaskBatcher\";\n\n/**\n * @internal\n */\nexport class SpriteMaskManager {\n  _batcher: SpriteMaskBatcher;\n\n  private _preMaskLayer: number = 0;\n\n  constructor(engine: Engine) {\n    this._batcher = new SpriteMaskBatcher(engine);\n  }\n\n  clear(): void {\n    this._preMaskLayer = 0;\n    this._batcher.clear();\n  }\n\n  preRender(camera: Camera, renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._batcher.clear();\n    this._processMasksDiff(camera, renderer);\n    this._batcher.flush(camera.engine);\n  }\n\n  postRender(renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._preMaskLayer = renderer.maskLayer;\n  }\n\n  destroy(): void {\n    this._batcher.destroy();\n    this._batcher = null;\n  }\n\n  private _processMasksDiff(camera: Camera, renderer: SpriteRenderer): void {\n    const preMaskLayer = this._preMaskLayer;\n    const curMaskLayer = renderer.maskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const allMasks = camera._renderPipeline._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const addLayer = curMaskLayer & ~preMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n\n      const allMaskElements = allMasks._elements;\n      for (let i = 0, n = allMasks.length; i < n; i++) {\n        const mask = allMaskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & addLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = true;\n          this._batcher.drawElement(maskRenderElement);\n          continue;\n        }\n\n        if (influenceLayers & reduceLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = false;\n          this._batcher.drawElement(maskRenderElement);\n        }\n      }\n    }\n  }\n}\n","/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n","/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic\";\nimport { Material } from \"../material\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  /** Material of the sky. */\n  material: Material;\n  /** Mesh of the sky. */\n  mesh: Mesh;\n  /** @internal */\n  _matrix: Matrix = new Matrix();\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { ModelMesh } from \".\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  /** @internal */\n  _mesh: ModelMesh;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._engine._backgroundTextureMaterial.shaderData.setTexture(\"u_baseTexture\", value);\n    }\n  }\n\n  /**\n   * @internal\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {\n    this._mesh = this._createPlane(_engine);\n  }\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    if (!this._texture) {\n      return;\n    }\n    const { canvas } = this._engine;\n    const { width, height } = canvas;\n    const { _mesh:_backgroundTextureMesh } = this;\n    const positions = _backgroundTextureMesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].setValue(-1, -1, 1);\n        positions[1].setValue(1, -1, 1);\n        positions[2].setValue(-1, 1, 1);\n        positions[3].setValue(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (this._texture.height * width) / this.texture.width / height;\n        positions[0].setValue(-1, -fitWidthScale, 1);\n        positions[1].setValue(1, -fitWidthScale, 1);\n        positions[2].setValue(-1, fitWidthScale, 1);\n        positions[3].setValue(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (this._texture.width * height) / this.texture.height / width;\n        positions[0].setValue(-fitHeightScale, -1, 1);\n        positions[1].setValue(fitHeightScale, -1, 1);\n        positions[2].setValue(-fitHeightScale, 1, 1);\n        positions[3].setValue(fitHeightScale, 1, 1);\n        break;\n    }\n    _backgroundTextureMesh.setPositions(positions);\n    _backgroundTextureMesh.uploadData(false);\n  }\n\n  private _createPlane(\n    engine: Engine,\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    mesh.isGCIgnored = true;\n    const indices = new Uint8Array([1, 2, 0, 1, 3, 2]);\n\n    const positions: Vector3[] = new Array(4);\n    const uvs: Vector2[] = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      positions[i] = new Vector3();\n      uvs[i] = new Vector2(i % 2, 1 - ((i * 0.5) | 0));\n    }\n\n    mesh.setPositions(positions);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length);\n    return mesh;\n  }\n}\n","/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n","import { Color, SphericalHarmonics3 } from \"@oasis-engine/math\";\nimport { Scene } from \"../Scene\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCubeMap } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight {\n  private static _shMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SH\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n  private static _decodeRGBMMacro: ShaderMacro = Shader.getMacroByName(\"O3_DECODE_ENV_RGBM\");\n\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_sh\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularReflection: TextureCubeMap;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n  private _scene: Scene;\n  private _specularTextureDecodeRGBM: boolean = false;\n\n  /**\n   * Whether to decode from specularTexture with RGBM format.\n   */\n  get specularTextureDecodeRGBM(): boolean {\n    return this._specularTextureDecodeRGBM;\n  }\n\n  set specularTextureDecodeRGBM(value: boolean) {\n    this._specularTextureDecodeRGBM = value;\n    if (!this._scene) return;\n\n    if (value) {\n      this._scene.shaderData.enableMacro(AmbientLight._decodeRGBMMacro);\n    } else {\n      this._scene.shaderData.disableMacro(AmbientLight._decodeRGBMMacro);\n    }\n  }\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n    if (!this._scene) return;\n\n    if (value === DiffuseMode.SphericalHarmonics) {\n      this._scene.shaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      this._scene.shaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      value.cloneTo(this._diffuseSolidColor);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    if (!this._scene) return;\n\n    if (value) {\n      this._scene.shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._preComputeSH(value, this._shArray));\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n    if (!this._scene) return;\n\n    this._scene.shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n  }\n\n  /**\n   * Specular reflection texture.\n   * @remarks This texture must be baked from @oasis-engine/baker\n   */\n  get specularTexture(): TextureCubeMap {\n    return this._specularReflection;\n  }\n\n  set specularTexture(value: TextureCubeMap) {\n    this._specularReflection = value;\n    if (!this._scene) return;\n\n    const shaderData = this._scene.shaderData;\n\n    if (value) {\n      shaderData.setTexture(AmbientLight._specularTextureProperty, value);\n      shaderData.setFloat(AmbientLight._mipLevelProperty, this._specularReflection.mipmapCount - 1);\n      shaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      shaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n    if (!this._scene) return;\n\n    this._scene.shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n  }\n\n  /**\n   * @internal\n   */\n  _setScene(value: Scene) {\n    this._scene = value;\n    if (!value) return;\n\n    const { shaderData } = value;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n\n    this.diffuseMode = this._diffuseMode;\n    this.diffuseSphericalHarmonics = this._diffuseSphericalHarmonics;\n    this.diffuseIntensity = this._diffuseIntensity;\n    this.specularTexture = this._specularReflection;\n    this.specularIntensity = this._specularIntensity;\n    this.specularTextureDecodeRGBM = this._specularTextureDecodeRGBM;\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): Float32Array {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n\n    return out;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene feature plug-in.\n * @deprecated\n */\nexport abstract class SceneFeature {\n  /**\n   * Callback before every scene update.\n   * @param scene - Scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * Callback after every scene update.\n   * @param scene - Scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * Callback before scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after the scene is destroyed.\n   * @param scene - Scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"./LightFeature\";\n\n/**\n * Light base class.\n */\nexport class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix() {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this.lightColor;\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this.lightColor;\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    angleCos: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _inverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const color = this.lightColor;\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { DirectLight } from \"./DirectLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Determine whether there are lights in the scene.\n * @returns Has light\n */\nexport function hasLight(): boolean {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Light plug-in.\n */\nexport class LightFeature extends SceneFeature {\n  visibleLights: Light[];\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * Register a light object to the current scene.\n   * @param light\n   */\n  attachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * Remove a light object from the current scene.\n   * @param light\n   */\n  detachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData) {\n    /**\n     * ambientLight and envMapLight only use the last one in the scene\n     * */\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof DirectLight) {\n        light._appendData(directLightCount++);\n      } else if (light instanceof PointLight) {\n        light._appendData(pointLightCount++);\n      } else if (light instanceof SpotLight) {\n        light._appendData(spotLightCount++);\n      }\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n","import { Background } from \"./Background\";\nimport { EngineObject, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { LightFeature } from \"./lighting/LightFeature\";\nimport { SceneFeature } from \"./SceneFeature\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** Scene name. */\n  name: string;\n\n  /** The background of the scene. */\n  readonly background: Background = new Background(this._engine);\n\n  /** Scene-related shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** @internal */\n  _activeCameras: Camera[] = [];\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _rootEntities: Entity[] = [];\n  private _ambientLight: AmbientLight;\n\n  /**\n   * Ambient light.\n   */\n  get ambientLight(): AmbientLight {\n    return this._ambientLight;\n  }\n\n  set ambientLight(value: AmbientLight) {\n    if (!value) {\n      Logger.warn(\"The scene must have one ambient light\");\n      return;\n    }\n\n    const lastAmbientLight = this._ambientLight;\n    if (lastAmbientLight !== value) {\n      lastAmbientLight && lastAmbientLight._setScene(null);\n      value._setScene(this);\n      this._ambientLight = value;\n    }\n  }\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    Scene.sceneFeatureManager.addObject(this);\n    shaderData._addRefCount(1);\n    this.ambientLight = new AmbientLight();\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this.shaderData._addRefCount(-1);\n  }\n\n  /**\n   * @internal\n   */\n  _attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(): void {\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.engine._macroCollection,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    const lightMgr = this.findFeature(LightFeature);\n\n    lightMgr._updateShaderData(this.shaderData);\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n","import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrSpecularFs from \"../shaderlib/extra/pbr-specular.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport shadowFs from \"../shaderlib/extra/shadow.fs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"pbr-specular\", pbrVs, pbrSpecularFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"shadow\", shadowMapVs, shadowFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n    Shader.create(\"SpriteMask\", spriteMaskVs, spriteMaskFs);\n    Shader.create(\"Sprite\", spriteVs, spriteFs);\n    Shader.create(\"background-texture\", backgroundTextureVs, backgroundTextureFs);\n  }\n}\n","import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            cacheMap[0] = shader;\n          } else {\n            cacheMap = cacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n","import { IPhysics } from \"@oasis-engine/design\";\nimport { ColorSpace } from \".\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { EngineSettings } from \"./EngineSettings\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { InputManager } from \"./input/InputManager\";\nimport { RenderQueueType } from \"./material/enums/RenderQueueType\";\nimport { Material } from \"./material/Material\";\nimport { PhysicsManager } from \"./physics\";\nimport { IHardwareRenderer } from \"./renderingHardwareInterface/IHardwareRenderer\";\nimport { ClassPool } from \"./RenderPipeline/ClassPool\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nimport { SpriteMaskElement } from \"./RenderPipeline/SpriteMaskElement\";\nimport { SpriteMaskManager } from \"./RenderPipeline/SpriteMaskManager\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { CompareFunction } from \"./shader\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderMacro } from \"./shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, TextureCubeFace, TextureCubeMap, TextureFormat } from \"./texture\";\n\n/** TODO: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** @internal */\n  static _gammaMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_COLORSPACE_GAMMA\");\n\n  /** Physics manager of Engine. */\n  readonly physicsManager: PhysicsManager;\n  readonly inputManager: InputManager;\n\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: IHardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n  _renderElementPool: ClassPool<RenderElement> = new ClassPool(RenderElement);\n  _spriteElementPool: ClassPool<SpriteElement> = new ClassPool(SpriteElement);\n  _spriteMaskElementPool: ClassPool<SpriteMaskElement> = new ClassPool(SpriteMaskElement);\n  _spriteDefaultMaterial: Material;\n  _spriteMaskDefaultMaterial: Material;\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _whiteTexture2D: Texture2D;\n  /* @internal */\n  _whiteTextureCube: TextureCubeMap;\n  /* @internal */\n  _backgroundTextureMaterial: Material;\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _spriteMaskManager: SpriteMaskManager;\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  protected _canvas: Canvas;\n\n  private _settings: EngineSettings = {};\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * Settings of Engine.\n   */\n  get settings(): Readonly<EngineSettings> {\n    return this._settings;\n  }\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   * @param physics - native physics Engine\n   */\n  constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer, physics?: IPhysics, settings?: EngineSettings) {\n    super();\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n    if (physics) {\n      PhysicsManager._nativePhysics = physics;\n      this.physicsManager = new PhysicsManager();\n    }\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n\n    this._spriteMaskManager = new SpriteMaskManager(this);\n    this._spriteDefaultMaterial = this._createSpriteMaterial();\n    this._spriteMaskDefaultMaterial = this._createSpriteMaskMaterial();\n\n    this.inputManager = new InputManager(this);\n\n    const whitePixel = new Uint8Array([255, 255, 255, 255]);\n\n    const whiteTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);\n    whiteTexture2D.setPixelBuffer(whitePixel);\n    whiteTexture2D.isGCIgnored = true;\n\n    const whiteTextureCube = new TextureCubeMap(this, 1, TextureFormat.R8G8B8A8, false);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, whitePixel);\n    whiteTextureCube.isGCIgnored = true;\n\n    this._whiteTexture2D = whiteTexture2D;\n    this._whiteTextureCube = whiteTextureCube;\n\n    this._backgroundTextureMaterial = new Material(this, Shader.find(\"background-texture\"));\n    this._backgroundTextureMaterial.isGCIgnored = true;\n    this._backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    const colorSpace = settings?.colorSpace || ColorSpace.Linear;\n    colorSpace === ColorSpace.Gamma && this._macroCollection.enable(Engine._gammaMacro);\n    this._settings.colorSpace = colorSpace;\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    this._renderElementPool.resetPool();\n    this._spriteElementPool.resetPool();\n    this._spriteMaskElementPool.resetPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      scene._activeCameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n\n      componentsManager.callScriptOnStart();\n      if (this.physicsManager) {\n        componentsManager.callColliderOnUpdate();\n        this.physicsManager._update(deltaTime / 1000.0);\n        componentsManager.callColliderOnLateUpdate();\n      }\n      this.inputManager._update();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestroy();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * Destroy engine.\n   */\n  destroy(): void {\n    if (this._sceneManager) {\n      this._whiteTexture2D.destroy(true);\n      this._whiteTextureCube.destroy(true);\n      this.inputManager._destroy();\n      this.trigger(new Event(\"shutdown\", this));\n      engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n      // -- cancel animation\n      this.pause();\n\n      this._animate = null;\n\n      this._sceneManager._activeScene.destroy();\n      this._resourceManager._destroy();\n      // If engine destroy, callComponentDestroy() maybe will not call anymore.\n      this._componentsManager.callComponentDestroy();\n      this._sceneManager = null;\n      this._resourceManager = null;\n\n      this._canvas = null;\n\n      this.features = [];\n      this._time = null;\n\n      // delete mask manager\n      this._spriteMaskManager.destroy();\n\n      // todo: delete\n      (engineFeatureManager as any)._objects = [];\n      this.removeAllEventListeners();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shader: Shader): ShaderProgramPool {\n    const index = shader._shaderId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length < shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [scene, camera]); //TODO: will be removed\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [scene, camera]); //TODO: will be removed\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  private _createSpriteMaterial(): Material {\n    const material = new Material(this, Shader.find(\"Sprite\"));\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    material.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(): Material {\n    const material = new Material(this, Shader.find(\"SpriteMask\"));\n    const renderState = material.renderState;\n    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.stencilState.enabled = true;\n    renderState.depthState.enabled = false;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * System info.\n */\nexport class SystemInfo {\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _isIos(): boolean {\n    if (!window) {\n      return false;\n    }\n\n    const ua = window.navigator.userAgent.toLocaleLowerCase();\n    return /iphone|ipad|ipod/.test(ua);\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Engine feature plug-in.\n * @deprecated\n */\nexport class EngineFeature {\n  /**\n   * Callback before the engine main loop runs,used to load resource.\n   * @param engine - Engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * Callback before every engine tick.\n   * @param engine - Engine\n   * @param currentScene - Scene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after every engine tick.\n   * @param  engine - Engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after the engine is destroyed.\n   * @param engine - Engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { ColliderShape } from \"./physics\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityCacheIndex: number = -1;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other ColliderShape\n   */\n  onTriggerEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other ColliderShape\n   */\n  onTriggerExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other ColliderShape\n   */\n  onTriggerStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape.\n   */\n  onPointerDown(): void {}\n\n  /**\n   * Called when the pointer is up while over the ColliderShape.\n   */\n  onPointerUp(): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   */\n  onPointerClick(): void {}\n\n  /**\n   * Called when the pointer is enters the ColliderShape.\n   */\n  onPointerEnter(): void {}\n\n  /**\n   * Called when the pointer is no longer over the ColliderShape.\n   */\n  onPointerExit(): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape and is still holding down.\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this._entity._addScript(this);\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    // Use \"xxIndex\" is more safe.\n    // When call onDisable it maybe it still not in script queue,for example write \"entity.isActive = false\" in onWake().\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this._onUpdateIndex !== -1) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this._onLateUpdateIndex !== -1) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this._entityCacheIndex !== -1) {\n      this._entity._removeScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestroyComponent(this);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RenderPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearFlags: CameraClearFlags | undefined;\n  public clearColor: Color | undefined;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n}\n\nexport { RenderPass };\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * @internal\n */\nexport class SpriteBatcher extends Basic2DBatcher {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    vertexElements[2] = new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0);\n    return 36;\n  }\n\n  canBatch(preElement: SpriteElement, curElement: SpriteElement): boolean {\n    const preRenderer = <SpriteRenderer>preElement.component;\n    const curRenderer = <SpriteRenderer>curElement.component;\n\n    // Compare mask\n    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {\n      return false;\n    }\n\n    // Compare renderer property\n    const textureProperty = SpriteBatcher._textureProperty;\n    if (preRenderer.shaderData.getTexture(textureProperty) !== curRenderer.shaderData.getTexture(textureProperty)) {\n      return false;\n    }\n\n    // Compare material\n    return preElement.material === curElement.material;\n  }\n\n  checkBatchWithMask(left: SpriteRenderer, right: SpriteRenderer): boolean {\n    const leftMaskInteraction = left.maskInteraction;\n\n    if (leftMaskInteraction !== right.maskInteraction) {\n      return false;\n    }\n    if (leftMaskInteraction === SpriteMaskInteraction.None) {\n      return true;\n    }\n    return left.maskLayer === right.maskLayer;\n  }\n\n  updateVertices(element: SpriteElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv, color } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n      vertices[vertexIndex++] = color.r;\n      vertices[vertexIndex++] = color.g;\n      vertices[vertexIndex++] = color.b;\n      vertices[vertexIndex++] = color.a;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n    const maskManager = engine._spriteMaskManager;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteElement = <SpriteElement>batchedQueue[i];\n\n      if (!subMesh || !spriteElement) {\n        return;\n      }\n\n      const renderer = <SpriteRenderer>spriteElement.component;\n      const camera = spriteElement.camera;\n      const material = spriteElement.material;\n      maskManager.preRender(camera, renderer);\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine,false);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n\n      maskManager.postRender(renderer);\n    }\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SpriteBatcher } from \"./SpriteBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\ntype Item = RenderElement | SpriteElement;\n\n/**\n * Render queue.\n */\nexport class RenderQueue {\n  /**\n   * @internal\n   */\n  static _compareFromNearToFar(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      a.component._distanceForSort - b.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  /**\n   * @internal\n   */\n  static _compareFromFarToNear(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      b.component._distanceForSort - a.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  readonly items: Item[] = [];\n  private _spriteBatcher: SpriteBatcher;\n\n  constructor(engine: Engine) {\n    this._spriteBatcher = new SpriteBatcher(engine);\n  }\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement | SpriteElement): void {\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer) {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (!!(item as RenderElement).mesh) {\n        this._spriteBatcher.flush(engine);\n\n        const compileMacros = Shader._compileMacros;\n        const element = <RenderElement>item;\n        const renderer = element.component;\n        const material = replaceMaterial ? replaceMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        material._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n\n        const program = material.shader._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          // UnGroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUnGroupTextures();\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadCamera !== camera) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          // We only consider switchProgram case, because UnGroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUnGroupTextures();\n          }\n        }\n        material.renderState._apply(camera.engine, renderer.entity.transform._isFrontFaceInvert());\n\n        rhi.drawPrimitive(element.mesh, element.subMesh, program);\n      } else {\n        const spriteElement = <SpriteElement>item;\n        this._spriteBatcher.drawElement(spriteElement);\n      }\n    }\n\n    this._spriteBatcher.flush(engine);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n    this._spriteBatcher.clear();\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._spriteBatcher.destroy();\n    this._spriteBatcher = null;\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(compareFunc: Function): void {\n    this._quickSort(this.items, 0, this.items.length, compareFunc);\n  }\n\n  /**\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  private _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n","import { Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { Background } from \"..\";\nimport { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Sky } from \"../sky/Sky\";\nimport { TextureCubeFace } from \"../texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  /** @internal */\n  _opaqueQueue: RenderQueue;\n  /** @internal */\n  _transparentQueue: RenderQueue;\n  /** @internal */\n  _alphaTestQueue: RenderQueue;\n  /** @internal */\n  _allSpriteMasks: DisorderedArray<SpriteMask> = new DisorderedArray();\n\n  private _camera: Camera;\n  private _defaultPass: RenderPass;\n  private _renderPassArray: Array<RenderPass>;\n  private _lastCanvasSize = new Vector2();\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._opaqueQueue = new RenderQueue(engine);\n    this._alphaTestQueue = new RenderQueue(engine);\n    this._transparentQueue = new RenderQueue(engine);\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._opaqueQueue.destroy();\n    this._alphaTestQueue.destroy();\n    this._transparentQueue.destroy();\n    this._allSpriteMasks = null;\n    this._renderPassArray = null;\n    this._defaultPass = null;\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   * @param mipLevel - Set mip level the data want to write\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const alphaTestQueue = this._alphaTestQueue;\n    const transparentQueue = this._transparentQueue;\n\n    camera.engine._spriteMaskManager.clear();\n\n    opaqueQueue.clear();\n    alphaTestQueue.clear();\n    transparentQueue.clear();\n    this._allSpriteMasks.length = 0;\n\n    camera.engine._componentsManager.callRender(context);\n    opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n    transparentQueue.sort(RenderQueue._compareFromFarToNear);\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera, cubeFace, mipLevel);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n\n    if (pass.enabled) {\n      const { engine, scene } = camera;\n      const { background } = scene;\n      const rhi = engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera, mipLevel); // change viewport with mip level\n      renderTarget?._setRenderTargetInfo(cubeFace, mipLevel);\n      const clearFlags = pass.clearFlags ?? camera.clearFlags;\n      const color = pass.clearColor ?? background.solidColor;\n      if (clearFlags !== CameraClearFlags.None) {\n        rhi.clearRenderTarget(camera.engine, clearFlags, color);\n      }\n\n      if (pass.renderOverride) {\n        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n      } else {\n        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask);\n        if (camera.clearFlags === CameraClearFlags.DepthColor) {\n          if (background.mode === BackgroundMode.Sky) {\n            this._drawSky(engine, camera, background.sky);\n          } else if (background.mode === BackgroundMode.Texture && background.texture) {\n            this._drawBackgroundTexture(engine, background);\n          }\n        }\n        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n\n      renderTarget?._blitRenderTarget();\n      renderTarget?.generateMipmaps();\n    }\n\n    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement | SpriteElement) {\n    const renderQueueType = element.material.renderQueueType;\n\n    if (renderQueueType > (RenderQueueType.Transparent + RenderQueueType.AlphaTest) >> 1) {\n      this._transparentQueue.pushPrimitive(element);\n    } else if (renderQueueType > (RenderQueueType.AlphaTest + RenderQueueType.Opaque) >> 1) {\n      this._alphaTestQueue.pushPrimitive(element);\n    } else {\n      this._opaqueQueue.pushPrimitive(element);\n    }\n  }\n\n  private _drawBackgroundTexture(engine: Engine, background: Background) {\n    const rhi = engine._hardwareRenderer;\n    const { _backgroundTextureMaterial, canvas } = engine;\n    const mesh = background._mesh;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.setValue(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const program = _backgroundTextureMaterial.shader._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);\n    program.uploadUnGroupTextures();\n\n    _backgroundTextureMaterial.renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n\n  private _drawSky(engine: Engine, camera: Camera, sky: Sky): void {\n    const { material, mesh, _matrix } = sky;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    const rhi = engine._hardwareRenderer;\n    const { shaderData, shader, renderState } = material;\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(camera._globalShaderMacro, shaderData._macroCollection, compileMacros);\n\n    const { viewMatrix, projectionMatrix } = camera;\n    viewMatrix.cloneTo(_matrix);\n    const e = _matrix.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(projectionMatrix, _matrix, _matrix);\n    shaderData.setMatrix(\"u_mvpNoscale\", _matrix);\n\n    const program = shader._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.materialUniformBlock, shaderData);\n    program.uploadUnGroupTextures();\n\n    renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n}\n","import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"./base\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\nclass MathTemp {\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n  private static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  private static _inverseProjectionMatrixProperty = Shader.getPropertyByName(\"u_projInvMat\");\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   * @defaultValue `CameraClearFlags.DepthColor`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.DepthColor;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to Entity's layer.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: UpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: UpdateFlag;\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    // Remove scale\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implementation\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implementation\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * Create the Camera component.\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector3): Vector3 {\n    const cameraPoint = MathTemp.tempVec3;\n    const viewportPoint = MathTemp.tempVec4;\n\n    Vector3.transformCoordinate(point, this.viewMatrix, cameraPoint);\n    Vector3.transformToVec4(cameraPoint, this.projectionMatrix, viewportPoint);\n\n    const w = viewportPoint.w;\n    out.setValue((viewportPoint.x / w + 1.0) * 0.5, (1.0 - viewportPoint.y / w) * 0.5, -cameraPoint.z);\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const { nearClipPlane, farClipPlane } = this;\n    const nf = 1 / (nearClipPlane - farClipPlane);\n\n    let z: number;\n    if (this.isOrthographic) {\n      z = -point.z * 2 * nf;\n      z += (farClipPlane + nearClipPlane) * nf;\n    } else {\n      const pointZ = point.z;\n      z = -pointZ * (nearClipPlane + farClipPlane) * nf;\n      z += 2 * nearClipPlane * farClipPlane * nf;\n      z = z / pointZ;\n    }\n\n    this._innerViewportToWorldPoint(point.x, point.y, (z + 1.0) / 2.0, this._getInvViewProjMat(), out);\n    return out;\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const invViewProjMat = this._getInvViewProjMat();\n    // Use the intersection of the near clipping plane as the origin point.\n    const origin = this._innerViewportToWorldPoint(point.x, point.y, 0.0, invViewProjMat, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    const direction = this._innerViewportToWorldPoint(point.x, point.y, 1.0, invViewProjMat, out.direction);\n    Vector3.subtract(direction, origin, direction);\n    direction.normalize();\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   * @param point - Point in world space\n   * @param out - Point of screen space\n   * @returns Point of screen space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector3): Vector3 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   *\n   * @param point - Screen space point, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight), The z position is in world units from the camera\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight)\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0\n   */\n  render(cubeFace?: TextureCubeFace, mipLevel: number = 0): void {\n    // compute cull frustum.\n    const context = this.engine._renderContext;\n    context._setContext(this);\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(context._viewProjectMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData(context);\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    if (mipLevel > 0 && !this.engine._hardwareRenderer.isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n    this._renderPipeline.render(context, cubeFace, mipLevel);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onActive() {\n    this.entity.scene._attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onInActive() {\n    this.entity.scene._detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange() {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(x: number, y: number, z: number, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec3;\n    clipPoint.setValue(x * 2 - 1, 1 - y * 2, z * 2 - 1);\n    Vector3.transformCoordinate(clipPoint, invViewProjMat, out);\n    return out;\n  }\n\n  private _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);\n    shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);\n    shaderData.setMatrix(Camera._vpMatrixProperty, context._viewProjectMatrix);\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);\n    shaderData.setMatrix(Camera._inverseProjectionMatrixProperty, this._getInverseProjectionMatrix());\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * The inverse matrix of view projection matrix.\n   */\n  private _getInvViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this._getInverseProjectionMatrix(), this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * The inverse of the projection matrix.\n   */\n  private _getInverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body as XMLHttpRequestBodyInit);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"json\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"buffer\",\n  /** 2D Texture. */\n  Texture2D = \"texture2d\",\n  /** Cube Texture. */\n  TextureCube = \"texture-cube\",\n  /** Material. */\n  Material = \"material\",\n  /** Mesh. */\n  Mesh = \"mesh\",\n  /** Animation Clip. */\n  AnimationClip = \"animation-clip\",\n  /** Prefab.*/\n  Prefab = \"prefab\",\n  /** Compress Texture. */\n  KTX = \"ktx\",\n  /** Cube Compress Texture. */\n  KTXCube = \"ktx-cube\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"sprite-atlas\",\n  /** ambient light */\n  Env = \"environment\"\n}\n","/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n","/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n","import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  private static _alphaCutoffMacro: ShaderMacro = Shader.getMacroByName(\"ALPHA_CUTOFF\");\n  private static _alphaCutoffProp = Shader.getPropertyByName(\"u_alphaCutoff\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode;\n\n  /**\n   * Is this material transparent.\n   * @remarks\n   * If material is transparent, transparent blend mode will be affected by `blendMode`, default is `BlendMode.Normal`.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value === this._isTransparent) return;\n    this._isTransparent = value;\n\n    const {\n      depthState,\n      blendState: { targetBlendState }\n    } = this.renderState;\n\n    if (value) {\n      targetBlendState.enabled = true;\n      depthState.writeEnabled = false;\n      this.renderQueueType = RenderQueueType.Transparent;\n    } else {\n      targetBlendState.enabled = false;\n      depthState.writeEnabled = true;\n      this.renderQueueType = this.shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n\n    if (value > 0) {\n      this.shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.AlphaTest;\n    } else {\n      this.shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Set which face for render.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value === this._renderFace) return;\n    this._renderFace = value;\n\n    switch (value) {\n      case RenderFace.Front:\n        this.renderState.rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        this.renderState.rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        this.renderState.rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * Alpha blend mode.\n   * @remarks\n   * Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value === this._blendMode) return;\n    this._blendMode = value;\n\n    const {\n      blendState: { targetBlendState: target }\n    } = this.renderState;\n\n    switch (value) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n    this.blendMode = BlendMode.Normal;\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n  }\n\n  /**\n   * @override\n   * Clone and return the instance.\n   */\n  clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * @override\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _diffuseColorProp = Shader.getPropertyByName(\"u_diffuseColor\");\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _shininessProp = Shader.getPropertyByName(\"u_shininess\");\n  private static _normalIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_diffuseTexture\");\n  private static _specularTextureProp = Shader.getPropertyByName(\"u_specularTexture\");\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveTexture\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_DIFFUSE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_DIFFUSE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_EMISSIVE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_EMISSIVE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._diffuseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseColorSampler\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n  private static _normalTextureIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n  private static _occlusionTextureIntensityProp = Shader.getPropertyByName(\"u_occlusionStrength\");\n\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveSampler\");\n  private static _occlusionTextureProp = Shader.getPropertyByName(\"u_occlusionSampler\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_BASECOLORMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_BASECOLORMAP\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalTextureIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, value);\n    this.shaderData.setFloat(\"u_normalIntensity\", value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_EMISSIVEMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_EMISSIVEMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_OCCLUSIONMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_OCCLUSIONMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  protected constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = Shader.getPropertyByName(\"u_metal\");\n  private static _roughnessProp = Shader.getPropertyByName(\"u_roughness\");\n  private static _metallicRoughnessTextureProp = Shader.getPropertyByName(\"u_metallicRoughnessSampler\");\n\n  /**\n   * Metallic.\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness.\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._metallicRoughnessTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._metallicRoughnessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_METALROUGHNESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_METALROUGHNESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n    this.shaderData.setFloat(PBRMaterial._metallicProp, 1.0);\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _glossinessProp = Shader.getPropertyByName(\"u_glossiness\");\n  private static _specularGlossinessTextureProp = Shader.getPropertyByName(\"u_specularGlossinessSampler\");\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr-specular\"));\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseTexture\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_BASE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_BASE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"OMIT_NORMAL\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends RefObject {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n","import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@oasis-engine/math\";\nimport { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { UpdateFlagManager } from \"../../UpdateFlagManager\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends RefObject {\n  private static _rectangleTriangles: number[] = [0, 2, 1, 2, 0, 3];\n\n  /** The name of sprite. */\n  name: string;\n\n  /** @internal */\n  _uv: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _bounds: BoundingBox = new BoundingBox();\n  /** @internal */\n  _triangles: number[];\n  /** @internal temp solution. */\n  _assetID: number;\n\n  private _pixelsPerUnit: number;\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n  private _dirtyFlag: DirtyFlag = DirtyFlag.all;\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   *  Bounding volume of the sprite.\n   *  @remarks The returned bounds should be considered deep-read-only.\n   */\n  get bounds(): Readonly<BoundingBox> {\n    if (this._isContainDirtyFlag(DirtyFlag.positions) && this._texture) {\n      this._updatePositionsAndBounds();\n      this._setDirtyFlagFalse(DirtyFlag.positions);\n    }\n    return this._bounds;\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.setValue(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    const pivot = this._pivot;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    if (pivot === value || pivot.x !== x || pivot.y !== y) {\n      pivot.setValue(x, y);\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    const region = this._region;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    region.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The number of pixels in the sprite that correspond to one unit in world space.\n   */\n  get pixelsPerUnit(): number {\n    return this._pixelsPerUnit;\n  }\n\n  set pixelsPerUnit(value: number) {\n    if (this._pixelsPerUnit !== value) {\n      this._pixelsPerUnit = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param pixelsPerUnit - The number of pixels in the Sprite that correspond to one unit in world space\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    pixelsPerUnit: number = 128,\n    name: string = null\n  ) {\n    super(engine);\n\n    this.name = name;\n    this._texture = texture;\n    this._pixelsPerUnit = pixelsPerUnit;\n\n    region && region.cloneTo(this._region);\n    pivot && pivot.cloneTo(this._pivot);\n\n    this._triangles = Sprite._rectangleTriangles;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned sprite\n   */\n   clone(): Sprite {\n    const cloneSprite = new Sprite(\n      this._engine,\n      this._texture,\n      this._region,\n      this._pivot,\n      this._pixelsPerUnit,\n      this.name\n    );\n    cloneSprite._assetID = this._assetID;\n    cloneSprite._atlasRotated = this._atlasRotated;\n    this._atlasRegion.cloneTo(cloneSprite._atlasRegion);\n    this._atlasRegionOffset.cloneTo(cloneSprite._atlasRegionOffset);\n    return cloneSprite;\n  }\n\n  /**\n   * @internal\n   */\n  _registerUpdateFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    if (this._texture) {\n      this._texture = null;\n    }\n  }\n\n  /**\n   * Update positions and bounds.\n   */\n  private _updatePositionsAndBounds(): void {\n    const { _texture: texture, _bounds: bounds } = this;\n    if (texture) {\n      const { _atlasRegion: atlasRegion, _pivot: pivot, _atlasRegionOffset: atlasRegionOffset } = this;\n      const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n      const pPUReciprocal = 1.0 / this._pixelsPerUnit;\n      // Coordinates of the four boundaries.\n      let lx: number, ty: number, rx: number, by: number;\n      // TextureSize\n      let textureW: number, textureH: number;\n      if (this._atlasRotated) {\n        textureW = texture.height * atlasRegion.height * pPUReciprocal;\n        textureH = texture.width * atlasRegion.width * pPUReciprocal;\n      } else {\n        textureW = texture.width * atlasRegion.width * pPUReciprocal;\n        textureH = texture.height * atlasRegion.height * pPUReciprocal;\n      }\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        // Real rendering size.\n        const realRenderW = textureW * regionW;\n        const realRenderH = textureH * regionH;\n        lx = -pivot.x * realRenderW;\n        by = -pivot.y * realRenderH;\n        rx = realRenderW + lx;\n        ty = realRenderH + by;\n      } else {\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        const oriWidth = textureW / (1 - blankRight - blankLeft);\n        const oriHeight = textureH / (1 - blankBottom - blankTop);\n        // The size of the real rendering.\n        lx = (-pivot.x * regionW + Math.max(blankLeft, regionX) - regionX) * oriWidth;\n        ty = (pivot.y * regionH - Math.max(blankTop, regionY) + regionY) * oriHeight;\n        rx = (-pivot.x * regionW + Math.min(1 - blankRight, regionX + regionW) - regionX) * oriWidth;\n        by = (pivot.y * regionH - Math.min(1 - blankBottom, regionY + regionH) + regionY) * oriHeight;\n      }\n\n      // Assign values ​​to _positions\n      const positions = this._positions;\n      // Top-left.\n      positions[0].setValue(lx, ty);\n      // Top-right.\n      positions[1].setValue(rx, ty);\n      // Bottom-right.\n      positions[2].setValue(rx, by);\n      // Bottom-left.\n      positions[3].setValue(lx, by);\n\n      // Update bounds.\n      bounds.min.setValue(lx, by, 0);\n      bounds.max.setValue(rx, ty, 0);\n    } else {\n      // Update bounds.\n      bounds.min.setValue(0, 0, 0);\n      bounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateMesh(): void {\n    if (this._isContainDirtyFlag(DirtyFlag.positions)) {\n      this._updatePositionsAndBounds();\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.uv)) {\n      const { _atlasRegion, _uv: uv, _region: region, _atlasRotated, _atlasRegionOffset: atlasRegionOffset } = this;\n      let left: number, top: number, right: number, bottom: number;\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        const { width: atlasRegionW, height: atlasRegionH } = _atlasRegion;\n        if (_atlasRotated) {\n          left = atlasRegionW * (1 - region.y - region.height) + _atlasRegion.x;\n          top = atlasRegionH * region.x + _atlasRegion.y;\n          right = atlasRegionW * region.height + left;\n          bottom = atlasRegionH * region.width + top;\n        } else {\n          left = atlasRegionW * region.x + _atlasRegion.x;\n          top = atlasRegionH * region.y + _atlasRegion.y;\n          right = atlasRegionW * region.width + left;\n          bottom = atlasRegionH * region.height + top;\n        }\n      } else {\n        const { x: regionX, y: regionY } = region;\n        const { x: atlasRegionX, y: atlasRegionY } = _atlasRegion;\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        // Proportion of the original sprite size in the atlas.\n        if (_atlasRotated) {\n          const textureW = _atlasRegion.width / (1 - blankBottom - blankTop);\n          const textureH = _atlasRegion.height / (1 - blankRight - blankLeft);\n          left = (Math.max(blankBottom, 1 - regionY - region.height) - blankBottom) * textureW + atlasRegionX;\n          top = (Math.max(blankLeft, regionX) - blankLeft) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankTop, 1 - regionY) - blankBottom) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureH + atlasRegionY;\n        } else {\n          const textureW = _atlasRegion.width / (1 - blankRight - blankLeft);\n          const textureH = _atlasRegion.height / (1 - blankBottom - blankTop);\n          left = (Math.max(blankLeft, regionX) - blankLeft) * textureW + atlasRegionX;\n          top = (Math.max(blankTop, regionY) - blankTop) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankBottom, regionY + region.height) - blankTop) * textureH + atlasRegionY;\n        }\n      }\n\n      if (_atlasRotated) {\n        // If it is rotated, we need to rotate the UV 90 degrees counterclockwise to correct it.\n        // Top-right.\n        uv[0].setValue(right, top);\n        // Bottom-right.\n        uv[1].setValue(right, bottom);\n        // Bottom-left.\n        uv[2].setValue(left, bottom);\n        // Top-left.\n        uv[3].setValue(left, top);\n      } else {\n        // Top-left.\n        uv[0].setValue(left, top);\n        // Top-right.\n        uv[1].setValue(right, top);\n        // Bottom-right.\n        uv[2].setValue(right, bottom);\n        // Bottom-left.\n        uv[3].setValue(left, bottom);\n      }\n    }\n\n    this._setDirtyFlagFalse(DirtyFlag.all);\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n}\n\nenum DirtyFlag {\n  positions = 0x1,\n  uv = 0x2,\n  all = 0x3\n}\n","import { BoundingBox, Color, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer implements ICustomClone {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _customLocalBounds: BoundingBox = null;\n  /** @internal temp solution. */\n  @ignoreClone\n  _customRootEntity: Entity = null;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @ignoreClone\n  private _sprite: Sprite = null;\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n  @assignmentClone\n  private _cacheFlipX: boolean = false;\n  @assignmentClone\n  private _cacheFlipY: boolean = false;\n  @ignoreClone\n  private _dirtyFlag: number = 0;\n  @ignoreClone\n  private _isWorldMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _spriteDirty: UpdateFlag;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    if (this._sprite !== value) {\n      this._spriteDirty && this._spriteDirty.destroy();\n      this._sprite = value;\n      if (value) {\n        this._spriteDirty = value._registerUpdateFlag();\n      }\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      value.cloneTo(this._color);\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._setDirtyFlagTrue(DirtyFlag.MaskInteraction);\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._isWorldMatrixDirty = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteDefaultMaterial);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const { sprite } = this;\n    if (!sprite) {\n      return;\n    }\n    const { texture } = sprite;\n    if (!texture) {\n      return;\n    }\n\n    const { _positions } = this;\n    const { transform } = this.entity;\n\n    // Update sprite data.\n    sprite._updateMesh();\n\n    if (this._isWorldMatrixDirty.flag || this._spriteDirty.flag) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteRenderer._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n      const { flipX, flipY } = this;\n\n      for (let i = 0, n = _positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(flipX ? -curVertexPos.x : curVertexPos.x, flipY ? -curVertexPos.y : curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, _positions[i]);\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._isWorldMatrixDirty.flag = false;\n      this._spriteDirty.flag = false;\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    } else if (this._isContainDirtyFlag(DirtyFlag.Flip)) {\n      const { flipX, flipY } = this;\n      const flipXChange = this._cacheFlipX !== flipX;\n      const flipYChange = this._cacheFlipY !== flipY;\n\n      if (flipXChange || flipYChange) {\n        const { x, y } = transform.worldPosition;\n\n        for (let i = 0, n = _positions.length; i < n; i++) {\n          const curPos = _positions[i];\n\n          if (flipXChange) {\n            curPos.x = x * 2 - curPos.x;\n          }\n          if (flipYChange) {\n            curPos.y = y * 2 - curPos.y;\n          }\n        }\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.MaskInteraction)) {\n      this._updateStencilState();\n      this._setDirtyFlagFalse(DirtyFlag.MaskInteraction);\n    }\n\n    this.shaderData.setTexture(SpriteRenderer._textureProperty, texture);\n    const material = this.getMaterial();\n\n    const spriteElementPool = this._engine._spriteElementPool;\n    const spriteElement = spriteElementPool.getFromPool();\n    spriteElement.setValue(this, _positions, sprite._uv, sprite._triangles, this.color, material, camera);\n    camera._renderPipeline.pushPrimitive(spriteElement);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this._isWorldMatrixDirty.destroy();\n    this._spriteDirty && this._spriteDirty.destroy();\n    super._onDestroy();\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteRenderer): void {\n    target.sprite = this._sprite;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      if (this._customLocalBounds && this._customRootEntity) {\n        const worldMatrix = this._customRootEntity.transform.worldMatrix;\n        BoundingBox.transform(this._customLocalBounds, worldMatrix, worldBounds);\n      } else {\n        const localBounds = sprite.bounds;\n        const worldMatrix = this._entity.transform.worldMatrix;\n        BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n      }\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n}\n\nenum DirtyFlag {\n  Flip = 0x1,\n  MaskInteraction = 0x2\n}\n","import { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Entity } from \"../Entity\";\nimport { Component } from \"../Component\";\nimport { AnimationCurve } from \"./AnimationCurve\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /** Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to. */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The name or path to the property being animated. */\n  property: AnimationProperty;\n  /** The animation curve. */\n  curve: AnimationCurve;\n}\n","/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n","export enum AnimationProperty {\n  Position,\n  Rotation,\n  Scale,\n  BlendShapeWeights\n}\n","/**\n * Base class for AnimationClips and BlendTrees.\n */\nexport class Motion {}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Motion } from \"./Motion\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip extends Motion {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor (public readonly name: string) {\n    super();\n  }\n\n  /**\n   * Adds an animation event to the clip.\n   * @param functionName - The name of the method called in the script\n   * @param time - The time when the event be triggered\n   * @param parameter - The parameter that is stored in the event and will be sent to the function\n   */\n  addEvent(functionName: string, time: number, parameter: Object): void;\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void;\n\n\n  addEvent(param: AnimationEvent | string, time?: number, parameter?: Object): void {\n    if (typeof param === 'string') {\n      const event = new AnimationEvent();\n      event.functionName = param;\n      event.time = time;\n      event.parameter = parameter;\n      this._events.push(event);\n    } else {\n      this._events.push(param);\n    }\n    this._events.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param type- The class type of the component that is animated\n   * @param propertyName - The name to the property being animated\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    relativePath: string,\n    type: new (entity: Entity) => T,\n    propertyName: string,\n    curve: AnimationCurve\n  ): void {\n    let property: AnimationProperty;\n    switch (propertyName) {\n      case \"position\":\n        property = AnimationProperty.Position;\n        break;\n      case \"rotation\":\n        property = AnimationProperty.Rotation;\n        break;\n      case \"scale\":\n        property = AnimationProperty.Scale;\n        break;\n      case \"blendShapeWeights\":\n        property = AnimationProperty.BlendShapeWeights;\n        break;\n      default:\n    }\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = relativePath;\n    curveBinding.type = type;\n    curveBinding.property = property;\n    curveBinding.curve = curve;\n    if (curve.length > this._length) {\n      this._length = curve.length;\n    }\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { length } = this._curveBindings;\n    for (let i = length - 1; i >= 0; i--) {\n      const curveData = this._curveBindings[i];\n      const { curve, property, relativePath, type } = curveData;\n      const val = curve.evaluate(time);\n      const target = entity.findByName(relativePath);\n      const transform = (<Entity>target).transform;\n      if (type === Transform) {\n        switch (property) {\n          case AnimationProperty.Position:\n            transform.position = val as Vector3;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = val as Quaternion;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = val as Vector3;\n            break;\n        }\n      }\n    }\n  }\n}\n","import { Vector3, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * @internal\n */\nexport class AnimatorUtils {\n  private static _tempVector30: Vector3 = new Vector3();\n  private static _tempVector31: Vector3 = new Vector3();\n\n  static scaleWeight(s: Vector3, w: number, out: Vector3): void {\n    const sX = s.x;\n    const sY = s.y;\n    const sZ = s.z;\n    out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\n    out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\n    out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\n  }\n\n  static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\n    const saw = AnimatorUtils._tempVector30;\n    const sbw = AnimatorUtils._tempVector31;\n    AnimatorUtils.scaleWeight(sa, 1.0 - w, saw);\n    AnimatorUtils.scaleWeight(sb, w, sbw);\n    const sng = w > 0.5 ? sb : sa;\n    out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\n    out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\n    out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\n  }\n\n  static quaternionWeight(s: Quaternion, w: number, out: Quaternion) {\n    out.x = s.x * w;\n    out.y = s.y * w;\n    out.z = s.z * w;\n    out.w = s.w;\n  }\n}\n","export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n","/**\n * @internal\n */\nexport enum AnimatorStatePlayState {\n  UnStarted,\n  Playing,\n  Finished\n}\n","/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby,//CM: Standby 优化\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../../Component\";\nimport { Entity } from \"../../Entity\";\nimport { SkinnedMeshRenderer } from \"../../mesh/SkinnedMeshRenderer\";\nimport { AnimationProperty } from \"../enums/AnimationProperty\";\nimport { InterpolableValue } from \"../KeyFrame\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner {\n  crossCurveMark: number = 0;\n  crossCurveIndex: number;\n\n  readonly target: Entity;\n  readonly type: new (entity: Entity) => Component;\n  readonly property: AnimationProperty;\n  readonly component: Component;\n  readonly defaultValue: InterpolableValue;\n  readonly fixedPoseValue: InterpolableValue;\n  \n  /** @internal */\n  _hasSavedDefaultValue: boolean = false;\n\n  constructor(target: Entity, type: new (entity: Entity) => Component, property: AnimationProperty) {\n    this.target = target;\n    this.type = type;\n    this.property = property;\n    switch (property) {\n      case AnimationProperty.Position:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Rotation:\n        this.defaultValue = new Quaternion();\n        this.fixedPoseValue = new Quaternion();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Scale:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        this.defaultValue = new Float32Array(4);\n        this.fixedPoseValue = new Float32Array(4);\n        this.component = target.getComponent(SkinnedMeshRenderer);\n        break;\n    }\n  }\n\n  saveDefaultValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.defaultValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.defaultValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.defaultValue);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.defaultValue[i] = (<SkinnedMeshRenderer>this.component).blendShapeWeights[i];\n        }\n        break;\n    }\n    this._hasSavedDefaultValue = true;\n  }\n\n  saveFixedPoseValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.fixedPoseValue[i] = (<SkinnedMeshRenderer>this.component).blendShapeWeights[i];\n        }\n        break;\n    }\n  }\n}\n","import { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n}\n","import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. This is represented in normalized time. */\n  duration: number = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset: number = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime: number = 1;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n}\n","/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n","import { AnimatorState } from \"../AnimatorState\";\nimport { AnimatorStatePlayState } from \"../enums/AnimatorStatePlayState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  frameTime: number;\n  playState: AnimatorStatePlayState;\n  clipTime: number;\n  currentEventIndex: number;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.frameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.playState = AnimatorStatePlayState.UnStarted;\n    this.clipTime = state.clipStartTime * state.clip.length;\n    this.currentEventIndex = 0;\n  }\n\n  update(): void {\n    const state = this.state;\n    let time = this.frameTime;\n    const duration = state._getDuration();\n    this.playState = AnimatorStatePlayState.Playing;\n    if (time > duration) {\n      if (state.wrapMode === WrapMode.Loop) {\n        time = time % duration;\n      } else {\n        time = duration;\n        this.playState = AnimatorStatePlayState.Finished;\n      }\n    }\n    this.clipTime = time + state.clipStartTime * state.clip.length;\n  }\n}\n","import { AnimatorStateTransition } from \"../AnimatorTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n}\n","import { StateMachineScript } from '../StateMachineScript';\nimport { AnimationEventHandler } from \"./AnimationEventHandler\";\nimport { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveOwners: AnimationCurveOwner[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n","import { AnimatorState } from \"../AnimatorState\";\n\n/**\n * @internal\n */\nexport class AnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n","import { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n/**\n * @internal\n */\nexport class CrossCurveData {\n  curveOwner: AnimationCurveOwner;\n  srcCurveIndex: number;\n  destCurveIndex: number;\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh\";\nimport { ClassPool } from \"../RenderPipeline/ClassPool\";\nimport { Transform } from \"../Transform\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { AnimatorUtils } from \"./AnimatorUtils\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorStatePlayState } from \"./enums/AnimatorStatePlayState\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveOwner } from \"./internal/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStateInfo } from \"./internal/AnimatorStateInfo\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { CrossCurveData } from \"./internal/CrossCurveData\";\nimport { InterpolableValue, UnionInterpolableKeyframe } from \"./KeyFrame\";\n\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  private static _tempVector3: Vector3 = new Vector3();\n  private static _tempQuaternion: Quaternion = new Quaternion();\n  private static _animatorInfo: AnimatorStateInfo = new AnimatorStateInfo();\n\n  protected _animatorController: AnimatorController;\n  @assignmentClone\n  protected _speed: number = 1.0;\n  @ignoreClone\n  protected _controllerUpdateFlag: UpdateFlag;\n\n  @ignoreClone\n  private _animatorLayersData: AnimatorLayerData[] = [];\n  @ignoreClone\n  private _crossCurveDataCollection: CrossCurveData[] = [];\n  @ignoreClone\n  private _animationCurveOwners: AnimationCurveOwner[][] = [];\n  @ignoreClone\n  private _crossCurveDataPool: ClassPool<CrossCurveData> = new ClassPool(CrossCurveData);\n  @ignoreClone\n  private _animationEventHandlerPool: ClassPool<AnimationEventHandler> = new ClassPool(AnimationEventHandler);\n\n  /**\n   * The playback speed of the Animator, 1.0 is normal playback speed.\n   */\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(value: number) {\n    this._speed = value;\n  }\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const animatorInfo = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { state } = animatorInfo;\n\n    if (!state) {\n      return;\n    }\n    if (!state.clip) {\n      console.warn(`The state named ${stateName} has no AnimationClip data.`);\n      return;\n    }\n    const animatorLayerData = this._getAnimatorLayerData(animatorInfo.layerIndex);\n    const { srcPlayData } = animatorLayerData;\n    const { state: curState } = srcPlayData;\n    if (curState && curState !== state) {\n      this._revertDefaultValue(srcPlayData.state, srcPlayData.stateData);\n    }\n\n    //CM: Not consider same stateName, but different animation\n    const animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);\n\n    this._saveDefaultValues(animatorStateData);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      for (let i = 0, n = layers.length; i < n; ++i) {\n        const { states } = layers[i].stateMachine;\n        const animatorLayerData = this._getAnimatorLayerData(i);\n        for (let j = 0, m = states.length; j < m; ++j) {\n          const state = states[j];\n          const animatorStateData = this._getAnimatorStateData(state.name, state, animatorLayerData);\n          this._revertDefaultValue(state, animatorStateData);\n        }\n      }\n    }\n    this._clearPlayData();\n  }\n\n  /**\n   * Create a cross fade from the current state to another state.\n   * @param stateName - The state name\n   * @param normalizedTransitionDuration - The duration of the transition (normalized)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  crossFade(\n    stateName: string,\n    normalizedTransitionDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const { state } = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { manuallyTransition } = this._getAnimatorLayerData(layerIndex);\n    manuallyTransition.duration = normalizedTransitionDuration;\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.destinationState = state;\n    this._crossFadeByTransition(manuallyTransition, layerIndex);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    if (this.speed === 0) {\n      return;\n    }\n\n    const { _animatorController: animatorController } = this;\n    if (!animatorController) {\n      return;\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      return;\n    }\n    deltaTime *= this.speed;\n    for (let i = 0, n = animatorController.layers.length; i < n; i++) {\n      const animatorLayerData = this._getAnimatorLayerData(i);\n      if (animatorLayerData.layerState === LayerState.Standby) {\n        continue;\n      }\n\n      this._updateLayer(i, i === 0, deltaTime / 1000);\n    }\n  }\n\n  /**\n   * Get the playing state from the target layerIndex.\n   * @param layerIndex - The layer index\n   */\n  getCurrentAnimatorState(layerIndex: number) {\n    return this._animatorLayersData[layerIndex]?.srcPlayData?.state;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number, out: AnimatorStateInfo): AnimatorStateInfo {\n    let state: AnimatorState = null;\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    out.layerIndex = layerIndex;\n    out.state = state;\n    return out;\n  }\n\n  private _saveDefaultValues(stateData: AnimatorStateData): void {\n    const { curveOwners } = stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      curveOwners[i].saveDefaultValue();\n    }\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData\n  ): AnimatorStateData {\n    const { animatorStateDataMap: animatorStateDataCollection } = animatorLayerData;\n    let animatorStateData = animatorStateDataCollection[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataCollection[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(animatorState: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const { entity, _animationCurveOwners: animationCureOwners } = this;\n    const { curveOwners } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      const { property } = curve;\n      const { instanceId } = targetEntity;\n      const propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = []);\n      curveOwners[i] =\n        propertyOwners[property] ||\n        (propertyOwners[property] = new AnimationCurveOwner(targetEntity, curve.type, property));\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = this._entity._scripts;\n    const scriptCount = scripts.length;\n    const { eventHandlers } = animatorStateData;\n    const { events } = state.clip;\n\n    eventHandlerPool.resetPool();\n    eventHandlers.length = 0;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      const eventHandler = eventHandlerPool.getFromPool();\n      const funcName = event.functionName;\n      const { handlers } = eventHandler;\n\n      eventHandler.event = event;\n      handlers.length = 0;\n      for (let j = scriptCount - 1; j >= 0; j--) {\n        const handler = <Function>scripts.get(j)[funcName];\n        handler && handlers.push(handler);\n      }\n      eventHandlers.push(eventHandler);\n    }\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    this._crossCurveDataCollection.length = 0;\n    this._crossCurveDataPool.resetPool();\n  }\n\n  private _addCrossCurveData(\n    crossCurveData: CrossCurveData[],\n    owner: AnimationCurveOwner,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    const dataItem = this._crossCurveDataPool.getFromPool();\n    dataItem.curveOwner = owner;\n    dataItem.srcCurveIndex = curCurveIndex;\n    dataItem.destCurveIndex = nextCurveIndex;\n    crossCurveData.push(dataItem);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { crossCurveMark } = animatorLayerData;\n\n    // Add src cross curve data.\n    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { srcPlayData, crossCurveMark } = animatorLayerData;\n\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData is null.\n    srcPlayData && this._prepareSrcCrossData(crossCurveData, srcPlayData, crossCurveMark, true);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n\n    // Save current cross curve data owner fixed pose.\n    for (let i = crossCurveData.length - 1; i >= 0; i--) {\n      const item = crossCurveData[i];\n      item.curveOwner.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again.\n      item.destCurveIndex = -1;\n    }\n    // prepare dest AnimatorState cross data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, animatorLayerData.crossCurveMark, true);\n  }\n\n  private _prepareSrcCrossData(\n    crossCurveData: CrossCurveData[],\n    srcPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = srcPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      owner.crossCurveMark = crossCurveMark;\n      owner.crossCurveIndex = crossCurveData.length;\n      saveFixed && owner.saveFixedPoseValue();\n      this._addCrossCurveData(crossCurveData, owner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(\n    crossCurveData: CrossCurveData[],\n    destPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = destPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      // Not include in previous AnimatorState.\n      if (owner.crossCurveMark === crossCurveMark) {\n        crossCurveData[owner.crossCurveIndex].destCurveIndex = i;\n      } else {\n        owner.saveDefaultValue();\n        saveFixed && owner.saveFixedPoseValue();\n        owner.crossCurveMark = crossCurveMark;\n        owner.crossCurveIndex = crossCurveData.length;\n        this._addCrossCurveData(crossCurveData, owner, -1, i);\n      }\n    }\n  }\n\n  private _evaluateCurve(\n    property: AnimationProperty,\n    curve: AnimationCurve,\n    time: number,\n    additive: boolean\n  ): InterpolableValue {\n    const value = curve.evaluate(time);\n\n    if (additive) {\n      const baseValue = (<UnionInterpolableKeyframe>curve.keys[0]).value;\n      switch (property) {\n        case AnimationProperty.Position:\n          const pos = Animator._tempVector3;\n          Vector3.subtract(<Vector3>value, <Vector3>baseValue, pos);\n          return pos;\n        case AnimationProperty.Rotation:\n          const rot = Animator._tempQuaternion;\n          Quaternion.conjugate(<Quaternion>baseValue, rot);\n          Quaternion.multiply(rot, <Quaternion>value, <Quaternion>rot);\n          return rot;\n        case AnimationProperty.Scale:\n          const scale = Animator._tempVector3;\n          Vector3.divide(<Vector3>value, <Vector3>baseValue, <Vector3>scale);\n          return scale;\n      }\n    }\n    return value;\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());\n    return animatorLayerData;\n  }\n\n  private _updateLayer(layerIndex: number, firstLayer: boolean, deltaTime: number): void {\n    const { blendingMode, weight } = this._animatorController.layers[layerIndex];\n    const animLayerData = this._animatorLayersData[layerIndex];\n    const { srcPlayData, destPlayData, crossFadeTransition: crossFadeTransitionInfo } = animLayerData;\n    const layerAdditive = blendingMode === AnimatorLayerBlendingMode.Additive;\n    const layerWeight = firstLayer ? 1.0 : weight;\n    this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);\n    switch (animLayerData.layerState) {\n      case LayerState.Playing:\n        this._updatePlayingState(srcPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPose(destPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFade(\n          srcPlayData,\n          destPlayData,\n          animLayerData,\n          layerIndex,\n          layerWeight,\n          deltaTime,\n          layerAdditive\n        );\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    playData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ): void {\n    const { curveOwners, eventHandlers } = playData.stateData;\n    const { state, playState: lastPlayState, clipTime: lastClipTime } = playData;\n    const { _curveBindings: curves } = state.clip;\n\n    playData.update();\n\n    const { clipTime, playState } = playData;\n\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      const value = this._evaluateCurve(owner.property, curves[i].curve, clipTime, additive);\n      if (additive) {\n        this._applyClipValueAdditive(owner, value, weight);\n      } else {\n        this._applyClipValue(owner, value, weight);\n      }\n    }\n    playData.frameTime += state.speed * delta;\n\n    if (playState === AnimatorStatePlayState.Finished) {\n      layerData.layerState = LayerState.Standby;\n    }\n  }\n\n  private _updateCrossFade(\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const { _crossCurveDataCollection: crossCurveDataCollection } = this;\n    const { _curveBindings: srcCurves } = srcPlayData.state.clip;\n    const { state: srcState, stateData: srcStateData, playState: lastSrcPlayState } = srcPlayData;\n    const { eventHandlers: srcEventHandler } = srcStateData;\n    const { state: destState, stateData: destStateData, playState: lastDstPlayState } = destPlayData;\n    const { eventHandlers: destEventHandler } = destStateData;\n    const { _curveBindings: destCurves } = destState.clip;\n    const { clipTime: lastSrcClipTime } = srcPlayData;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight = destPlayData.frameTime / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    srcPlayData.update();\n    destPlayData.update();\n\n    const { playState: srcPlayState } = srcPlayData;\n    const { playState: destPlayState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, false);\n\n    const { clipTime: srcClipTime } = srcPlayData;\n    const { clipTime: destClipTime } = destPlayData;\n\n    srcEventHandler.length && this._fireAnimationEvents(srcPlayData, srcEventHandler, lastSrcClipTime, srcClipTime);\n    destEventHandler.length &&\n      this._fireAnimationEvents(destPlayData, destEventHandler, lastDestClipTime, destClipTime);\n\n    if (lastSrcPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(srcState, layerIndex);\n    }\n    if (crossWeight === 1 || srcPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(srcState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(srcState, layerIndex);\n    }\n\n    if (lastDstPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(destState, layerIndex);\n    }\n    if (destPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(destState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(destState, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, srcCurveIndex, destCurveIndex } = crossCurveDataCollection[i];\n      const { property, defaultValue } = curveOwner;\n\n      const srcValue =\n        srcCurveIndex >= 0\n          ? this._evaluateCurve(property, srcCurves[srcCurveIndex].curve, srcClipTime, additive)\n          : defaultValue;\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(property, destCurves[destCurveIndex].curve, destClipTime, additive)\n          : defaultValue;\n\n      this._applyCrossClipValue(curveOwner, srcValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeFromPose(\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const crossCurveDataCollection = this._crossCurveDataCollection;\n    const { state, stateData, playState: lastPlayState } = destPlayData;\n    const { eventHandlers } = stateData;\n    const { _curveBindings: curves } = state.clip;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight = destPlayData.frameTime / (state._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    destPlayData.update();\n\n    const { playState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, true);\n\n    const { clipTime: destClipTime } = destPlayData;\n\n    eventHandlers.length && this._fireAnimationEvents(destPlayData, eventHandlers, lastDestClipTime, destClipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, destCurveIndex } = crossCurveDataCollection[i];\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(curveOwner.property, curves[destCurveIndex].curve, destClipTime, additive)\n          : curveOwner.defaultValue;\n\n      this._applyCrossClipValue(curveOwner, curveOwner.fixedPoseValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData, crossWeight: number, delta: number, fixed: boolean): void {\n    const { destPlayData } = layerData;\n    destPlayData.frameTime += destPlayData.state.speed * delta;\n    if (crossWeight === 1.0) {\n      if (destPlayData.playState === AnimatorStatePlayState.Finished) {\n        layerData.layerState = LayerState.Standby;\n      } else {\n        layerData.layerState = LayerState.Playing;\n      }\n      layerData.switchPlayData();\n    } else {\n      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);\n    }\n  }\n\n  private _applyCrossClipValue(\n    owner: AnimationCurveOwner,\n    srcValue: InterpolableValue,\n    destValue: InterpolableValue,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    let value: InterpolableValue;\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          value = Animator._tempVector3;\n          break;\n        case AnimationProperty.Rotation:\n          Quaternion.slerp(srcValue as Quaternion, destValue as Quaternion, crossWeight, Animator._tempQuaternion);\n          value = Animator._tempQuaternion;\n          break;\n        case AnimationProperty.Scale: {\n          const scale = transform.scale;\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          transform.scale = scale;\n          value = Animator._tempVector3;\n          break;\n        }\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          break;\n      }\n    }\n\n    if (additive) {\n      this._applyClipValueAdditive(owner, value, layerWeight);\n    } else {\n      this._applyClipValue(owner, value, layerWeight);\n    }\n  }\n\n  private _applyClipValue(owner: AnimationCurveOwner, value: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          if (weight === 1.0) {\n            transform.position = <Vector3>value;\n          } else {\n            const position = transform.position;\n            Vector3.lerp(position, <Vector3>value, weight, position);\n            transform.position = position;\n          }\n          break;\n        case AnimationProperty.Rotation:\n          if (weight === 1.0) {\n            transform.rotationQuaternion = <Quaternion>value;\n          } else {\n            const rotationQuaternion = transform.rotationQuaternion;\n            Quaternion.slerp(rotationQuaternion, <Quaternion>value, weight, rotationQuaternion);\n            transform.rotationQuaternion = rotationQuaternion;\n          }\n          break;\n        case AnimationProperty.Scale:\n          if (weight === 1.0) {\n            transform.scale = <Vector3>value;\n          } else {\n            const scale = transform.scale;\n            Vector3.lerp(scale, <Vector3>value, weight, scale);\n            transform.scale = scale;\n          }\n          break;\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          break;\n      }\n    }\n  }\n\n  private _applyClipValueAdditive(owner: AnimationCurveOwner, additiveValue: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = (<Entity>owner.target).transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          const position = transform.position;\n          position.x += (<Vector3>additiveValue).x * weight;\n          position.y += (<Vector3>additiveValue).y * weight;\n          position.z += (<Vector3>additiveValue).z * weight;\n          transform.position = position;\n          break;\n        case AnimationProperty.Rotation:\n          const rotationQuaternion = transform.rotationQuaternion;\n          AnimatorUtils.quaternionWeight(<Quaternion>additiveValue, weight, <Quaternion>additiveValue);\n          (<Quaternion>additiveValue).normalize();\n          rotationQuaternion.multiply(<Quaternion>additiveValue);\n          transform.rotationQuaternion = rotationQuaternion;\n          break;\n        case AnimationProperty.Scale:\n          const scale = transform.scale;\n          AnimatorUtils.scaleWeight(scale, weight, scale);\n          Vector3.multiply(scale, <Vector3>additiveValue, scale);\n          transform.scale = scale;\n          break;\n      }\n    }\n  }\n\n  private _revertDefaultValue(state: AnimatorState, stateData: AnimatorStateData) {\n    const { clip } = state;\n    if (clip) {\n      const curves = clip._curveBindings;\n      const { curveOwners } = stateData;\n      for (let i = curves.length - 1; i >= 0; i--) {\n        const owner = curveOwners[i];\n        const { transform } = owner.target;\n        if (!owner._hasSavedDefaultValue) continue;\n        switch (owner.property) {\n          case AnimationProperty.Position:\n            transform.position = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = <Quaternion>owner.defaultValue;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.BlendShapeWeights:\n            const { blendShapeWeights } = <SkinnedMeshRenderer>owner.component;\n            for (let j = 0, length = blendShapeWeights.length; j < length; ++j) {\n              (<SkinnedMeshRenderer>owner.component).blendShapeWeights[j] = owner.defaultValue[j];\n            }\n            break;\n        }\n      }\n    }\n  }\n\n  private _checkTransition(\n    stateData: AnimatorStatePlayData,\n    crossFadeTransition: AnimatorStateTransition,\n    layerIndex: number\n  ) {\n    const { state, clipTime } = stateData;\n    const duration = state._getDuration();\n    const { transitions } = state;\n    for (let i = 0, n = transitions.length; i < n; ++i) {\n      const transition = transitions[i];\n      if (duration * transition.exitTime <= clipTime) {\n        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);\n      }\n    }\n  }\n\n  private _crossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number): void {\n    const { name } = transition.destinationState;\n    const animatorStateInfo = this._getAnimatorStateInfo(name, layerIndex, Animator._animatorInfo);\n    const { state: crossState } = animatorStateInfo;\n    if (!crossState) {\n      return;\n    }\n    if (!crossState.clip) {\n      console.warn(`The state named ${name} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(animatorStateInfo.layerIndex);\n    const layerState = animatorLayerData.layerState;\n    const { destPlayData } = animatorLayerData;\n\n    const animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);\n    const duration = crossState._getDuration();\n    const offset = duration * transition.offset;\n    destPlayData.reset(crossState, animatorStateData, offset);\n\n    switch (layerState) {\n      // Maybe not play, maybe end.\n      case LayerState.Standby:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n  }\n\n  private _fireAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    clipTime: number\n  ): void {\n    const { state } = playState;\n    const clipDuration = state.clip.length;\n    // TODO: If play backward, not work.\n    if (clipTime < lastClipTime) {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipEndTime * clipDuration);\n      playState.currentEventIndex = 0;\n      this._fireSubAnimationEvents(playState, eventHandlers, state.clipStartTime * clipDuration, clipTime);\n    } else {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    for (let i = playState.currentEventIndex, n = eventHandlers.length; i < n; i++) {\n      const eventHandler = eventHandlers[i];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = i + 1;\n      }\n    }\n  }\n\n  private _callAnimatorScriptOnEnter(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateEnterScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateEnter(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnUpdate(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateUpdateScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateUpdate(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnExit(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateExitScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateExit(this, state, layerIndex);\n    }\n  }\n\n  private _clearPlayData(): void {\n    this._animatorLayersData.length = 0;\n    this._crossCurveDataCollection.length = 0;\n    this._animationCurveOwners.length = 0;\n    if (this._controllerUpdateFlag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n}\n","import { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController {\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  private _layers: AnimatorControllerLayer[] = [];\n  private _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _distributeUpdateFlag(): void {\n    this._updateFlagManager.distribute();\n  }\n}\n","import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {}\n}\n","import { Animator } from \"../animation/Animator\";\nimport { AnimatorState } from \"../animation/AnimatorState\";\n\n/**\n * StateMachineScript is a component that can be added to a animator state. It's the base class every script on a state derives from.\n */\nexport class StateMachineScript {\n  /** @internal */\n  _destroyed: boolean = false;\n  /** @internal */\n  _state: AnimatorState;\n  /**\n   * onStateEnter is called when a transition starts and the state machine starts to evaluate this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateEnter(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateUpdate is called on each Update frame between onStateEnter and onStateExit callbacks.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateUpdate(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateExit is called when a transition ends and the state machine finishes evaluating this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateExit(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._state._removeStateMachineScript(this);\n    this._destroyed = true;\n  }\n}\n","import { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { WrapMode } from \"./enums/WrapMode\";\nimport { StateMachineScript } from \"./StateMachineScript\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  /** @internal */\n  _onStateEnterScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateUpdateScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateExitScripts: StateMachineScript[] = [];\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = 1;\n  private _clip: AnimationClip;\n  private _transitions: AnimatorStateTransition[] = [];\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitions;\n  }\n\n  /**\n   * The clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, 1);\n  }\n\n  /**\n   * The start time of the clip, the range is 0 to 1, default is 0.\n   */\n  get clipStartTime() {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = Math.max(time, 0);\n  }\n\n  /**\n   * The end time of the clip, the range is 0 to 1, default is 1.\n   */\n  get clipEndTime() {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    this._clipEndTime = Math.min(time, 1);\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): void {\n    this._transitions.push(transition);\n  }\n\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    const index = this._transitions.indexOf(transition);\n    index !== -1 && this._transitions.splice(index, 1);\n  }\n\n  /**\n   * Adds a state machine script class of type T to the AnimatorState.\n   * @param scriptType - The state machine script class of type T\n   */\n  addStateMachineScript<T extends StateMachineScript>(scriptType: new () => T): T {\n    const script = new scriptType();\n    script._state = this;\n\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      this._onStateEnterScripts.push(script);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      this._onStateUpdateScripts.push(script);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      this._onStateExitScripts.push(script);\n    }\n\n    return script;\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitions.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    if (this.clip) {\n      return (this._clipEndTime - this._clipStartTime) * this.clip.length;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeStateMachineScript(script: StateMachineScript): void {\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      const index = this._onStateEnterScripts.indexOf(script);\n      index !== -1 && this._onStateEnterScripts.splice(index, 1);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      const index = this._onStateUpdateScripts.indexOf(script);\n      index !== -1 && this._onStateUpdateScripts.splice(index, 1);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      const index = this._onStateExitScripts.indexOf(script);\n      index !== -1 && this._onStateExitScripts.splice(index, 1);\n    }\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /** @internal */\n  _statesMap: AnimatorStateMap = {};\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n}\n","export enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion\n}\n","/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n","import { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { InterpolableValueType } from \"./enums/InterpolableValueType\";\nimport { InterpolationType } from \"./enums/InterpolationType\";\nimport {\n  FloatArrayKeyframe,\n  FloatKeyframe,\n  InterpolableValue,\n  QuaternionKeyframe,\n  UnionInterpolableKeyframe,\n  Vector2Keyframe,\n  Vector3Keyframe\n} from \"./KeyFrame\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport class AnimationCurve {\n  /** All keys defined in the animation curve. */\n  keys: UnionInterpolableKeyframe[] = [];\n  /** The interpolationType of the animation curve. */\n  interpolation: InterpolationType;\n\n  /** @internal */\n  _valueSize: number;\n  /** @internal */\n  _valueType: InterpolableValueType;\n\n  private _currentValue: InterpolableValue;\n  private _length: number = 0;\n  private _currentIndex: number = 0;\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: UnionInterpolableKeyframe): void {\n    const { time } = key;\n    this.keys.push(key);\n    if (time > this._length) {\n      this._length = time;\n    }\n\n    if (!this._valueSize) {\n      //CM: It's not reasonable to write here.\n      if (typeof key.value == \"number\") {\n        this._valueSize = 1;\n        this._valueType = InterpolableValueType.Float;\n        this._currentValue = 0;\n      }\n      if (key.value instanceof Vector2) {\n        this._valueSize = 2;\n        this._valueType = InterpolableValueType.Vector2;\n        this._currentValue = new Vector2();\n      }\n      if (key.value instanceof Vector3) {\n        this._valueSize = 3;\n        this._valueType = InterpolableValueType.Vector3;\n        this._currentValue = new Vector3();\n      }\n      if (key.value instanceof Vector4) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Vector4;\n        this._currentValue = new Vector4();\n      }\n      if (key.value instanceof Quaternion) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Quaternion;\n        this._currentValue = new Quaternion();\n      }\n\n      if (key.value instanceof Float32Array) {\n        const size = key.value.length;\n        this._valueSize = size;\n        this._valueType = InterpolableValueType.FloatArray;\n        this._currentValue = new Float32Array(size);\n      }\n    }\n    this.keys.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): InterpolableValue {\n    const { keys, interpolation } = this;\n    const { length } = this.keys;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = this._currentIndex;\n\n    // Reset loop.\n    if (curIndex !== -1 && time < keys[curIndex].time) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    this._currentIndex = curIndex;\n    // Evaluate value.\n    let value: InterpolableValue;\n    if (curIndex === -1) {\n      value = (<UnionInterpolableKeyframe>keys[0]).value;\n    } else if (nextIndex === length) {\n      value = (<UnionInterpolableKeyframe>keys[curIndex]).value;\n    } else {\n      // Time between first frame and end frame.\n      const curFrameTime = keys[curIndex].time;\n      const duration = keys[nextIndex].time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n      const dur = duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._evaluateLinear(curIndex, nextIndex, t);\n          break;\n        case InterpolationType.Step:\n          value = this._evaluateStep(nextIndex);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._evaluateHermite(curIndex, nextIndex, t, dur);\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Removes the keyframe at index and inserts key.\n   * @param index - The index of the key to move\n   * @param key - The key to insert\n   */\n  moveKey(index: number, key: UnionInterpolableKeyframe): void {\n    this.keys[index] = key;\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n    const count = this.keys.length;\n    let newLength = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (keys[i].time > length) {\n        newLength = keys[i].time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  private _evaluateLinear(frameIndex: number, nextFrameIndex: number, t: number): InterpolableValue {\n    const { _valueType, keys } = this;\n    switch (_valueType) {\n      case InterpolableValueType.Float:\n        return (<FloatKeyframe>keys[frameIndex]).value * (1 - t) + (<FloatKeyframe>keys[nextFrameIndex]).value * t;\n      case InterpolableValueType.FloatArray:\n        const curValue = this._currentValue;\n        const value = (<FloatArrayKeyframe>keys[frameIndex]).value;\n        const nextValue = (<FloatArrayKeyframe>keys[nextFrameIndex]).value;\n        for (let i = 0, n = value.length; i < n; i++) {\n          curValue[i] = value[i] * (1 - t) + nextValue[i] * t;\n        }\n        return curValue;\n      case InterpolableValueType.Vector2:\n        Vector2.lerp(\n          (<Vector2Keyframe>keys[frameIndex]).value,\n          (<Vector2Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector2>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Vector3:\n        Vector3.lerp(\n          (<Vector3Keyframe>keys[frameIndex]).value,\n          (<Vector3Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector3>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Quaternion:\n        Quaternion.slerp(\n          (<QuaternionKeyframe>keys[frameIndex]).value,\n          (<QuaternionKeyframe>keys[nextFrameIndex]).value,\n          t,\n          <Quaternion>this._currentValue\n        );\n        return this._currentValue;\n    }\n  }\n\n  private _evaluateStep(nextFrameIndex: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    if (_valueSize === 1) {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    } else {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    }\n  }\n\n  private _evaluateHermite(frameIndex: number, nextFrameIndex: number, t: number, dur: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    const curKey = keys[frameIndex];\n    const nextKey = keys[nextFrameIndex];\n    switch (_valueSize) {\n      case 1: {\n        const t0 = (<FloatKeyframe>curKey).outTangent,\n          t1 = (<FloatKeyframe>nextKey).inTangent,\n          p0 = (<FloatKeyframe>curKey).value,\n          p1 = (<FloatKeyframe>nextKey).value;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          const t2 = t * t;\n          const t3 = t2 * t;\n          const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n          const b = t3 - 2.0 * t2 + t;\n          const c = t3 - t2;\n          const d = -2.0 * t3 + 3.0 * t2;\n          return a * p0 + b * t0 * dur + c * t1 * dur + d * p1;\n        } else {\n          return (<FloatKeyframe>curKey).value;\n        }\n      }\n      case 2: {\n        const p0 = (<Vector2Keyframe>curKey).value;\n        const tan0 = (<Vector2Keyframe>curKey).outTangent;\n        const p1 = (<Vector2Keyframe>nextKey).value;\n        const tan1 = (<Vector2Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector2>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector2>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1))\n          (<Vector2>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        else {\n          (<Vector2>this._currentValue).y = p0.y;\n        }\n        return this._currentValue;\n      }\n      case 3: {\n        const p0 = (<Vector3Keyframe>curKey).value;\n        const tan0 = (<Vector3Keyframe>curKey).outTangent;\n        const p1 = (<Vector3Keyframe>nextKey).value;\n        const tan1 = (<Vector3Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector3>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Vector3>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Vector3>this._currentValue).z = p0.z;\n        }\n        return <Vector3>this._currentValue;\n      }\n      case 4: {\n        const p0 = (<QuaternionKeyframe>curKey).value;\n        const tan0 = (<QuaternionKeyframe>curKey).outTangent;\n        const p1 = (<QuaternionKeyframe>nextKey).value;\n        const tan1 = (<QuaternionKeyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Quaternion>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Quaternion>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Quaternion>this._currentValue).z = p0.z;\n        }\n\n        (t0 = tan0.w), (t1 = tan1.w);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n        } else {\n          (<Quaternion>this._currentValue).w = p0.w;\n        }\n        return <Quaternion>this._currentValue;\n      }\n    }\n  }\n}\n","import { Vector2, Vector3, Vector4, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<V> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n}\n\n/**\n * InterpolableKeyframe.\n * @typeParam T - Type of Tangent value\n * @typeParam V - Type of Keyframe value\n */\nexport class InterpolableKeyframe<T, V> extends Keyframe<V> {\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\nexport type ObjectKeyframe = Keyframe<Object>;\nexport type FloatKeyframe = InterpolableKeyframe<number, number>;\nexport type FloatArrayKeyframe = InterpolableKeyframe<Float32Array, Float32Array>;\nexport type Vector2Keyframe = InterpolableKeyframe<Vector2, Vector2>;\nexport type Vector3Keyframe = InterpolableKeyframe<Vector3, Vector3>;\nexport type Vector4Keyframe = InterpolableKeyframe<Vector4, Vector4>;\nexport type QuaternionKeyframe = InterpolableKeyframe<Vector4, Quaternion>;\n\nexport type UnionInterpolableKeyframe =\n  | FloatKeyframe\n  | FloatArrayKeyframe\n  | Vector2Keyframe\n  | Vector3Keyframe\n  | Vector4Keyframe\n  | QuaternionKeyframe;\n\nexport type InterpolableValue = number | Vector2 | Vector3 | Vector4 | Quaternion | Float32Array | Object;\n","export enum AnimatorConditionMode {\n  If,\n  IfNot,\n  Greater,\n  Less,\n  Equals,\n  NotEquals\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCubeMap } from \"../texture\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  private _decodeParam: Vector4 = new Vector4(0, 5, 0, 0);\n\n  /**\n   * Whether to decode from texture with RGBM format.\n   */\n  get textureDecodeRGBM(): boolean {\n    return Boolean(this._decodeParam.x);\n  }\n\n  set textureDecodeRGBM(value: boolean) {\n    this._decodeParam.x = Number(value);\n  }\n\n  /**\n   * RGBM decode factor, default 5.0.\n   */\n  get RGBMDecodeFactor(): number {\n    return this._decodeParam.y;\n  }\n\n  set RGBMDecodeFactor(value: number) {\n    this._decodeParam.y = value;\n  }\n\n  /**\n   * Texture cube map of the sky box material.\n   */\n  get textureCubeMap(): TextureCubeMap {\n    return this.shaderData.getTexture(\"u_cube\") as TextureCubeMap;\n  }\n\n  set textureCubeMap(v: TextureCubeMap) {\n    this.shaderData.setTexture(\"u_cube\", v);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.shaderData.setVector4(\"u_cubeDecodeParam\", this._decodeParam);\n  }\n}\n","import { MathUtil, Vector3, Color } from \"@oasis-engine/math\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Alpha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends MeshRenderer {\n  /** The max number of indices that Uint16Array can support. */\n  private static _uint16VertexLimit: number = 65535;\n\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _onceTime: number = 0;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.getMaterial().shaderData.getTexture(\"u_texture\");\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro(\"particleTexture\");\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    } else {\n      this.shaderData.disableMacro(\"particleTexture\");\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._color = value;\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.mesh = this._createMesh();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n    this.shaderData.setFloat(\"u_time\", 0);\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.getMaterial().renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    } else if (value === ParticleRendererBlendMode.Additive) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.One;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.setMaterial(this._createMaterial());\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    // Stop after play once\n    if (this._isOnce && this._time > this._onceTime) {\n      return this.stop();\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this._isStart = false;\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createMesh(): BufferMesh {\n    const mesh = new BufferMesh(this._entity.engine, \"particleMesh\");\n    const vertexStride = 96;\n    const vertexCount = this._maxCount * 4;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    let indices: Uint16Array | Uint32Array = null;\n    let useUint32: boolean = false;\n    if (vertexCount > ParticleRenderer._uint16VertexLimit) {\n      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        useUint32 = true;\n        indices = new Uint32Array(6 * this._maxCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(6 * this._maxCount);\n    }\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n    return mesh;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] =\n        vertices[k1 + 3] =\n        vertices[k2 + 3] =\n        vertices[k3 + 3] =\n          _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] =\n        vertices[k1 + 4] =\n        vertices[k2 + 4] =\n        vertices[k3 + 4] =\n          _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] =\n        vertices[k1 + 5] =\n        vertices[k2 + 5] =\n        vertices[k3 + 5] =\n          _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] =\n        vertices[k1 + 6] =\n        vertices[k2 + 6] =\n        vertices[k3 + 6] =\n          _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] =\n        vertices[k1 + 7] =\n        vertices[k2 + 7] =\n        vertices[k3 + 7] =\n          _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] =\n        vertices[k1 + 8] =\n        vertices[k2 + 8] =\n        vertices[k3 + 8] =\n          _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] =\n        vertices[k1 + 9] =\n        vertices[k2 + 9] =\n        vertices[k3 + 9] =\n          MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);\n\n      vertices[k0 + 10] =\n        vertices[k1 + 10] =\n        vertices[k2 + 10] =\n        vertices[k3 + 10] =\n          MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);\n      vertices[k0 + 11] =\n        vertices[k1 + 11] =\n        vertices[k2 + 11] =\n        vertices[k3 + 11] =\n          MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Alpha) {\n      vertices[k0 + 12] =\n        vertices[k1 + 12] =\n        vertices[k2 + 12] =\n        vertices[k3 + 12] =\n          MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] =\n        vertices[k1 + 13] =\n        vertices[k2 + 13] =\n        vertices[k3 + 13] =\n          Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] =\n        vertices[k1 + 14] =\n        vertices[k2 + 14] =\n        vertices[k3 + 14] =\n          _lifetime + getRandom() * _lifetime;\n    }\n\n    // Update the duration of play once when startTime or lifetime changes.\n    if (_updateDirtyFlag & DirtyFlagType.StartTime || _updateDirtyFlag & DirtyFlagType.LifeTime) {\n      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] =\n        vertices[k1 + 15] =\n        vertices[k2 + 15] =\n        vertices[k3 + 15] =\n          Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] =\n        vertices[k1 + 17] =\n        vertices[k2 + 17] =\n        vertices[k3 + 17] =\n          this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] =\n        vertices[k1 + 18] =\n        vertices[k2 + 18] =\n        vertices[k3 + 18] =\n          this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this.getMaterial().shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(camera);\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Fog.\n */\nexport class Fog extends Component {\n  protected static _colorProperty = Shader.getPropertyByName(\"u_fogColor\");\n\n  /**\n   * Fog color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(Fog._colorProperty, value);\n  }\n\n  private _color: Color = new Color(1, 0, 0, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_HAS_FOG\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_HAS_FOG\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Exponential fog.\n */\nexport class EXP2Fog extends Fog {\n  private static _densityProperty = Shader.getPropertyByName(\"u_fogDensity\");\n\n  /**\n   * Density of fog.\n   */\n  get density(): number {\n    return this._density;\n  }\n\n  set density(value: number) {\n    this._density = value;\n    this.scene.shaderData.setFloat(EXP2Fog._densityProperty, value);\n  }\n\n  private _density: number = 0.0025;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.density = this._density;\n  }\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_FOG_EXP2\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_FOG_EXP2\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Linear fog, according to the distance of the camera linear difference fog density.\n */\nexport class LinearFog extends Fog {\n  private static _nearProperty = Shader.getPropertyByName(\"u_fogNear\");\n  private static _farProperty = Shader.getPropertyByName(\"u_fogFar\");\n\n  /**\n   * Start of fog.\n   */\n  get near(): number {\n    return this._near;\n  }\n\n  set near(value: number) {\n    this._near = value;\n    this.scene.shaderData.setFloat(LinearFog._nearProperty, value);\n  }\n\n  /**\n   * End of fog.\n   */\n  get far(): number {\n    return this._far;\n  }\n\n  set far(value: number) {\n    this._far = value;\n    this.scene.shaderData.setFloat(LinearFog._farProperty, value);\n  }\n\n  private _near: number = 1;\n  private _far: number = 1000;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.near = this._near;\n    this.far = this._far;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat } from \"../texture/enums/RenderBufferDepthFormat\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): RenderColorTexture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: RenderColorTexture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    this.oriViewMatrix.cloneTo(camera.viewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { Light } from \"../lighting/Light\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Shadow manager.\n */\nexport class LightShadow {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n  private static _shadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _shadowIntensityProperty = Shader.getPropertyByName(\"u_shadowIntensity\");\n  private static _shadowRadiusProperty = Shader.getPropertyByName(\"u_shadowRadius\");\n  private static _shadowMapSizeProperty = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMaps\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData) {\n    const data = LightShadow._combinedData;\n\n    shaderData.setFloatArray(LightShadow._viewMatFromLightProperty, data.viewMatrix);\n    shaderData.setFloatArray(LightShadow._projMatFromLightProperty, data.projectionMatrix);\n    shaderData.setFloatArray(LightShadow._shadowBiasProperty, data.bias);\n    shaderData.setFloatArray(LightShadow._shadowIntensityProperty, data.intensity);\n    shaderData.setFloatArray(LightShadow._shadowRadiusProperty, data.radius);\n    shaderData.setFloatArray(LightShadow._shadowMapSizeProperty, data.mapSize);\n    shaderData.setTextureArray(LightShadow._shadowMapsProperty, data.map);\n  }\n\n  /**\n   * Clear all shadow maps.\n   */\n  static clearMap() {\n    LightShadow._combinedData.map.length = 0;\n  }\n\n  private static _maxLight = 3;\n\n  private static _combinedData = {\n    viewMatrix: new Float32Array(16 * LightShadow._maxLight),\n    projectionMatrix: new Float32Array(16 * LightShadow._maxLight),\n    bias: new Float32Array(LightShadow._maxLight),\n    intensity: new Float32Array(LightShadow._maxLight),\n    radius: new Float32Array(LightShadow._maxLight),\n    mapSize: new Float32Array(2 * LightShadow._maxLight),\n    map: []\n  };\n\n  private _mapSize: Vector2;\n  private _renderTarget: RenderTarget;\n\n  /**\n   * Shadow's light.\n   */\n  readonly light: Light;\n\n  /**\n   * Shadow bias.\n   */\n  bias: number = 0.005;\n\n  /**\n   * Shadow intensity, the larger the value, the clearer and darker the shadow.\n   */\n  intensity: number = 0.2;\n\n  /**\n   * Pixel range used for shadow PCF interpolation.\n   */\n  radius: number = 1;\n\n  /**\n   * Generate the projection matrix used by the shadow map.\n   */\n  projectionMatrix: Matrix = new Matrix();\n\n  constructor(light: Light, props = { engine: null, width: 512, height: 512 }) {\n    this.light = light;\n    const { engine, width, height } = props;\n\n    this._mapSize = new Vector2(width, height);\n    this._renderTarget = new RenderTarget(engine, width, height, new RenderColorTexture(engine, width, height));\n  }\n\n  /**\n   * The RenderTarget corresponding to the shadow map.\n   */\n  get renderTarget(): RenderTarget {\n    return this._renderTarget;\n  }\n\n  /**\n   * Shadow map's color render texture.\n   */\n  get map(): RenderColorTexture {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * Shadow map size.\n   */\n  get mapSize(): Vector2 {\n    return this._mapSize;\n  }\n\n  /**\n   * Initialize the projection matrix for lighting.\n   * @param light - The light to generate shadow\n   */\n  initShadowProjectionMatrix(light: Light) {\n    /**\n     * Directional light projection matrix, the default coverage area is left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50.\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Point light projection matrix, default configuration: fov: 50, aspect: 1, near: 0.5, far: 50.\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Spotlight projection matrix, the default configuration: fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  appendData(lightIndex: number): void {\n    const viewStart = lightIndex * 16;\n    const projectionStart = lightIndex * 16;\n    const biasStart = lightIndex;\n    const intensityStart = lightIndex;\n    const radiusStart = lightIndex;\n    const mapSizeStart = lightIndex * 2;\n    const mapStart = lightIndex;\n\n    const data = LightShadow._combinedData;\n\n    data.viewMatrix.set(this.light.viewMatrix.elements, viewStart);\n    data.projectionMatrix.set(this.projectionMatrix.elements, projectionStart);\n    data.bias[biasStart] = this.bias;\n    data.intensity[intensityStart] = this.intensity;\n    data.radius[radiusStart] = this.radius;\n    data.mapSize[mapSizeStart] = this.mapSize.x;\n    data.mapSize[mapSizeStart + 1] = this.mapSize.y;\n    data.map[mapStart] = this.map;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * Set whether the light to generate shadows.\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        this._enableShadow = false;\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow(this, { engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * Set whether the renderer to receive shadows.\n */\nObject.defineProperty(Component.prototype, \"receiveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * Set whether the renderer to cast shadows.\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow Map material.\n */\nexport class ShadowMapMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow-map\"));\n    this.shaderData.enableMacro(\"O3_GENERATE_SHADOW_MAP\");\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Light } from \"../lighting/Light\";\nimport { Material } from \"../material/Material\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Shader } from \"../shader/Shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * RenderPass for rendering shadow map.\n */\nexport class ShadowMapPass extends RenderPass {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n\n  readonly light: Light;\n\n  /**\n   * Constructor.\n   * @param light  - The light that the shadow belongs to\n   */\n  constructor(\n    name: string,\n    priority: number,\n    renderTarget: RenderTarget,\n    replaceMaterial: Material,\n    mask: Layer,\n    light: Light\n  ) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n    this.clearColor = new Color(1, 1, 1, 1);\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    // The viewProjection matrix from the light.\n    const shaderData = this.replaceMaterial.shaderData;\n    shaderData.setMatrix(ShadowMapPass._viewMatFromLightProperty, this.light.viewMatrix);\n    shaderData.setMatrix(ShadowMapPass._projMatFromLightProperty, (this.light as any).shadow.projectionMatrix);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow material.\n */\nexport class ShadowMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow\"));\n\n    const targetBlendState = this.renderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = targetBlendState.sourceAlphaBlendFactor = BlendFactor.DestinationColor;\n    targetBlendState.destinationColorBlendFactor = targetBlendState.destinationAlphaBlendFactor = BlendFactor.Zero;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.renderQueueType = RenderQueueType.Transparent;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { LightShadow } from \"./LightShadow\";\n\n/**\n * RenderPass for rendering shadow.\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearFlags = CameraClearFlags.None;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    const lights = lightMgr.visibleLights;\n    const shaderData = this.replaceMaterial.shaderData;\n\n    // keep render based on default render pass\n    const pass = camera._renderPipeline.defaultRenderPass;\n    this.renderTarget = pass.renderTarget;\n\n    let shadowMapCount = 0;\n\n    LightShadow.clearMap();\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const lgt: any = lights[i];\n      if (lgt.enableShadow) {\n        lgt.shadow.appendData(shadowMapCount++);\n      }\n    }\n\n    if (shadowMapCount) {\n      this.enabled = true;\n      LightShadow._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SHADOW_MAP_COUNT\", shadowMapCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SHADOW_MAP_COUNT\");\n    }\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Scene } from \"../Scene\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\n\n/**\n * Shadow plug-in.\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass: ShadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n\n  /**\n   * @override\n   */\n  preRender(scene: Scene, camera: Camera) {\n    const lights = scene.findFeature(LightFeature).visibleLights;\n\n    if (lights.length > 0) {\n      // Check RenderPass for rendering shadows.\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // Check RenderPass for rendering shadow map.\n      const renderPipeline = camera._renderPipeline;\n\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          renderPipeline.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      }\n\n      this.updatePassRenderFlag(renderPipeline._opaqueQueue);\n      this.updatePassRenderFlag(renderPipeline._alphaTestQueue);\n      this.updatePassRenderFlag(renderPipeline._transparentQueue);\n    }\n  }\n\n  /**\n   * Add RenderPass for rendering shadows.\n   * @param camera - The camera for rendering\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine);\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, Layer.Layer30); // SHADOW\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * Add RenderPass for rendering shadow map.\n   * @param camera - The camera for rendering\n   * @param light - The light that the shadow belongs to\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // Share shadow map material.\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine);\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      Layer.Layer31, // SHADOW_MAP\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * Update the renderPassFlag state of renderers in the scene.\n   * @param renderQueue - Render queue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const component: Component = item.component;\n\n      const receiveShadow = (component as any).recieveShadow;\n      const castShadow = (component as any).castShadow;\n      if (receiveShadow === true) {\n        component.entity.layer |= Layer.Layer30; //SHADOW;\n      } else if (receiveShadow === false) {\n        component.entity.layer &= ~Layer.Layer30; //SHADOW;\n      }\n\n      if (castShadow === true) {\n        component.entity.layer |= Layer.Layer31; //SHADOW_MAP;\n      } else if (castShadow === false) {\n        component.entity.layer &= ~Layer.Layer31; //SHADOW_MAP;\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneFeature } from \"./SceneFeature\";\nexport { SceneManager } from \"./SceneManager\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { Renderer } from \"./Renderer\";\nexport { dependencies } from \"./ComponentsDependencies\";\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport type { EngineSettings } from \"./EngineSettings\";\n\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline/RenderQueue\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport { RenderElement } from \"./RenderPipeline/RenderElement\";\nexport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nexport * from \"./base\";\n\n// Lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n\nexport { Background } from \"./Background\";\nexport { BackgroundMode } from \"./enums/BackgroundMode\";\nexport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nexport { ColorSpace } from \"./enums/ColorSpace\";\nexport * from \"./input/index\";\nexport * from \"./lighting/index\";\nexport * from \"./material/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mesh/index\";\nexport * from \"./sky/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./shader/index\";\nexport * from \"./Layer\";\nexport * from \"./clone/CloneManager\";\nexport * from \"./renderingHardwareInterface/index\";\nexport * from \"./physics/index\";\n"],"names":["Util","isArray","Array","value","toString","call","isArrayLike","x","length","clone","obj","rst","slice","i","l","k","hasOwnProperty","downloadBlob","blob","fileName","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","style","display","href","download","addEventListener","parentElement","removeChild","click","revokeObjectURL","removeFromArray","array","item","index","indexOf","last","end","ObjectValues","Object","keys","map","key","AssetPromiseStatus","AssetPromise","all","promises","resolve","reject","setProgress","completed","total","results","forEach","Promise","then","result","catch","err","onProgress","callback","_listeners","add","cancel","_status","Pending","_reject","executor","newReject","progress","_progress","listener","reason","Failed","Success","Set","ResourceManager","_addLoader","type","loader","extNames","_loaders","len","_extTypeMapping","_getTypeByUrl","path","split","substring","lastIndexOf","engine","retryCount","retryInterval","timeout","_assetPool","create","_assetUrlPool","_refObjectPool","_loadingPromises","load","assetInfo","_loadSingleItem","cancelNotLoaded","promise","p","gc","_gc","getAssetPath","instanceId","_addAsset","asset","_deleteAsset","id","_addRefObject","_deleteRefObject","_destroy","_assignDefaultOptions","undefined","urls","join","info","res","useCache","forceDestroy","objects","isGCIgnored","destroy","resourceLoader","assetType","extnames","Target","Event","target","data","bubbles","_timeStamp","_target","_currentTarget","_bubbles","_propagationStopped","_type","Date","getTime","stopPropagation","t","CloneMode","ignoreClone","propertyKey","CloneManager","registerCloneMode","Ignore","assignmentClone","Assignment","shallowClone","Shallow","deepClone","Deep","mode","targetMap","_subCloneModeMap","get","constructor","set","getCloneMode","cloneModes","_cloneModeMap","objectType","_objectType","cloneModeMap","subCloneModes","getPrototypeOf","deepCloneObject","source","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","n","_deepCloneObjectItem","customSource","cloneTo","sourceItem","itemType","sourceTypeArrayItem","targetTypeArrayItem","sourceArrayItem","targetArrayItem","sourceCustomItem","targetCustomItem","targetItem","Map","EventDispatcher","_class","_descriptor","_evtCount","hasEvent","event","_evts","eventNames","listenerCount","listeners","fn","dispatch","once","removeEventListener","on","events","push","off","_clearEvent","temp","removeAllEventListeners","trigger","e","noop","message","debug","console","log","bind","warn","error","Logger","isEnabled","enable","disable","Time","_clock","_timeScale","_deltaTime","_startTime","_lastTickTime","performance","now","reset","tick","nowTime","s","EngineObject","_class2","_descriptor2","_destroyed","_engine","resourceManager","_instanceIdCounter","DataType","GLCapabilityType","DisorderedArray","count","_elements","element","delete","deleteByIndex","elements","lastIndex","garbageCollection","ShaderMacroCollection","_mask","_length","unionCollection","left","right","out","outMask","minSize","maxSize","minMask","maxMask","macro","_index","size","mask","maskStart","_value","endIndex","newValue","macroCollection","addMask","addSize","maskSize","complementaryCollection","removeMask","Math","min","intersectionCollection","unionMask","isEnable","clear","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_destroyComponents","_onUpdateAnimations","_renderers","_onUpdateRenderers","_componentsContainerPool","_colliders","addRenderer","renderer","_rendererIndex","removeRenderer","replaced","addOnStartScript","script","_onStartIndex","removeOnStartScript","addCollider","collider","removeCollider","addOnUpdateScript","_onUpdateIndex","removeOnUpdateScript","addOnLateUpdateScript","_onLateUpdateIndex","removeOnLateUpdateScript","addOnUpdateAnimations","animation","removeOnUpdateAnimations","addOnUpdateRenderers","removeOnUpdateRenderers","addDestroyComponent","component","callScriptOnStart","onStartScripts","_started","onStart","callScriptOnUpdate","deltaTime","onUpdate","callScriptOnLateUpdate","onLateUpdate","callAnimationUpdate","update","callRendererOnUpdate","callRender","context","camera","_camera","cullingMask","_entity","layer","enableFrustumCulling","isCulled","_frustum","intersectsBox","bounds","transform","entity","position","worldPosition","center","getCenter","_tempVector0","isOrthographic","forward","getWorldForward","_tempVector1","Vector3","subtract","_distanceForSort","dot","distanceSquared","_updateShaderData","_render","_globalShaderMacro","shaderData","_macroCollection","callComponentDestroy","destroyComponents","onDestroy","callCameraOnBeginRender","camComps","_components","camComp","onBeginRender","callCameraOnEndRender","onEndRender","callColliderOnUpdate","_onUpdate","callColliderOnLateUpdate","_onLateUpdate","getActiveChangedTempList","pop","putActiveChangedTempList","componentContainer","ComponentCloner","cloneComponent","cloneMode","sourcePropS","tarProp","sourcePropD","_cloneTo","ComponentsDependencies","register","currentComponent","dependentComponent","_addDependency","_dependenciesMap","_invDependenciesMap","_addCheck","dependencies","getComponent","_removeCheck","invDependencies","components","componentClass","Layer","Component","_descriptor3","_descriptor4","_removeComponent","isActiveInHierarchy","_enabled","_onDisable","_onInActive","_onDestroy","_onAwake","_onEnable","_onActive","_setActive","_awoken","_isActiveInHierarchy","scene","UpdateFlag","_flags","flag","flags","UpdateFlagManager","_updateFlags","distribute","updateFlags","Transform","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_dirtyFlag","TransformFlag","WmWpWeWqWs","setPosition","y","z","_position","setValue","setRotation","_rotation","rotation","setRotationQuaternion","w","_rotationQuaternion","rotationQuaternion","setScale","_scale","scale","setWorldPosition","_worldPosition","setWorldRotation","_worldRotation","worldRotation","setWorldRotationQuaternion","_worldRotationQuaternion","worldRotationQuaternion","worldMatrix","normalize","getWorldRight","getWorldUp","up","translate","translationOrX","relativeToLocalOrY","relativeToLocal","_tempVec3","_translate","rotate","rotationOrX","_rotateXYZ","rotateByAxis","axis","angle","rad","MathUtil","degreeToRadFactor","Quaternion","rotationAxisAngle","_tempQuat0","_rotateByQuat","lookAt","worldUp","EPSILON","zeroTolerance","abs","rotMat","_tempMat43","Matrix","getRotation","invert","registerWorldChangeFlag","_updateFlagManager","_parentChange","_isParentDirty","_updateAllWorldFlag","_isFrontFaceInvert","lossyWorldScale","isInvert","_updateWorldPositionFlag","_isContainDirtyFlags","WmWp","_worldAssociatedChange","nodeChildren","_children","_updateWorldRotationFlag","WmWeWq","_updateWorldPositionAndRotationFlag","WmWpWeWq","_updateWorldScaleFlag","WmWs","_updateWorldPositionAndScaleFlag","WmWpWs","_getParentTransform","_parentTransformCache","parentCache","parent","_getScaleMatrix","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","setValueByMatrix","Matrix3x3","multiply","targetDirtyFlags","_isContainDirtyFlag","_setDirtyFlagTrue","_setDirtyFlagFalse","rotateQuat","translation","radFactor","rotQuat","rotationEuler","LocalMatrix","WorldPosition","getTranslation","_tempMat41","transformCoordinate","LocalEuler","toEuler","radToDegreeFactor","LocalQuat","WorldEuler","degreeToRadian","WorldQuat","WorldScale","scaleMat","_lossyWorldScale","affineTransformation","_localMatrix","decompose","WorldMatrix","localMatrix","_worldMatrix","_tempMat42","_tempMat40","Entity","_findChildByName","root","name","children","child","_traverseSetOwnerScene","_scene","childCount","Layer0","_scripts","_isRoot","_isActive","_parent","_activeChangedComponents","_invModelMatrix","_inverseWorldMatFlag","addComponent","getComponents","getComponentsIncludeChildren","_getComponentsInChildren","addChild","getChild","findByName","grandson","findByPath","splits","createChild","clearChildren","_processInActive","cloneEntity","sourceComp","targetComp","parentChildren","splice","_addScript","_entityCacheIndex","_removeScript","_removeFromParent","oldParent","oldParentChildren","_processActive","_componentsManager","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","isActive","activeChangedComponents","_setTransformDirty","getInvModelMatrix","_isActiveInEngine","newParent","parentScene","val","FeatureManager","_features","_objects","registerFeature","IFeature","featureArray","objectArray","features","addObject","callFeatureMethod","method","args","feature","apply","findFeature","CameraClearFlags","HitResult","distance","point","normal","PhysicsMaterialCombineMode","ColliderShapeUpAxis","PhysicsManager","_nativePhysicsManager","_physicalObjectsMap","_onContactEnter","obj1","obj2","_onContactExit","_onContactStay","_onTriggerEnter","shape1","shape2","scripts","onTriggerEnter","_onTriggerExit","onTriggerExit","_onTriggerStay","onTriggerStay","_nativePhysics","createPhysicsManager","raycast","ray","distanceOrResult","layerMaskOrResult","outHitResult","hitResult","Number","MAX_VALUE","layerMask","Everything","idx","_collider","_update","_addColliderShape","colliderShape","addColliderShape","_nativeShape","_removeColliderShape","removeColliderShape","_addCollider","_nativeCollider","_removeCollider","PhysicsMaterial","_bounciness","_dynamicFriction","_staticFriction","_bounceCombine","Average","_frictionCombine","_nativeMaterial","createPhysicsMaterial","setBounciness","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","ColliderShape","_id","_material","_isTrigger","_isSceneQuery","_idGenerator","setMaterial","setIsTrigger","BoxColliderShape","_size","createBoxColliderShape","setSize","SphereColliderShape","_radius","createSphereColliderShape","setRadius","PlaneColliderShape","createPlaneColliderShape","CapsuleColliderShape","_height","_upAxis","Y","createCapsuleColliderShape","setUpAxis","setHeight","Collider","_updateFlag","_shapes","addShape","shape","oldCollider","removeShape","physicsManager","clearShapes","shapes","setWorldTransform","worldScale","setWorldScale","StaticCollider","createStaticCollider","DynamicCollider","linearVelocity","angularVelocity","linearDamping","angularDamping","mass","isKinematic","createDynamicCollider","applyForce","force","addForce","applyTorque","torque","addTorque","getWorldTransform","PointerPhase","Pointer","phase","Leave","Vector2","_uniqueID","_needUpdate","PointerManager","_pointers","_multiPointerEnabled","_enablePhysics","_canvas","_nativeEvents","_pointerPool","_keyEventList","_keyEventCount","_needOverallPointers","_currentPosition","_currentPressedEntity","_currentEnteredEntity","canvas","htmlCanvas","_webCanvas","touchAction","onpointerdown","onpointerup","onpointerout","onpointermove","evt","_overallPointers","_handlePointerEvent","rayCastEntity","_pointerRayCast","keyEventCount","keyEventList","PointerKeyEvent","Down","_firePointerDown","Up","_firePointerUpAndClick","_firePointerExitAndEnter","_firePointerDrag","pointers","deleteCount","totalCount","_getIndexByPointerID","pointerId","_addPointer","lastCount","pointerPool","pointer","_removePointer","pointerIndex","_updatePointer","updatedPointer","nativeEvents","activePointerCount","nativeEventsLen","offsetX","offsetY","Move","pointerCount","currentPosition","pixelRatioWidth","width","clientWidth","pixelRatioHeight","height","clientHeight","lastNativeEvent","_tempPoint","_tempRay","_tempHitResult","cameras","sceneManager","activeScene","_activeCameras","enabled","renderTarget","viewport","vpX","vpY","vpW","vpH","viewportPointToRay","clearFlags","DepthColor","onPointerDrag","onPointerExit","onPointerEnter","onPointerDown","pressedEntity","sameTarget","onPointerClick","onPointerUp","Ray","InputManager","_pointerManager","RenderQueueType","RefObject","_refCount","refCount","_getRefCount","_addRefCount","_addToResourceManager","ShaderDataGroup","Texture","_platformTexture","_mipmap","_width","_mipmapCount","_wrapModeU","_wrapModeV","_filterMode","_anisoLevel","generateMipmaps","_getMaxMiplevel","floor","log2","_getMipmapCount","max","wrapModeU","wrapModeV","filterMode","_hardwareRenderer","capability","maxAnisoLevel","anisoLevel","pbr_frag_define","pbr_helper","brdf","direct_irradiance_frag_define","ibl_frag_define","pbr_frag","ShaderLib","_objectSpread","common","common_vert","common_frag","color_share","normal_share","uv_share","worldpos_share","shadow_share","fog_share","begin_normal_vert","begin_position_vert","position_vert","color_vert","normal_vert","skinning_vert","blendShape_input","blendShape_vert","uv_vert","worldpos_vert","shadow_vert","fog_vert","light_frag_define","mobile_material_frag","fog_frag","begin_mobile_frag","begin_viewdir_frag","mobile_blinnphong_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","PBRShaderLib","normal_get","ShaderFactory","parseCustomMacros","macros","m","parseIncludes","src","regex","replace","match","trim","parseExtension","extensions","convertTo300","shader","isFrag","isMRT","test","_replaceMRTShader","declaration","mrtIndexSet","ShaderMacro","ColorSpace","ShaderUniform","propertyId","location","applyFunc","cacheValue","textureIndex","textureDefault","_rhi","_gl","_colorSpace","rhi","gl","settings","colorSpace","upload1f","shaderUniform","uniform1f","upload1fv","uniform1fv","upload2f","r","g","Linear","uniform2f","Color","gammaToLinearSpace","upload2fv","uniform2fv","upload3f","b","uniform3f","upload3fv","uniform3fv","upload4f","uniform4f","upload4fv","uniform4fv","upload1i","uniform1i","upload1iv","uniform1iv","upload2i","uniform2i","upload2iv","uniform2iv","upload3i","uniform3i","upload3iv","uniform3iv","upload4i","uniform4i","upload4iv","uniform4iv","uploadMat4","uniformMatrix4fv","uploadMat4v","uploadTexture","activeTexture","bindTexture","uploadTextureArray","textureIndices","texture","ShaderUniformBlock","constUniforms","textureUniforms","ShaderProgram","_addLineNum","str","lines","limitLength","prefix","line","vertexSource","fragmentSource","sceneUniformBlock","cameraUniformBlock","rendererUniformBlock","materialUniformBlock","otherUniformBlock","_uploadRenderCount","_uploadCamera","_uploadRenderer","_uploadMaterial","attributeLocation","_isValid","_vertexShader","_fragmentShader","_glProgram","_activeTextureUint","_createProgram","_recordLocation","_counter","uploadAll","uniformBlock","uploadUniforms","uploadTextures","properties","_properties","uniform","uploadUnGroupTextures","groupingOtherUniformBlock","_groupingSubOtherUniforms","_currentBind","useProgram","deleteShader","deleteProgram","uniforms","isTexture","group","Shader","_getShaderPropertyGroup","_groupingUniform","Scene","Camera","Renderer","Material","vertexShader","_createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","validateProgram","isContextLost","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderType","shaderSource","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uniformInfos","_getUniformInfos","attributeInfos","_getAttributeInfos","substr","getUniformLocation","getPropertyByName","_uniqueId","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","Vector4","BOOL","INT","BOOL_VEC2","INT_VEC2","BOOL_VEC3","INT_VEC3","BOOL_VEC4","INT_VEC4","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","defaultTexture","_whiteTexture2D","_whiteTextureCube","defaultTextures","glTextureIndices","TEXTURE0","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","attributeCount","ACTIVE_ATTRIBUTES","getActiveAttrib","ShaderProperty","_group","_propertyNameCounter","shaderMap","_shaderMap","find","getMacroByName","_macroMap","maskMap","_macroMaskMap","counter","_macroCounter","bit","propertyNameMap","_propertyNameMap","property","propertyName","shaderProperty","_getNamesByMacros","subMaskMap","subMask","j","_shaderId","_vertexSource","_fragmentSource","_shaderCounter","compileVariant","compileMacros","_compileMacros","_getShaderProgram","isValid","shaderProgramPool","_getShaderProgramPool","shaderProgram","isWebGL2","macroNameList","macroNameStr","versionStr","precisionStr","canIUse","shaderTextureLod","standardDerivatives","_shaderExtension","cache","ShaderData","_variableMacros","getFloat","_getData","setFloat","_setData","getInt","setInt","getFloatArray","setFloatArray","getIntArray","setIntArray","getVector2","setVector2","getVector3","setVector3","getVector4","setVector4","getMatrix","setMatrix","getColor","setColor","getTexture","setTexture","lastValue","getTextureArray","setTextureArray","enableMacro","_enableVariableMacro","disableMacro","variableValue","_disableVariableMacro","targetProperties","targetProperty","variableMacro","oldMacro","BlendFactor","BlendOperation","ColorWriteMask","RenderTargetBlendState","colorBlendOperation","Add","alphaBlendOperation","sourceColorBlendFactor","One","sourceAlphaBlendFactor","destinationColorBlendFactor","Zero","destinationAlphaBlendFactor","colorWriteMask","All","BlendState","targetBlendState","blendColor","alphaToCoverage","_getGLBlendFactor","blendFactor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","_getGLBlendOperation","blendOperation","FUNC_ADD","Subtract","FUNC_SUBTRACT","ReverseSubtract","FUNC_REVERSE_SUBTRACT","Min","blendMinMax","Error","MIN","Max","MAX","_apply","hardwareRenderer","lastRenderState","_platformApply","blendState","lastState","lastTargetBlendState","BLEND","blendFuncSeparate","blendEquationSeparate","equals","colorMask","Red","Green","Blue","Alpha","SAMPLE_ALPHA_TO_COVERAGE","CompareFunction","DepthState","writeEnabled","compareFunction","Less","_getGLCompareFunction","Never","NEVER","LESS","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","ALWAYS","depthState","DEPTH_TEST","depthFunc","depthMask","CullMode","RasterState","cullMode","Back","depthBias","slopeScaledDepthBias","_cullFaceEnable","_frontFaceInvert","frontFaceInvert","rasterState","cullFaceEnable","Off","CULL_FACE","cullFace","BACK","FRONT","frontFace","CW","CCW","POLYGON_OFFSET_FILL","polygonOffset","StencilOperation","StencilState","referenceValue","writeMask","compareFunctionFront","compareFunctionBack","passOperationFront","Keep","passOperationBack","failOperationFront","failOperationBack","zFailOperationFront","zFailOperationBack","_getGLStencilOperation","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","stencilState","STENCIL_TEST","referenceOrMaskChange","stencilFuncSeparate","stencilOpSeparate","stencilMask","RenderState","_lastRenderState","renderQueueType","Opaque","renderState","dest","_preRender","renderElement","ClassPool","_elementPoolIndex","_elementPool","getFromPool","pool","resetPool","RenderContext","_viewProjectMatrix","_setContext","projectionMatrix","viewMatrix","RenderElement","mesh","subMesh","material","SpriteElement","positions","uv","triangles","color","SpriteMaskElement","isAdd","SpriteMaskInteraction","_descriptor14","prototype","_overrideUpdate","_transformChangeFlag","getInstanceMaterial","materials","_materials","_materialsInstanced","_createInstanceMaterial","getMaterial","indexOrMaterial","materialsInstance","internalMaterial","getInstanceMaterials","getMaterials","setMaterials","internalMaterials","materialsInstanced","mvMatrix","_mvMatrix","mvpMatrix","_mvpMatrix","mvInvMatrix","_mvInvMatrix","normalMatrix","_normalMatrix","transpose","_localMatrixProperty","_worldMatrixProperty","_mvMatrixProperty","_mvpMatrixProperty","_mvInvMatrixProperty","_normalMatrixProperty","componentsManager","_updateBounds","worldBounds","insMaterial","changeFlag","_bounds","BoundingBox","SpriteMaskLayer","SpriteMask","_maskElement","_worldMatrixDirtyFlag","_spriteMaskDefaultMaterial","_alphaCutoffProperty","_alphaCutoff","_spriteDirty","sprite","_positions","_updateMesh","localPositions","localVertexPos","curVertexPos","transformToVec3","_textureProperty","spriteMaskElementPool","_spriteMaskElementPool","maskElement","_uv","_triangles","_renderPipeline","_allSpriteMasks","_sprite","_registerUpdateFlag","VertexElementFormat","BufferUsage","IndexFormat","BufferUtil","_getGLBufferUsage","bufferUsage","Static","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","_getGLIndexType","indexFormat","UInt8","UNSIGNED_BYTE","UInt16","UNSIGNED_SHORT","UInt32","UNSIGNED_INT","_getGLIndexByteCount","_getElementInfo","format","normalized","Float","Byte4","BYTE","UByte4","NormalizedByte4","NormalizedUByte4","Short2","SHORT","UShort2","NormalizedShort2","NormalizedUShort2","Short4","UShort4","NormalizedShort4","NormalizedUShort4","VertexElement","semantic","offset","bindingIndex","instanceStepRate","_glElementInfo","_semantic","_offset","_format","_bindingIndex","_instanceStepRate","BufferBindFlag","SetDataOptions","Buffer","byteLengthOrData","_glBindTarget","_glBufferUsage","_nativeBuffer","_byteLength","_bufferUsage","glBufferUsage","glBindTarget","VertexBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","createBuffer","bufferData","byteLength","bindBuffer","setData","bufferByteOffset","dataOffset","dataLength","options","None","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","bufferSubData","subData","buffer","getData","getBufferSubData","deleteBuffer","resize","MeshTopology","IndexBufferBinding","_buffer","SubMesh","start","topology","Triangles","Mesh","_vertexElementMap","_glIndexType","_glIndexByteCount","_platformPrimitive","_instanceCount","_vertexBufferBindings","_indexBufferBinding","_vertexElements","_subMeshes","createPlatformPrimitive","addSubMesh","startOrSubMesh","removeSubMesh","subMeshes","clearSubMesh","registerUpdateFlag","_draw","draw","vertexBufferBindings","_setVertexElements","_clearVertexElements","_addVertexElement","_setVertexBufferBinding","binding","lastBinding","_setIndexBufferBinding","vertexElementMap","VertexBufferBinding","stride","_stride","TextureFilterMode","TextureFormat","TextureWrapMode","Texture2D","mipmap","R8G8B8A8","createPlatformTexture2D","Bilinear","Repeat","setPixelBuffer","colorBuffer","mipLevel","setImageSource","imageSource","flipY","premultiplyAlpha","getPixelBuffer","xOrMipLevelOrOut","yOrMipLevel","mipLevelOrOut","argsLength","arguments","RenderBufferColorFormat","RenderBufferDepthFormat","TextureCubeFace","TextureCubeMap","createPlatformTextureCubeMap","Clamp","face","RenderDepthTexture","isCube","Depth","_autoMipmap","_isCube","createPlatformRenderDepthTexture","RenderTarget","renderTexture","depth","antiAliasing","_platformRenderTarget","_colorTextures","_depth","_antiAliasing","_depthTexture","createPlatformRenderTarget","getColorTexture","colorTextureCount","autoGenerateMipmaps","colorTexture","_setRenderTargetInfo","faceIndex","setRenderTargetInfo","_blitRenderTarget","blitRenderTarget","RenderColorTexture","createPlatformRenderColorTexture","ModelMesh","_hasBlendShape","_useBlendShapeNormal","_useBlendShapeTangent","_blendShapeTexture","_vertexCount","_accessible","_verticesFloat32","_verticesUint8","_indices","_indicesFormat","_vertexSlotChanged","_vertexChangeFlag","_indicesChangeFlag","_elementCount","_vertexElementsCache","_normals","_colors","_tangents","_uv1","_uv2","_uv3","_uv4","_uv5","_uv6","_uv7","_boneWeights","_boneIndices","_blendShapes","_blendShapeUpdateFlags","setPositions","ValueChanged","Position","getPositions","setNormals","normals","Normal","getNormals","setColors","colors","getColors","setBoneWeights","boneWeights","BoneWeight","getBoneWeights","setBoneIndices","boneIndices","BoneIndex","getBoneIndices","setTangents","tangents","Tangent","getTangents","setUVs","channelIndex","UV","UV1","UV2","UV3","UV4","UV5","UV6","UV7","getUVs","setIndices","indices","getIndices","addBlendShape","blendShape","BlendShape","_registerChangeFlag","clearBlendShapes","blendShapeUpdateFlags","uploadData","noLongerAccessible","vertexElements","_updateVertexElements","elementCount","vertexBuffer","vertexFloatCount","vertices","_updateVertices","newVertexBuffer","indexBuffer","newIndexBuffer","IndexBuffer","_releaseCache","POSITION_VERTEX_ELEMENT","blendShapeCount","weight","joint","internalStart","tangent","blendShapes","blendShapeUpdateFlag","frames","frameCount","endFrame","deltaPositions","deltaPosition","deltaNormals","deltaNormal","deltaTangents","deltaTangent","Skin","inverseBindMatrices","joints","skeleton","MeshRenderer","_mesh","_meshUpdateFlag","_uvMacro","_normalMacro","_tangentMacro","_vertexColorMacro","renderPipeline","renderElementPool","_renderElementPool","pushPrimitive","destroyed","localBounds","lastMesh","SkinnedMeshRenderer","_skin","_blendShapeWeights","_mat","_useJointTexture","matrixPalette","_jointMatrixProperty","_blendShapeWeightsProperty","_blendShapeMacro","_blendShapeNormalMacro","_blendShapeTangentMacro","_initJoints","skin","jointNodes","findByNodeName","maxAttribUniformVec4","renderStates","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxJoints","jointCount","_jointCountProperty","canIUseMoreJoints","_maxJoints","nodeName","_hasInitJoints","ibms","worldToLocal","mat","identity","createJointTexture","jointTexture","R32G32B32A32","Point","_jointSamplerProperty","PrimitiveMesh","createSphere","radius","segments","vertexCount","rectangleCount","_generateIndices","thetaRange","PI","alphaRange","countReciprocal","segmentsReciprocal","uvs","u","v","alphaDelta","thetaDelta","sinTheta","sin","posX","cos","posY","posZ","c","d","_initialize","createCuboid","halfWidth","halfHeight","halfDepth","createPlane","horizontalSegments","verticalSegments","horizontalCount","verticalCount","gridWidth","gridHeight","horizontalCountReciprocal","horizontalSegmentsReciprocal","verticalSegmentsReciprocal","createCylinder","radiusTop","radiusBottom","radialSegments","heightSegments","radialCount","unitHeight","torsoVertexCount","torsoRectangleCount","capTriangleCount","totalVertexCount","radialCountReciprocal","radialSegmentsReciprocal","heightSegmentsReciprocal","indicesOffset","thetaStart","radiusDiff","slope","radiusSlope","theta","cosTheta","diameterTopReciprocal","diameterBottomReciprocal","positionStride","curPosBottom","curPosX","curPosZ","curPosTop","topCapIndex","bottomIndiceIndex","topIndiceIndex","firstStride","secondStride","radiusMax","createTorus","tubeRadius","tubularSegments","arc","cosV","sinV","cosU","sinU","centerX","centerY","outerRadius","createCone","curRadius","curPos","createCapsule","capVertexCount","capRectangleCount","halfPI","doublePI","_createCapsuleCap","indexCount","elementIndexUint","capAlphaRange","posIndex","BufferMesh","setVertexElements","setVertexBufferBinding","bufferOrBinding","strideOrFirstIndex","isBinding","bindings","setVertexBufferBindings","firstIndex","needLength","setIndexBufferBinding","BlendShapeFrame","_frames","addFrame","frameOrWeight","frame","_addFrame","clearFrames","Basic2DBatcher","_subMeshPool","_batchedQueue","_meshes","_meshCount","_vertexBuffers","_indiceBuffers","_vertices","_flushId","MAX_VERTEX_COUNT","_createMesh","drawElement","flush","batchedQueue","_updateData","drawBatches","_canUploadSameBuffer","meshes","vertexBuffers","indiceBuffers","vertexStride","createVertexElements","vertexIndex","indiceIndex","vertexStartIndex","curIndiceStartIndex","curMeshIndex","preElement","curElement","updateVertices","triangleNum","canBatch","_getSubMeshFromPool","SpriteMaskBatcher","preShaderData","curShaderData","textureProperty","alphaCutoffProperty","verticesNum","curUV","spriteMaskElement","op","drawPrimitive","SpriteMaskManager","_batcher","_preMaskLayer","preRender","maskInteraction","_processMasksDiff","postRender","maskLayer","preMaskLayer","curMaskLayer","allMasks","commonLayer","addLayer","reduceLayer","allMaskElements","influenceLayers","maskRenderElement","BackgroundMode","BackgroundTextureFillMode","Sky","_matrix","Background","SolidColor","solidColor","sky","_textureFillMode","AspectFitHeight","_texture","_createPlane","_resizeBackgroundTexture","_backgroundTextureMesh","Fill","AspectFitWidth","fitWidthScale","fitHeightScale","_backgroundTextureMaterial","DiffuseMode","AmbientLight","_diffuseSphericalHarmonics","_diffuseSolidColor","_diffuseIntensity","_specularReflection","_specularIntensity","_diffuseMode","_shArray","_specularTextureDecodeRGBM","_setScene","_diffuseColorProperty","diffuseMode","diffuseSphericalHarmonics","diffuseIntensity","specularTexture","specularIntensity","specularTextureDecodeRGBM","_preComputeSH","sh","coefficients","_decodeRGBMMacro","SphericalHarmonics","_shMacro","_diffuseSHProperty","_diffuseIntensityProperty","_specularTextureProperty","_mipLevelProperty","mipmapCount","_specularMacro","_specularIntensityProperty","SceneFeature","preUpdate","postUpdate","Light","_viewMat","_inverseViewMat","LightFeature","attachRenderLight","detachRenderLight","_maxLight","DirectLight","intensity","_forward","_lightColor","_reverseDirection","_combinedData","_colorProperty","_directionProperty","direction","_appendData","lightIndex","colorStart","directionStart","lightColor","PointLight","_positionProperty","_distanceProperty","positionStart","distanceStart","lightPosition","SpotLight","penumbra","_inverseDirection","_angleCosProperty","angleCos","_penumbraCosProperty","penumbraCos","penumbraCosStart","angleCosStart","hasLight","visibleLights","light","directLightCount","pointLightCount","spotLightCount","lights","background","_rootEntities","_ambientLight","sceneFeatureManager","ambientLight","createRootEntity","addRootEntity","isRoot","oldScene","_removeEntity","removeRootEntity","getRootEntity","findEntityByName","findEntityByPath","filter","Boolean","rootEntitiesCount","findEntity","_attachRenderCamera","_detachRenderCamera","active","rootEntities","lightMgr","oldRootEntities","Feature","lastAmbientLight","SceneManager","_activeScene","loadScene","destroyOldScene","scenePromise","mergeScenes","sourceScene","destScene","ShaderPool","init","blinnPhongVs","blinnPhongFs","pbrVs","pbrFs","pbrSpecularFs","unlitVs","unlitFs","shadowMapVs","shadowMapFs","shadowFs","skyboxVs","skyboxFs","particleVs","particleFs","spriteMaskVs","spriteMaskFs","spriteVs","spriteFs","backgroundTextureVs","backgroundTextureFs","ShaderProgramPool","_cacheHierarchy","_cacheMap","_lastQueryMap","_lastQueryKey","cacheMap","maskLength","_resizeCacheMapHierarchy","maxEndIndex","subCacheShaders","cacheKey","hierarchy","resizeLength","engineFeatureManager","Engine","physics","inputManager","_spriteElementPool","_spriteDefaultMaterial","_renderContext","_renderCount","_shaderProgramPools","_spriteMaskManager","_settings","_resourceManager","_sceneManager","_vSyncCount","_targetFrameRate","_time","_isPaused","_requestId","_timeoutId","_vSyncCounter","_targetFrameInterval","_animate","requestAnimationFrame","setTimeout","_createSpriteMaterial","_createSpriteMaskMaterial","whitePixel","whiteTexture2D","whiteTextureCube","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","Gamma","_gammaMacro","createEntity","pause","cancelAnimationFrame","clearTimeout","resume","time","sort","camera1","camera2","priority","run","shaderProgramPools","cameraEntity","render","Transparent","SystemInfo","_isIos","ua","navigator","userAgent","toLocaleLowerCase","devicePixelRatio","EngineFeature","preLoad","preTick","currentScene","postTick","shutdown","Script","onAwake","onEnable","other","onDisable","passNum","RenderPass","replaceMaterial","renderOverride","clearColor","opaqueQueue","alphaTestQueue","transparentQueue","SpriteBatcher","preRenderer","curRenderer","checkBatchWithMask","leftMaskInteraction","maskManager","spriteElement","RenderQueue","_compareFromNearToFar","_renderSortId","_compareFromFarToNear","items","_spriteBatcher","renderCount","sceneData","cameraData","renderPassFlag","rendererData","materialData","switchProgram","switchRenderCount","compareFunc","_quickSort","from","to","_insertionSort","third_index","v0","v1","v2","c01","tmp","c02","c12","pivot","low_end","high_start","partition","order","top_elem","BasicRenderPipeline","_opaqueQueue","_transparentQueue","_alphaTestQueue","_defaultPass","_renderPassArray","_lastCanvasSize","addRenderPass","nameOrPass","renderPass","p1","p2","removeRenderPass","pass","getRenderPass","cubeFace","_drawRenderPass","activeRenderTarget","clearRenderTarget","_drawSky","_drawBackgroundTexture","AlphaTest","MathTemp","tempVec4","tempVec3","tempVec2","_isOrthographic","_isProjMatSetting","_nearClipPlane","_farClipPlane","_fieldOfView","_orthographicSize","_isProjectionDirty","_isInvProjMatDirty","_isFrustumProjectDirty","_customAspectRatio","_renderTarget","_transform","_isViewMatrixDirty","_isInvViewProjDirty","_frustumViewChangeFlag","resetProjectionMatrix","_projMatChange","resetAspectRatio","worldToViewportPoint","cameraPoint","viewportPoint","transformToVec4","viewportToWorldPoint","nearClipPlane","farClipPlane","nf","pointZ","_innerViewportToWorldPoint","_getInvViewProjMat","invViewProjMat","origin","screenToViewportPoint","viewportToScreenPoint","worldToScreenPoint","screenToWorldPoint","screenPointToRay","calculateFromMatrix","clipPoint","_viewMatrixProperty","_projectionMatrixProperty","_vpMatrixProperty","_inverseViewMatrixProperty","_inverseProjectionMatrixProperty","_getInverseProjectionMatrix","_cameraPositionProperty","_invViewProjMat","_inverseProjectionMatrix","_viewport","_viewMatrix","_lastAspectSize","_projectionMatrix","aspectRatio","perspective","ortho","BoundingFrustum","mimeType","json","gltf","mtl","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","defaultInterval","request","config","getMimeTypeFromUrl","realRequest","requestImage","requestRes","lastError","MultiExecutor","stop","img","Image","onerror","onabort","timeoutId","onload","crossOrigin","xhr","XMLHttpRequest","status","response","responseText","ontimeout","onprogress","loaded","open","withCredentials","credentials","responseType","headers","setRequestHeader","send","extname","execFunc","interval","_currentCount","done","exec","Loader","AssetType","RenderFace","BlendMode","BaseMaterial","_renderFace","Front","_isTransparent","_blendMode","blendMode","_alphaCutoffProp","_alphaCutoffMacro","Double","Additive","BlinnPhongMaterial","_diffuseColorProp","_specularColorProp","_emissiveColorProp","_tilingOffsetProp","_shininessProp","_normalIntensityProp","baseColor","_baseTextureProp","specularColor","_specularTextureProp","emissiveColor","_emissiveTextureProp","_normalTextureProp","tilingOffset","PBRBaseMaterial","_baseColorProp","_normalTextureIntensityProp","_occlusionTextureIntensityProp","_occlusionTextureProp","PBRMaterial","_metallicProp","_roughnessProp","_metallicRoughnessTextureProp","PBRSpecularMaterial","_glossinessProp","_specularGlossinessTextureProp","UnlitMaterial","SpriteAtlas","getSprite","_sprites","_spriteNamesToIndex","getSprites","outSprites","_addSprite","Sprite","region","pixelsPerUnit","_assetID","_pixelsPerUnit","_atlasRotated","_region","Rect","_pivot","_atlasRegion","_atlasRegionOffset","DirtyFlag","_rectangleTriangles","cloneSprite","_updatePositionsAndBounds","atlasRegion","atlasRegionOffset","regionX","regionY","regionW","regionH","pPUReciprocal","lx","ty","rx","by","textureW","textureH","realRenderW","realRenderH","blankLeft","blankTop","blankRight","blankBottom","oriWidth","oriHeight","top","bottom","atlasRegionW","atlasRegionH","atlasRegionX","atlasRegionY","clamp","SpriteRenderer","_isWorldMatrixDirty","flipX","Flip","_cacheFlipX","_cacheFlipY","flipXChange","flipYChange","MaskInteraction","_updateStencilState","spriteElementPool","_customLocalBounds","_customRootEntity","_maskInteraction","compare","VisibleInsideMask","_color","_flipX","_flipY","_maskLayer","AnimationClipCurveBinding","relativePath","curve","AnimationEvent","functionName","parameter","AnimationProperty","Motion","AnimationClip","_curveBindings","_events","addEvent","param","clearEvents","addCurveBinding","Rotation","Scale","BlendShapeWeights","curveBinding","clearCurveBindings","_sampleAnimation","curveData","evaluate","AnimatorUtils","scaleWeight","sX","sY","sZ","pow","scaleBlend","sa","sb","saw","_tempVector30","sbw","_tempVector31","sng","quaternionWeight","AnimatorLayerBlendingMode","AnimatorStatePlayState","LayerState","AnimationCurveOwner","crossCurveMark","crossCurveIndex","defaultValue","fixedPoseValue","_hasSavedDefaultValue","saveDefaultValue","blendShapeWeights","saveFixedPoseValue","AnimationEventHandler","handlers","AnimatorStateTransition","duration","exitTime","destinationState","WrapMode","AnimatorStatePlayData","state","stateData","frameTime","playState","clipTime","currentEventIndex","offsetFrameTime","UnStarted","clipStartTime","clip","_getDuration","Playing","wrapMode","Loop","Finished","AnimatorLayerData","animatorStateDataMap","srcPlayData","destPlayData","layerState","Standby","manuallyTransition","crossFadeTransition","switchPlayData","switchTemp","AnimatorStateData","curveOwners","eventHandlers","AnimatorStateInfo","layerIndex","CrossCurveData","curveOwner","srcCurveIndex","destCurveIndex","Animator","_animatorController","play","stateName","normalizedTimeOffset","_controllerUpdateFlag","_clearPlayData","animatorInfo","_getAnimatorStateInfo","_animatorInfo","animatorLayerData","_getAnimatorLayerData","curState","_revertDefaultValue","animatorStateData","_getAnimatorStateData","_saveDefaultValues","_reset","animatorController","layers","states","stateMachine","crossFade","normalizedTransitionDuration","_crossFadeByTransition","speed","_updateLayer","getCurrentAnimatorState","_animatorLayersData","findStateByName","animatorState","animatorStateDataCollection","_saveAnimatorStateData","_saveAnimatorEventHandlers","animationCureOwners","_animationCurveOwners","curves","targetEntity","propertyOwners","eventHandlerPool","_animationEventHandlerPool","scriptCount","eventHandler","funcName","handler","_clearCrossData","_crossCurveDataCollection","_crossCurveDataPool","_addCrossCurveData","crossCurveData","owner","curCurveIndex","nextCurveIndex","dataItem","_prepareCrossFading","_prepareSrcCrossData","_prepareDestCrossData","_prepareStandbyCrossFading","_prepareFixedPoseCrossFading","saveFixed","_evaluateCurve","additive","baseValue","pos","_tempVector3","rot","_tempQuaternion","conjugate","divide","firstLayer","blendingMode","animLayerData","crossFadeTransitionInfo","layerAdditive","layerWeight","_checkTransition","_updatePlayingState","FixedCrossFading","_updateCrossFadeFromPose","CrossFading","_updateCrossFade","playData","layerData","delta","lastPlayState","lastClipTime","_fireAnimationEvents","_callAnimatorScriptOnEnter","_callAnimatorScriptOnExit","_callAnimatorScriptOnUpdate","_applyClipValueAdditive","_applyClipValue","crossCurveDataCollection","srcCurves","srcState","srcStateData","lastSrcPlayState","srcEventHandler","destState","destStateData","lastDstPlayState","destEventHandler","destCurves","lastSrcClipTime","lastDestClipTime","crossWeight","srcPlayState","destPlayState","_updateCrossFadeData","srcClipTime","destClipTime","srcValue","destValue","_applyCrossClipValue","fixed","lerp","slerp","additiveValue","transitions","transition","animatorStateInfo","crossState","clipDuration","_fireSubAnimationEvents","clipEndTime","curClipTime","_onStateEnterScripts","onStateEnter","_onStateUpdateScripts","onStateUpdate","_onStateExitScripts","onStateExit","_speed","AnimatorController","_layers","_layersMap","findLayerByName","_distributeUpdateFlag","removeLayer","theLayer","clearLayers","AnimatorControllerLayer","Override","StateMachineScript","_state","animator","_removeStateMachineScript","AnimatorState","_clipStartTime","_clipEndTime","_clip","_transitions","addTransition","removeTransition","addStateMachineScript","scriptType","clearTransitions","AnimatorStateMachine","_statesMap","addState","removeState","makeUniqueStateName","originName","InterpolableValueType","InterpolationType","AnimationCurve","interpolation","_valueSize","_valueType","_currentValue","_currentIndex","addKey","FloatArray","curIndex","nextIndex","curFrameTime","dur","_evaluateLinear","Step","_evaluateStep","CubicSpine","Hermite","_evaluateHermite","moveKey","removeKey","newLength","frameIndex","nextFrameIndex","curValue","nextValue","curKey","nextKey","t0","outTangent","t1","inTangent","p0","isFinite","t2","t3","tan0","tan1","Keyframe","InterpolableKeyframe","AnimatorConditionMode","SkyBoxMaterial","_decodeParam","DirtyFlagType","ParticleRendererBlendMode","ParticleRenderer","_getRandom","random","props","_vertexStride","_vertexBuffer","_maxCount","_positionRandomness","_positionArray","_velocity","_velocityRandomness","_acceleration","_accelerationRandomness","_colorRandomness","_sizeRandomness","_alpha","_alphaRandomness","_startAngle","_startAngleRandomness","_rotateVelocity","_rotateVelocityRandomness","_lifetime","_startTimeRandomness","_isOnce","_onceTime","_isInit","_isStart","_updateDirtyFlag","_isRotateToVelocity","_isUseOriginColor","_isScaleByLifetime","_is2d","_isFadeIn","_isFadeOut","_playOnEnable","spriteSheet","_createMaterial","_updateBuffer","isUseOriginColor","is2d","isFadeOut","useUint32","_uint16VertexLimit","startIndex","_updateSingleBuffer","getRandom","k0","k1","k2","k3","Velocity","Acceleration","StartTime","LifeTime","Size","StartAngle","RotateVelocity","_updateSingleUv","h","q","ratio","VERT_SHADER","FRAG_SHADER","TrailMaterial","TrailRenderer","_stroke","_minSeg","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_prePointsNum","stroke","minSeg","lifetime","targetFrameRate","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","TriangleStrip","points","vx","vy","vz","down","transformByQuat","dy","cross","perpVector","_projectOnPlane","acos","texDelta","_projectOnVector","n_p","cosine","Fog","EXP2Fog","_density","density","_densityProperty","LinearFog","_near","_far","near","far","_nearProperty","_farProperty","Probe","probeLayer","_oriCameraRenderTarget","_renderTargetSwap","_activeRenderTarget","_oriCameraCullingMask","onTextureChange","renderColorTexture","cacheTarget","cacheUp","cacheDir","CubeProbe","oriViewMatrix","_oriFieldOfView","_storeCamera","_setCamera","_restoreCamera","fieldOfView","LightShadow","_viewMatFromLightProperty","_projMatFromLightProperty","_shadowBiasProperty","bias","_shadowIntensityProperty","_shadowRadiusProperty","_shadowMapSizeProperty","mapSize","_shadowMapsProperty","clearMap","_mapSize","initShadowProjectionMatrix","fov","sqrt","appendData","viewStart","projectionStart","biasStart","intensityStart","radiusStart","mapSizeStart","mapStart","defineProperty","_enableShadow","shadow","_recieveShadow","_castShadow","ShadowMapMaterial","ShadowMapPass","queue","ShadowMaterial","ShadowPass","defaultRenderPass","shadowMapCount","lgt","enableShadow","ShadowFeature","_shadowPass","_shadowMapMaterial","addShadowPass","shadowMapPass","addShadowMapPass","updatePassRenderFlag","shadowMaterial","Layer30","Layer31","renderQueue","receiveShadow","recieveShadow","castShadow"],"mappings":"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"}