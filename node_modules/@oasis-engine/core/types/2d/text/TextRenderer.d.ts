import { BoundingBox, Color } from "@oasis-engine/math";
import { SpriteMaskInteraction } from "..";
import { Renderer } from "../..";
import { Entity } from "../../Entity";
import { FontStyle } from "../enums/FontStyle";
import { TextHorizontalAlignment, TextVerticalAlignment } from "../enums/TextAlignment";
import { OverflowMode } from "../enums/TextOverflow";
import { Font } from "./Font";
/**
 * Renders a text for 2D graphics.
 */
export declare class TextRenderer extends Renderer {
    private static _tempVec3;
    private _sprite;
    private _positions;
    private _color;
    private _text;
    private _width;
    private _height;
    private _font;
    private _fontSize;
    private _fontStyle;
    private _lineSpacing;
    private _horizontalAlignment;
    private _verticalAlignment;
    private _enableWrapping;
    private _overflowMode;
    private _dirtyFlag;
    private _isWorldMatrixDirty;
    private _maskInteraction;
    private _maskLayer;
    /**
     * Rendering color for the Text.
     */
    get color(): Color;
    set color(value: Color);
    /**
     * Rendering string for the Text.
     */
    get text(): string;
    set text(value: string);
    /**
     * The width of the TextRenderer (in 3D world coordinates).
     */
    get width(): number;
    set width(value: number);
    /**
     * The height of the TextRenderer (in 3D world coordinates).
     */
    get height(): number;
    set height(value: number);
    /**
     * The font of the Text.
     */
    get font(): Font;
    set font(value: Font);
    /**
     * The font size of the Text.
     */
    get fontSize(): number;
    set fontSize(value: number);
    /**
     * The style of the font.
     */
    get fontStyle(): FontStyle;
    set fontStyle(value: FontStyle);
    /**
     * The space between two lines (in pixels).
     */
    get lineSpacing(): number;
    set lineSpacing(value: number);
    /**
     * The horizontal alignment.
     */
    get horizontalAlignment(): TextHorizontalAlignment;
    set horizontalAlignment(value: TextHorizontalAlignment);
    /**
     * The vertical alignment.
     */
    get verticalAlignment(): TextVerticalAlignment;
    set verticalAlignment(value: TextVerticalAlignment);
    /**
     * Whether wrap text to next line when exceeds the width of the container.
     */
    get enableWrapping(): boolean;
    set enableWrapping(value: boolean);
    /**
     * The overflow mode.
     */
    get overflowMode(): OverflowMode;
    set overflowMode(value: OverflowMode);
    /**
     * Interacts with the masks.
     */
    get maskInteraction(): SpriteMaskInteraction;
    set maskInteraction(value: SpriteMaskInteraction);
    /**
     * The mask layer the sprite renderer belongs to.
     */
    get maskLayer(): number;
    set maskLayer(value: number);
    constructor(entity: Entity);
    /**
     * @override
     */
    protected _updateBounds(worldBounds: BoundingBox): void;
    private _isContainDirtyFlag;
    private _setDirtyFlagTrue;
    private _setDirtyFlagFalse;
    private _updateText;
    private _updateTexture;
    private _updateStencilState;
    private _updatePosition;
    private _clearTexture;
}
