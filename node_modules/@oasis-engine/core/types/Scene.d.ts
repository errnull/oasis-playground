import { Background } from "./Background";
import { EngineObject } from "./base";
import { Engine } from "./Engine";
import { Entity } from "./Entity";
import { FeatureManager } from "./FeatureManager";
import { AmbientLight } from "./lighting/AmbientLight";
import { SceneFeature } from "./SceneFeature";
import { ShaderData } from "./shader/ShaderData";
/**
 * Scene.
 */
export declare class Scene extends EngineObject {
    static sceneFeatureManager: FeatureManager<SceneFeature>;
    /** Scene name. */
    name: string;
    /** The background of the scene. */
    readonly background: Background;
    /** Scene-related shader data. */
    readonly shaderData: ShaderData;
    private _rootEntities;
    private _ambientLight;
    /**
     * Ambient light.
     */
    get ambientLight(): AmbientLight;
    set ambientLight(value: AmbientLight);
    /**
     * Count of root entities.
     */
    get rootEntitiesCount(): number;
    /**
     * Root entity collection.
     */
    get rootEntities(): Readonly<Entity[]>;
    /**
     * Create scene.
     * @param engine - Engine
     * @param name - Name
     */
    constructor(engine: Engine, name?: string);
    /**
     * Create root entity.
     * @param name - Entity name
     * @returns Entity
     */
    createRootEntity(name?: string): Entity;
    /**
     * Append an entity.
     * @param entity - The root entity to add
     */
    addRootEntity(entity: Entity): void;
    /**
     * Remove an entity.
     * @param entity - The root entity to remove
     */
    removeRootEntity(entity: Entity): void;
    /**
     * Get root entity from index.
     * @param index - Index
     * @returns Entity
     */
    getRootEntity(index?: number): Entity | null;
    /**
     * Find entity globally by name.
     * @param name - Entity name
     * @returns Entity
     */
    findEntityByName(name: string): Entity | null;
    /**
     * Find entity globally by name,use ‘/’ symbol as a path separator.
     * @param path - Entity's path
     * @returns Entity
     */
    findEntityByPath(path: string): Entity | null;
    /**
     * Destroy this scene.
     */
    destroy(): void;
    private _removeEntity;
    static registerFeature(Feature: new () => SceneFeature): void;
    findFeature<T extends SceneFeature>(Feature: {
        new (): T;
    }): T;
    features: SceneFeature[];
}
